// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketDepth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MarketDepth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MarketDepth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MarketDepthData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MarketDepth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MarketDepth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketDepth_2eproto;
namespace protobuf {
class MarketDepth;
class MarketDepthDefaultTypeInternal;
extern MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::MarketDepth* Arena::CreateMaybeMessage<::protobuf::MarketDepth>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class MarketDepth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MarketDepth) */ {
 public:
  inline MarketDepth() : MarketDepth(nullptr) {};
  virtual ~MarketDepth();

  MarketDepth(const MarketDepth& from);
  MarketDepth(MarketDepth&& from) noexcept
    : MarketDepth() {
    *this = ::std::move(from);
  }

  inline MarketDepth& operator=(const MarketDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth& operator=(MarketDepth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDepth* internal_default_instance() {
    return reinterpret_cast<const MarketDepth*>(
               &_MarketDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarketDepth& a, MarketDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepth* New() const final {
    return CreateMaybeMessage<MarketDepth>(nullptr);
  }

  MarketDepth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepth& from);
  void MergeFrom(const MarketDepth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.MarketDepth";
  }
  protected:
  explicit MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDepth_2eproto);
    return ::descriptor_table_MarketDepth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDepthDataFieldNumber = 2,
    kReqIdFieldNumber = 1,
  };
  // .protobuf.MarketDepthData marketDepthData = 2;
  bool has_marketdepthdata() const;
  private:
  bool _internal_has_marketdepthdata() const;
  public:
  void clear_marketdepthdata();
  const ::protobuf::MarketDepthData& marketdepthdata() const;
  ::protobuf::MarketDepthData* release_marketdepthdata();
  ::protobuf::MarketDepthData* mutable_marketdepthdata();
  void set_allocated_marketdepthdata(::protobuf::MarketDepthData* marketdepthdata);
  private:
  const ::protobuf::MarketDepthData& _internal_marketdepthdata() const;
  ::protobuf::MarketDepthData* _internal_mutable_marketdepthdata();
  public:
  void unsafe_arena_set_allocated_marketdepthdata(
      ::protobuf::MarketDepthData* marketdepthdata);
  ::protobuf::MarketDepthData* unsafe_arena_release_marketdepthdata();

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.MarketDepth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf::MarketDepthData* marketdepthdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  friend struct ::TableStruct_MarketDepth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketDepth

// int32 reqId = 1;
inline bool MarketDepth::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MarketDepth::has_reqid() const {
  return _internal_has_reqid();
}
inline void MarketDepth::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDepth::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDepth::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.MarketDepth.reqId)
  return _internal_reqid();
}
inline void MarketDepth::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  reqid_ = value;
}
inline void MarketDepth::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.MarketDepth.reqId)
}

// .protobuf.MarketDepthData marketDepthData = 2;
inline bool MarketDepth::_internal_has_marketdepthdata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || marketdepthdata_ != nullptr);
  return value;
}
inline bool MarketDepth::has_marketdepthdata() const {
  return _internal_has_marketdepthdata();
}
inline const ::protobuf::MarketDepthData& MarketDepth::_internal_marketdepthdata() const {
  const ::protobuf::MarketDepthData* p = marketdepthdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::MarketDepthData*>(
      &::protobuf::_MarketDepthData_default_instance_);
}
inline const ::protobuf::MarketDepthData& MarketDepth::marketdepthdata() const {
  // @@protoc_insertion_point(field_get:protobuf.MarketDepth.marketDepthData)
  return _internal_marketdepthdata();
}
inline void MarketDepth::unsafe_arena_set_allocated_marketdepthdata(
    ::protobuf::MarketDepthData* marketdepthdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdepthdata_);
  }
  marketdepthdata_ = marketdepthdata;
  if (marketdepthdata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.MarketDepth.marketDepthData)
}
inline ::protobuf::MarketDepthData* MarketDepth::release_marketdepthdata() {
  auto temp = unsafe_arena_release_marketdepthdata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::MarketDepthData* MarketDepth::unsafe_arena_release_marketdepthdata() {
  // @@protoc_insertion_point(field_release:protobuf.MarketDepth.marketDepthData)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf::MarketDepthData* temp = marketdepthdata_;
  marketdepthdata_ = nullptr;
  return temp;
}
inline ::protobuf::MarketDepthData* MarketDepth::_internal_mutable_marketdepthdata() {
  _has_bits_[0] |= 0x00000001u;
  if (marketdepthdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::MarketDepthData>(GetArena());
    marketdepthdata_ = p;
  }
  return marketdepthdata_;
}
inline ::protobuf::MarketDepthData* MarketDepth::mutable_marketdepthdata() {
  // @@protoc_insertion_point(field_mutable:protobuf.MarketDepth.marketDepthData)
  return _internal_mutable_marketdepthdata();
}
inline void MarketDepth::set_allocated_marketdepthdata(::protobuf::MarketDepthData* marketdepthdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdepthdata_);
  }
  if (marketdepthdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdepthdata)->GetArena();
    if (message_arena != submessage_arena) {
      marketdepthdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdepthdata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marketdepthdata_ = marketdepthdata;
  // @@protoc_insertion_point(field_set_allocated:protobuf.MarketDepth.marketDepthData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MarketDepth_2eproto
