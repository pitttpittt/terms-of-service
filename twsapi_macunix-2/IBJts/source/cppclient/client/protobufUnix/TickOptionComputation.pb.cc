// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickOptionComputation.proto

#include "TickOptionComputation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class TickOptionComputationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TickOptionComputation> _instance;
} _TickOptionComputation_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_TickOptionComputation_TickOptionComputation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_TickOptionComputation_default_instance_;
    new (ptr) ::protobuf::TickOptionComputation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::TickOptionComputation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickOptionComputation_TickOptionComputation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TickOptionComputation_TickOptionComputation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TickOptionComputation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TickOptionComputation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TickOptionComputation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TickOptionComputation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, reqid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, ticktype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, tickattrib_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, impliedvol_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, delta_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, optprice_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, pvdividend_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, gamma_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, vega_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, theta_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickOptionComputation, undprice_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::protobuf::TickOptionComputation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_TickOptionComputation_default_instance_),
};

const char descriptor_table_protodef_TickOptionComputation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033TickOptionComputation.proto\022\010protobuf\""
  "\217\003\n\025TickOptionComputation\022\022\n\005reqId\030\001 \001(\005"
  "H\000\210\001\001\022\025\n\010tickType\030\002 \001(\005H\001\210\001\001\022\027\n\ntickAttr"
  "ib\030\003 \001(\005H\002\210\001\001\022\027\n\nimpliedVol\030\004 \001(\001H\003\210\001\001\022\022"
  "\n\005delta\030\005 \001(\001H\004\210\001\001\022\025\n\010optPrice\030\006 \001(\001H\005\210\001"
  "\001\022\027\n\npvDividend\030\007 \001(\001H\006\210\001\001\022\022\n\005gamma\030\010 \001("
  "\001H\007\210\001\001\022\021\n\004vega\030\t \001(\001H\010\210\001\001\022\022\n\005theta\030\n \001(\001"
  "H\t\210\001\001\022\025\n\010undPrice\030\013 \001(\001H\n\210\001\001B\010\n\006_reqIdB\013"
  "\n\t_tickTypeB\r\n\013_tickAttribB\r\n\013_impliedVo"
  "lB\010\n\006_deltaB\013\n\t_optPriceB\r\n\013_pvDividendB"
  "\010\n\006_gammaB\007\n\005_vegaB\010\n\006_thetaB\013\n\t_undPric"
  "eBE\n\026com.ib.client.protobufB\032TickOptionC"
  "omputationProto\252\002\016IBApi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TickOptionComputation_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TickOptionComputation_2eproto_sccs[1] = {
  &scc_info_TickOptionComputation_TickOptionComputation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TickOptionComputation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TickOptionComputation_2eproto = {
  false, false, descriptor_table_protodef_TickOptionComputation_2eproto, "TickOptionComputation.proto", 520,
  &descriptor_table_TickOptionComputation_2eproto_once, descriptor_table_TickOptionComputation_2eproto_sccs, descriptor_table_TickOptionComputation_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_TickOptionComputation_2eproto::offsets,
  file_level_metadata_TickOptionComputation_2eproto, 1, file_level_enum_descriptors_TickOptionComputation_2eproto, file_level_service_descriptors_TickOptionComputation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TickOptionComputation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TickOptionComputation_2eproto)), true);
namespace protobuf {

// ===================================================================

void TickOptionComputation::InitAsDefaultInstance() {
}
class TickOptionComputation::_Internal {
 public:
  using HasBits = decltype(std::declval<TickOptionComputation>()._has_bits_);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ticktype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tickattrib(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_impliedvol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optprice(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pvdividend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vega(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_undprice(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

TickOptionComputation::TickOptionComputation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.TickOptionComputation)
}
TickOptionComputation::TickOptionComputation(const TickOptionComputation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tickattrib_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(tickattrib_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TickOptionComputation)
}

void TickOptionComputation::SharedCtor() {
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tickattrib_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(tickattrib_));
}

TickOptionComputation::~TickOptionComputation() {
  // @@protoc_insertion_point(destructor:protobuf.TickOptionComputation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TickOptionComputation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TickOptionComputation::ArenaDtor(void* object) {
  TickOptionComputation* _this = reinterpret_cast< TickOptionComputation* >(object);
  (void)_this;
}
void TickOptionComputation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TickOptionComputation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TickOptionComputation& TickOptionComputation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TickOptionComputation_TickOptionComputation_2eproto.base);
  return *internal_default_instance();
}


void TickOptionComputation::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TickOptionComputation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&reqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vega_) -
        reinterpret_cast<char*>(&reqid_)) + sizeof(vega_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tickattrib_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(tickattrib_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TickOptionComputation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reqid(&has_bits);
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tickType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ticktype(&has_bits);
          ticktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tickAttrib = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tickattrib(&has_bits);
          tickattrib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double impliedVol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_impliedvol(&has_bits);
          impliedvol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double delta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double optPrice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_optprice(&has_bits);
          optprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pvDividend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_pvdividend(&has_bits);
          pvdividend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_gamma(&has_bits);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vega = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_vega(&has_bits);
          vega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double undPrice = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_undprice(&has_bits);
          undprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TickOptionComputation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TickOptionComputation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (_internal_has_reqid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // int32 tickType = 2;
  if (_internal_has_ticktype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticktype(), target);
  }

  // int32 tickAttrib = 3;
  if (_internal_has_tickattrib()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tickattrib(), target);
  }

  // double impliedVol = 4;
  if (_internal_has_impliedvol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_impliedvol(), target);
  }

  // double delta = 5;
  if (_internal_has_delta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_delta(), target);
  }

  // double optPrice = 6;
  if (_internal_has_optprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_optprice(), target);
  }

  // double pvDividend = 7;
  if (_internal_has_pvdividend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pvdividend(), target);
  }

  // double gamma = 8;
  if (_internal_has_gamma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_gamma(), target);
  }

  // double vega = 9;
  if (_internal_has_vega()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vega(), target);
  }

  // double theta = 10;
  if (_internal_has_theta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_theta(), target);
  }

  // double undPrice = 11;
  if (_internal_has_undprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_undprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TickOptionComputation)
  return target;
}

size_t TickOptionComputation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TickOptionComputation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // int32 reqId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reqid());
    }

    // int32 tickType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ticktype());
    }

    // double impliedVol = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // double delta = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // double optPrice = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double pvDividend = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // double gamma = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // double vega = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // double theta = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // double undPrice = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // int32 tickAttrib = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tickattrib());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickOptionComputation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.TickOptionComputation)
  GOOGLE_DCHECK_NE(&from, this);
  const TickOptionComputation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TickOptionComputation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.TickOptionComputation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.TickOptionComputation)
    MergeFrom(*source);
  }
}

void TickOptionComputation::MergeFrom(const TickOptionComputation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TickOptionComputation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ticktype_ = from.ticktype_;
    }
    if (cached_has_bits & 0x00000004u) {
      impliedvol_ = from.impliedvol_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      optprice_ = from.optprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      pvdividend_ = from.pvdividend_;
    }
    if (cached_has_bits & 0x00000040u) {
      gamma_ = from.gamma_;
    }
    if (cached_has_bits & 0x00000080u) {
      vega_ = from.vega_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000200u) {
      undprice_ = from.undprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      tickattrib_ = from.tickattrib_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TickOptionComputation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.TickOptionComputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickOptionComputation::CopyFrom(const TickOptionComputation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TickOptionComputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickOptionComputation::IsInitialized() const {
  return true;
}

void TickOptionComputation::InternalSwap(TickOptionComputation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickOptionComputation, tickattrib_)
      + sizeof(TickOptionComputation::tickattrib_)
      - PROTOBUF_FIELD_OFFSET(TickOptionComputation, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TickOptionComputation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::TickOptionComputation* Arena::CreateMaybeMessage< ::protobuf::TickOptionComputation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TickOptionComputation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
