// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RealTimeBarTick.proto

#include "RealTimeBarTick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class RealTimeBarTickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealTimeBarTick> _instance;
} _RealTimeBarTick_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_RealTimeBarTick_RealTimeBarTick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_RealTimeBarTick_default_instance_;
    new (ptr) ::protobuf::RealTimeBarTick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::RealTimeBarTick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealTimeBarTick_RealTimeBarTick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RealTimeBarTick_RealTimeBarTick_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RealTimeBarTick_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RealTimeBarTick_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RealTimeBarTick_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RealTimeBarTick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, reqid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, open_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, high_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, low_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, close_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, volume_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, wap_),
  PROTOBUF_FIELD_OFFSET(::protobuf::RealTimeBarTick, count_),
  6,
  2,
  3,
  4,
  5,
  8,
  0,
  1,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::protobuf::RealTimeBarTick)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_RealTimeBarTick_default_instance_),
};

const char descriptor_table_protodef_RealTimeBarTick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025RealTimeBarTick.proto\022\010protobuf\"\223\002\n\017Re"
  "alTimeBarTick\022\022\n\005reqId\030\001 \001(\005H\000\210\001\001\022\021\n\004tim"
  "e\030\002 \001(\003H\001\210\001\001\022\021\n\004open\030\003 \001(\001H\002\210\001\001\022\021\n\004high\030"
  "\004 \001(\001H\003\210\001\001\022\020\n\003low\030\005 \001(\001H\004\210\001\001\022\022\n\005close\030\006 "
  "\001(\001H\005\210\001\001\022\023\n\006volume\030\007 \001(\tH\006\210\001\001\022\020\n\003WAP\030\010 \001"
  "(\tH\007\210\001\001\022\022\n\005count\030\t \001(\005H\010\210\001\001B\010\n\006_reqIdB\007\n"
  "\005_timeB\007\n\005_openB\007\n\005_highB\006\n\004_lowB\010\n\006_clo"
  "seB\t\n\007_volumeB\006\n\004_WAPB\010\n\006_countB\?\n\026com.i"
  "b.client.protobufB\024RealTimeBarTickProto\252"
  "\002\016IBApi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RealTimeBarTick_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RealTimeBarTick_2eproto_sccs[1] = {
  &scc_info_RealTimeBarTick_RealTimeBarTick_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RealTimeBarTick_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RealTimeBarTick_2eproto = {
  false, false, descriptor_table_protodef_RealTimeBarTick_2eproto, "RealTimeBarTick.proto", 384,
  &descriptor_table_RealTimeBarTick_2eproto_once, descriptor_table_RealTimeBarTick_2eproto_sccs, descriptor_table_RealTimeBarTick_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_RealTimeBarTick_2eproto::offsets,
  file_level_metadata_RealTimeBarTick_2eproto, 1, file_level_enum_descriptors_RealTimeBarTick_2eproto, file_level_service_descriptors_RealTimeBarTick_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RealTimeBarTick_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RealTimeBarTick_2eproto)), true);
namespace protobuf {

// ===================================================================

void RealTimeBarTick::InitAsDefaultInstance() {
}
class RealTimeBarTick::_Internal {
 public:
  using HasBits = decltype(std::declval<RealTimeBarTick>()._has_bits_);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RealTimeBarTick::RealTimeBarTick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.RealTimeBarTick)
}
RealTimeBarTick::RealTimeBarTick(const RealTimeBarTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_volume()) {
    volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_volume(),
      GetArena());
  }
  wap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wap()) {
    wap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wap(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&time_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:protobuf.RealTimeBarTick)
}

void RealTimeBarTick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RealTimeBarTick_RealTimeBarTick_2eproto.base);
  volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&time_)) + sizeof(close_));
}

RealTimeBarTick::~RealTimeBarTick() {
  // @@protoc_insertion_point(destructor:protobuf.RealTimeBarTick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealTimeBarTick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RealTimeBarTick::ArenaDtor(void* object) {
  RealTimeBarTick* _this = reinterpret_cast< RealTimeBarTick* >(object);
  (void)_this;
}
void RealTimeBarTick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealTimeBarTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealTimeBarTick& RealTimeBarTick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealTimeBarTick_RealTimeBarTick_2eproto.base);
  return *internal_default_instance();
}


void RealTimeBarTick::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RealTimeBarTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      volume_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      wap_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&time_)) + sizeof(count_));
  }
  close_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealTimeBarTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reqid(&has_bits);
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_high(&has_bits);
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_close(&has_bits);
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_volume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.RealTimeBarTick.volume"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string WAP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_wap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.RealTimeBarTick.WAP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealTimeBarTick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RealTimeBarTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (_internal_has_reqid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // int64 time = 2;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // double open = 3;
  if (_internal_has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_open(), target);
  }

  // double high = 4;
  if (_internal_has_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_high(), target);
  }

  // double low = 5;
  if (_internal_has_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_low(), target);
  }

  // double close = 6;
  if (_internal_has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_close(), target);
  }

  // string volume = 7;
  if (_internal_has_volume()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume().data(), static_cast<int>(this->_internal_volume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RealTimeBarTick.volume");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_volume(), target);
  }

  // string WAP = 8;
  if (_internal_has_wap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wap().data(), static_cast<int>(this->_internal_wap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.RealTimeBarTick.WAP");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_wap(), target);
  }

  // int32 count = 9;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RealTimeBarTick)
  return target;
}

size_t RealTimeBarTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RealTimeBarTick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string volume = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_volume());
    }

    // string WAP = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wap());
    }

    // int64 time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

    // double open = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // double high = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double low = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // int32 reqId = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reqid());
    }

    // int32 count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

  }
  // double close = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealTimeBarTick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RealTimeBarTick)
  GOOGLE_DCHECK_NE(&from, this);
  const RealTimeBarTick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealTimeBarTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RealTimeBarTick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RealTimeBarTick)
    MergeFrom(*source);
  }
}

void RealTimeBarTick::MergeFrom(const RealTimeBarTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RealTimeBarTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_volume(from._internal_volume());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_wap(from._internal_wap());
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      open_ = from.open_;
    }
    if (cached_has_bits & 0x00000010u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000040u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000080u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_close(from._internal_close());
  }
}

void RealTimeBarTick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RealTimeBarTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeBarTick::CopyFrom(const RealTimeBarTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RealTimeBarTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeBarTick::IsInitialized() const {
  return true;
}

void RealTimeBarTick::InternalSwap(RealTimeBarTick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  volume_.Swap(&other->volume_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wap_.Swap(&other->wap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RealTimeBarTick, close_)
      + sizeof(RealTimeBarTick::close_)
      - PROTOBUF_FIELD_OFFSET(RealTimeBarTick, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RealTimeBarTick::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::RealTimeBarTick* Arena::CreateMaybeMessage< ::protobuf::RealTimeBarTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::RealTimeBarTick >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
