// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTicks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalTicks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalTicks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "HistoricalTick.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalTicks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalTicks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTicks_2eproto;
namespace protobuf {
class HistoricalTicks;
class HistoricalTicksDefaultTypeInternal;
extern HistoricalTicksDefaultTypeInternal _HistoricalTicks_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalTicks* Arena::CreateMaybeMessage<::protobuf::HistoricalTicks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalTicks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalTicks) */ {
 public:
  inline HistoricalTicks() : HistoricalTicks(nullptr) {};
  virtual ~HistoricalTicks();

  HistoricalTicks(const HistoricalTicks& from);
  HistoricalTicks(HistoricalTicks&& from) noexcept
    : HistoricalTicks() {
    *this = ::std::move(from);
  }

  inline HistoricalTicks& operator=(const HistoricalTicks& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalTicks& operator=(HistoricalTicks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalTicks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalTicks* internal_default_instance() {
    return reinterpret_cast<const HistoricalTicks*>(
               &_HistoricalTicks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoricalTicks& a, HistoricalTicks& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalTicks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalTicks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalTicks* New() const final {
    return CreateMaybeMessage<HistoricalTicks>(nullptr);
  }

  HistoricalTicks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalTicks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalTicks& from);
  void MergeFrom(const HistoricalTicks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalTicks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalTicks";
  }
  protected:
  explicit HistoricalTicks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalTicks_2eproto);
    return ::descriptor_table_HistoricalTicks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoricalTicksFieldNumber = 2,
    kReqIdFieldNumber = 1,
    kIsDoneFieldNumber = 3,
  };
  // repeated .protobuf.HistoricalTick historicalTicks = 2;
  int historicalticks_size() const;
  private:
  int _internal_historicalticks_size() const;
  public:
  void clear_historicalticks();
  ::protobuf::HistoricalTick* mutable_historicalticks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::HistoricalTick >*
      mutable_historicalticks();
  private:
  const ::protobuf::HistoricalTick& _internal_historicalticks(int index) const;
  ::protobuf::HistoricalTick* _internal_add_historicalticks();
  public:
  const ::protobuf::HistoricalTick& historicalticks(int index) const;
  ::protobuf::HistoricalTick* add_historicalticks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::HistoricalTick >&
      historicalticks() const;

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isDone = 3;
  bool has_isdone() const;
  private:
  bool _internal_has_isdone() const;
  public:
  void clear_isdone();
  bool isdone() const;
  void set_isdone(bool value);
  private:
  bool _internal_isdone() const;
  void _internal_set_isdone(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalTicks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::HistoricalTick > historicalticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  bool isdone_;
  friend struct ::TableStruct_HistoricalTicks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoricalTicks

// int32 reqId = 1;
inline bool HistoricalTicks::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalTicks::has_reqid() const {
  return _internal_has_reqid();
}
inline void HistoricalTicks::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicks::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicks::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicks.reqId)
  return _internal_reqid();
}
inline void HistoricalTicks::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void HistoricalTicks::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicks.reqId)
}

// repeated .protobuf.HistoricalTick historicalTicks = 2;
inline int HistoricalTicks::_internal_historicalticks_size() const {
  return historicalticks_.size();
}
inline int HistoricalTicks::historicalticks_size() const {
  return _internal_historicalticks_size();
}
inline ::protobuf::HistoricalTick* HistoricalTicks::mutable_historicalticks(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTicks.historicalTicks)
  return historicalticks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::HistoricalTick >*
HistoricalTicks::mutable_historicalticks() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.HistoricalTicks.historicalTicks)
  return &historicalticks_;
}
inline const ::protobuf::HistoricalTick& HistoricalTicks::_internal_historicalticks(int index) const {
  return historicalticks_.Get(index);
}
inline const ::protobuf::HistoricalTick& HistoricalTicks::historicalticks(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicks.historicalTicks)
  return _internal_historicalticks(index);
}
inline ::protobuf::HistoricalTick* HistoricalTicks::_internal_add_historicalticks() {
  return historicalticks_.Add();
}
inline ::protobuf::HistoricalTick* HistoricalTicks::add_historicalticks() {
  // @@protoc_insertion_point(field_add:protobuf.HistoricalTicks.historicalTicks)
  return _internal_add_historicalticks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::HistoricalTick >&
HistoricalTicks::historicalticks() const {
  // @@protoc_insertion_point(field_list:protobuf.HistoricalTicks.historicalTicks)
  return historicalticks_;
}

// bool isDone = 3;
inline bool HistoricalTicks::_internal_has_isdone() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalTicks::has_isdone() const {
  return _internal_has_isdone();
}
inline void HistoricalTicks::clear_isdone() {
  isdone_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HistoricalTicks::_internal_isdone() const {
  return isdone_;
}
inline bool HistoricalTicks::isdone() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicks.isDone)
  return _internal_isdone();
}
inline void HistoricalTicks::_internal_set_isdone(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isdone_ = value;
}
inline void HistoricalTicks::set_isdone(bool value) {
  _internal_set_isdone(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicks.isDone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalTicks_2eproto
