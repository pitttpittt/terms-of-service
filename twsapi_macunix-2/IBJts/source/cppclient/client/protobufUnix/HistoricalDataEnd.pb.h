// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalDataEnd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalDataEnd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalDataEnd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalDataEnd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalDataEnd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalDataEnd_2eproto;
namespace protobuf {
class HistoricalDataEnd;
class HistoricalDataEndDefaultTypeInternal;
extern HistoricalDataEndDefaultTypeInternal _HistoricalDataEnd_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalDataEnd* Arena::CreateMaybeMessage<::protobuf::HistoricalDataEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalDataEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalDataEnd) */ {
 public:
  inline HistoricalDataEnd() : HistoricalDataEnd(nullptr) {};
  virtual ~HistoricalDataEnd();

  HistoricalDataEnd(const HistoricalDataEnd& from);
  HistoricalDataEnd(HistoricalDataEnd&& from) noexcept
    : HistoricalDataEnd() {
    *this = ::std::move(from);
  }

  inline HistoricalDataEnd& operator=(const HistoricalDataEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalDataEnd& operator=(HistoricalDataEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalDataEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalDataEnd* internal_default_instance() {
    return reinterpret_cast<const HistoricalDataEnd*>(
               &_HistoricalDataEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoricalDataEnd& a, HistoricalDataEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalDataEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalDataEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalDataEnd* New() const final {
    return CreateMaybeMessage<HistoricalDataEnd>(nullptr);
  }

  HistoricalDataEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalDataEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalDataEnd& from);
  void MergeFrom(const HistoricalDataEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalDataEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalDataEnd";
  }
  protected:
  explicit HistoricalDataEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalDataEnd_2eproto);
    return ::descriptor_table_HistoricalDataEnd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateStrFieldNumber = 2,
    kEndDateStrFieldNumber = 3,
    kReqIdFieldNumber = 1,
  };
  // string startDateStr = 2;
  bool has_startdatestr() const;
  private:
  bool _internal_has_startdatestr() const;
  public:
  void clear_startdatestr();
  const std::string& startdatestr() const;
  void set_startdatestr(const std::string& value);
  void set_startdatestr(std::string&& value);
  void set_startdatestr(const char* value);
  void set_startdatestr(const char* value, size_t size);
  std::string* mutable_startdatestr();
  std::string* release_startdatestr();
  void set_allocated_startdatestr(std::string* startdatestr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startdatestr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startdatestr(
      std::string* startdatestr);
  private:
  const std::string& _internal_startdatestr() const;
  void _internal_set_startdatestr(const std::string& value);
  std::string* _internal_mutable_startdatestr();
  public:

  // string endDateStr = 3;
  bool has_enddatestr() const;
  private:
  bool _internal_has_enddatestr() const;
  public:
  void clear_enddatestr();
  const std::string& enddatestr() const;
  void set_enddatestr(const std::string& value);
  void set_enddatestr(std::string&& value);
  void set_enddatestr(const char* value);
  void set_enddatestr(const char* value, size_t size);
  std::string* mutable_enddatestr();
  std::string* release_enddatestr();
  void set_allocated_enddatestr(std::string* enddatestr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enddatestr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enddatestr(
      std::string* enddatestr);
  private:
  const std::string& _internal_enddatestr() const;
  void _internal_set_enddatestr(const std::string& value);
  std::string* _internal_mutable_enddatestr();
  public:

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalDataEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdatestr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatestr_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  friend struct ::TableStruct_HistoricalDataEnd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoricalDataEnd

// int32 reqId = 1;
inline bool HistoricalDataEnd::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistoricalDataEnd::has_reqid() const {
  return _internal_has_reqid();
}
inline void HistoricalDataEnd::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataEnd::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataEnd::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataEnd.reqId)
  return _internal_reqid();
}
inline void HistoricalDataEnd::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reqid_ = value;
}
inline void HistoricalDataEnd::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataEnd.reqId)
}

// string startDateStr = 2;
inline bool HistoricalDataEnd::_internal_has_startdatestr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalDataEnd::has_startdatestr() const {
  return _internal_has_startdatestr();
}
inline void HistoricalDataEnd::clear_startdatestr() {
  startdatestr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistoricalDataEnd::startdatestr() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataEnd.startDateStr)
  return _internal_startdatestr();
}
inline void HistoricalDataEnd::set_startdatestr(const std::string& value) {
  _internal_set_startdatestr(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataEnd.startDateStr)
}
inline std::string* HistoricalDataEnd::mutable_startdatestr() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataEnd.startDateStr)
  return _internal_mutable_startdatestr();
}
inline const std::string& HistoricalDataEnd::_internal_startdatestr() const {
  return startdatestr_.Get();
}
inline void HistoricalDataEnd::_internal_set_startdatestr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  startdatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataEnd::set_startdatestr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  startdatestr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataEnd.startDateStr)
}
inline void HistoricalDataEnd::set_startdatestr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  startdatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataEnd.startDateStr)
}
inline void HistoricalDataEnd::set_startdatestr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  startdatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataEnd.startDateStr)
}
inline std::string* HistoricalDataEnd::_internal_mutable_startdatestr() {
  _has_bits_[0] |= 0x00000001u;
  return startdatestr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataEnd::release_startdatestr() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataEnd.startDateStr)
  if (!_internal_has_startdatestr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return startdatestr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataEnd::set_allocated_startdatestr(std::string* startdatestr) {
  if (startdatestr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  startdatestr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startdatestr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataEnd.startDateStr)
}
inline std::string* HistoricalDataEnd::unsafe_arena_release_startdatestr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataEnd.startDateStr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return startdatestr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataEnd::unsafe_arena_set_allocated_startdatestr(
    std::string* startdatestr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startdatestr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  startdatestr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startdatestr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataEnd.startDateStr)
}

// string endDateStr = 3;
inline bool HistoricalDataEnd::_internal_has_enddatestr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalDataEnd::has_enddatestr() const {
  return _internal_has_enddatestr();
}
inline void HistoricalDataEnd::clear_enddatestr() {
  enddatestr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistoricalDataEnd::enddatestr() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataEnd.endDateStr)
  return _internal_enddatestr();
}
inline void HistoricalDataEnd::set_enddatestr(const std::string& value) {
  _internal_set_enddatestr(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataEnd.endDateStr)
}
inline std::string* HistoricalDataEnd::mutable_enddatestr() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataEnd.endDateStr)
  return _internal_mutable_enddatestr();
}
inline const std::string& HistoricalDataEnd::_internal_enddatestr() const {
  return enddatestr_.Get();
}
inline void HistoricalDataEnd::_internal_set_enddatestr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  enddatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataEnd::set_enddatestr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  enddatestr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataEnd.endDateStr)
}
inline void HistoricalDataEnd::set_enddatestr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  enddatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataEnd.endDateStr)
}
inline void HistoricalDataEnd::set_enddatestr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  enddatestr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataEnd.endDateStr)
}
inline std::string* HistoricalDataEnd::_internal_mutable_enddatestr() {
  _has_bits_[0] |= 0x00000002u;
  return enddatestr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataEnd::release_enddatestr() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataEnd.endDateStr)
  if (!_internal_has_enddatestr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return enddatestr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataEnd::set_allocated_enddatestr(std::string* enddatestr) {
  if (enddatestr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enddatestr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatestr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataEnd.endDateStr)
}
inline std::string* HistoricalDataEnd::unsafe_arena_release_enddatestr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataEnd.endDateStr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return enddatestr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataEnd::unsafe_arena_set_allocated_enddatestr(
    std::string* enddatestr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (enddatestr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enddatestr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      enddatestr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataEnd.endDateStr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalDataEnd_2eproto
