// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContractDetails.proto

#include "ContractDetails.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ContractDetails_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IneligibilityReason_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IneligibilityReason_IneligibilityReason_2eproto;
namespace protobuf {
class ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractDetails_SecIdListEntry_DoNotUse> _instance;
} _ContractDetails_SecIdListEntry_DoNotUse_default_instance_;
class ContractDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractDetails> _instance;
} _ContractDetails_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_ContractDetails_ContractDetails_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_ContractDetails_default_instance_;
    new (ptr) ::protobuf::ContractDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::ContractDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContractDetails_ContractDetails_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContractDetails_ContractDetails_2eproto}, {
      &scc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto.base,
      &scc_info_IneligibilityReason_IneligibilityReason_2eproto.base,}};

static void InitDefaultsscc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_ContractDetails_SecIdListEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::ContractDetails_SecIdListEntry_DoNotUse();
  }
  ::protobuf::ContractDetails_SecIdListEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ContractDetails_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ContractDetails_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ContractDetails_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ContractDetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails_SecIdListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, marketname_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, mintick_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, ordertypes_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, validexchanges_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, pricemagnifier_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, underconid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, longname_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, contractmonth_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, industry_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, category_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, subcategory_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, timezoneid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, tradinghours_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, liquidhours_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, evrule_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, evmultiplier_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, secidlist_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, agggroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, undersymbol_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, undersectype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, marketruleids_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, realexpirationdate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, stocktype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, minsize_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, sizeincrement_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, suggestedsizeincrement_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundname_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundfamily_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundtype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundfrontload_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundbackload_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundbackloadtimeinterval_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundmanagementfee_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundclosed_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundclosedfornewinvestors_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundclosedfornewmoney_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundnotifyamount_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundminimuminitialpurchase_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundminimumsubsequentpurchase_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundblueskystates_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundblueskyterritories_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, funddistributionpolicyindicator_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, fundassettype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, cusip_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, issuedate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, ratings_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, bondtype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, coupon_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, coupontype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, convertible_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, callable_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, puttable_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, descappend_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, nextoptiondate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, nextoptiontype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, nextoptionpartial_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, bondnotes_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ContractDetails, ineligibilityreasonlist_),
  0,
  1,
  2,
  3,
  44,
  45,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  46,
  ~0u,
  47,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  48,
  49,
  50,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  52,
  39,
  51,
  53,
  54,
  40,
  41,
  42,
  55,
  43,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf::ContractDetails_SecIdListEntry_DoNotUse)},
  { 9, 72, sizeof(::protobuf::ContractDetails)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_ContractDetails_SecIdListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_ContractDetails_default_instance_),
};

const char descriptor_table_protodef_ContractDetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ContractDetails.proto\022\010protobuf\032\031Ineli"
  "gibilityReason.proto\"\266\025\n\017ContractDetails"
  "\022\027\n\nmarketName\030\001 \001(\tH\000\210\001\001\022\024\n\007minTick\030\002 \001"
  "(\tH\001\210\001\001\022\027\n\norderTypes\030\003 \001(\tH\002\210\001\001\022\033\n\016vali"
  "dExchanges\030\004 \001(\tH\003\210\001\001\022\033\n\016priceMagnifier\030"
  "\005 \001(\005H\004\210\001\001\022\027\n\nunderConId\030\006 \001(\005H\005\210\001\001\022\025\n\010l"
  "ongName\030\007 \001(\tH\006\210\001\001\022\032\n\rcontractMonth\030\010 \001("
  "\tH\007\210\001\001\022\025\n\010industry\030\t \001(\tH\010\210\001\001\022\025\n\010categor"
  "y\030\n \001(\tH\t\210\001\001\022\030\n\013subcategory\030\013 \001(\tH\n\210\001\001\022\027"
  "\n\ntimeZoneId\030\014 \001(\tH\013\210\001\001\022\031\n\014tradingHours\030"
  "\r \001(\tH\014\210\001\001\022\030\n\013liquidHours\030\016 \001(\tH\r\210\001\001\022\023\n\006"
  "evRule\030\017 \001(\tH\016\210\001\001\022\031\n\014evMultiplier\030\020 \001(\001H"
  "\017\210\001\001\022;\n\tsecIdList\030\021 \003(\0132(.protobuf.Contr"
  "actDetails.SecIdListEntry\022\025\n\010aggGroup\030\022 "
  "\001(\005H\020\210\001\001\022\030\n\013underSymbol\030\023 \001(\tH\021\210\001\001\022\031\n\014un"
  "derSecType\030\024 \001(\tH\022\210\001\001\022\032\n\rmarketRuleIds\030\025"
  " \001(\tH\023\210\001\001\022\037\n\022realExpirationDate\030\026 \001(\tH\024\210"
  "\001\001\022\026\n\tstockType\030\027 \001(\tH\025\210\001\001\022\024\n\007minSize\030\030 "
  "\001(\tH\026\210\001\001\022\032\n\rsizeIncrement\030\031 \001(\tH\027\210\001\001\022#\n\026"
  "suggestedSizeIncrement\030\032 \001(\tH\030\210\001\001\022\025\n\010fun"
  "dName\030\033 \001(\tH\031\210\001\001\022\027\n\nfundFamily\030\034 \001(\tH\032\210\001"
  "\001\022\025\n\010fundType\030\035 \001(\tH\033\210\001\001\022\032\n\rfundFrontLoa"
  "d\030\036 \001(\tH\034\210\001\001\022\031\n\014fundBackLoad\030\037 \001(\tH\035\210\001\001\022"
  "%\n\030fundBackLoadTimeInterval\030  \001(\tH\036\210\001\001\022\036"
  "\n\021fundManagementFee\030! \001(\tH\037\210\001\001\022\027\n\nfundCl"
  "osed\030\" \001(\010H \210\001\001\022&\n\031fundClosedForNewInves"
  "tors\030# \001(\010H!\210\001\001\022\"\n\025fundClosedForNewMoney"
  "\030$ \001(\010H\"\210\001\001\022\035\n\020fundNotifyAmount\030% \001(\tH#\210"
  "\001\001\022\'\n\032fundMinimumInitialPurchase\030& \001(\tH$"
  "\210\001\001\022*\n\035fundMinimumSubsequentPurchase\030\' \001"
  "(\tH%\210\001\001\022\036\n\021fundBlueSkyStates\030( \001(\tH&\210\001\001\022"
  "#\n\026fundBlueSkyTerritories\030) \001(\tH\'\210\001\001\022,\n\037"
  "fundDistributionPolicyIndicator\030* \001(\tH(\210"
  "\001\001\022\032\n\rfundAssetType\030+ \001(\tH)\210\001\001\022\022\n\005cusip\030"
  ", \001(\tH*\210\001\001\022\026\n\tissueDate\030- \001(\tH+\210\001\001\022\024\n\007ra"
  "tings\030. \001(\tH,\210\001\001\022\025\n\010bondType\030/ \001(\tH-\210\001\001\022"
  "\023\n\006coupon\0300 \001(\001H.\210\001\001\022\027\n\ncouponType\0301 \001(\t"
  "H/\210\001\001\022\030\n\013convertible\0302 \001(\010H0\210\001\001\022\025\n\010calla"
  "ble\0303 \001(\010H1\210\001\001\022\025\n\010puttable\0304 \001(\010H2\210\001\001\022\027\n"
  "\ndescAppend\0305 \001(\tH3\210\001\001\022\033\n\016nextOptionDate"
  "\0306 \001(\tH4\210\001\001\022\033\n\016nextOptionType\0307 \001(\tH5\210\001\001"
  "\022\036\n\021nextOptionPartial\0308 \001(\010H6\210\001\001\022\026\n\tbond"
  "Notes\0309 \001(\tH7\210\001\001\022>\n\027ineligibilityReasonL"
  "ist\030: \003(\0132\035.protobuf.IneligibilityReason"
  "\0320\n\016SecIdListEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001B\r\n\013_marketNameB\n\n\010_minTickB\r\n"
  "\013_orderTypesB\021\n\017_validExchangesB\021\n\017_pric"
  "eMagnifierB\r\n\013_underConIdB\013\n\t_longNameB\020"
  "\n\016_contractMonthB\013\n\t_industryB\013\n\t_catego"
  "ryB\016\n\014_subcategoryB\r\n\013_timeZoneIdB\017\n\r_tr"
  "adingHoursB\016\n\014_liquidHoursB\t\n\007_evRuleB\017\n"
  "\r_evMultiplierB\013\n\t_aggGroupB\016\n\014_underSym"
  "bolB\017\n\r_underSecTypeB\020\n\016_marketRuleIdsB\025"
  "\n\023_realExpirationDateB\014\n\n_stockTypeB\n\n\010_"
  "minSizeB\020\n\016_sizeIncrementB\031\n\027_suggestedS"
  "izeIncrementB\013\n\t_fundNameB\r\n\013_fundFamily"
  "B\013\n\t_fundTypeB\020\n\016_fundFrontLoadB\017\n\r_fund"
  "BackLoadB\033\n\031_fundBackLoadTimeIntervalB\024\n"
  "\022_fundManagementFeeB\r\n\013_fundClosedB\034\n\032_f"
  "undClosedForNewInvestorsB\030\n\026_fundClosedF"
  "orNewMoneyB\023\n\021_fundNotifyAmountB\035\n\033_fund"
  "MinimumInitialPurchaseB \n\036_fundMinimumSu"
  "bsequentPurchaseB\024\n\022_fundBlueSkyStatesB\031"
  "\n\027_fundBlueSkyTerritoriesB\"\n _fundDistri"
  "butionPolicyIndicatorB\020\n\016_fundAssetTypeB"
  "\010\n\006_cusipB\014\n\n_issueDateB\n\n\010_ratingsB\013\n\t_"
  "bondTypeB\t\n\007_couponB\r\n\013_couponTypeB\016\n\014_c"
  "onvertibleB\013\n\t_callableB\013\n\t_puttableB\r\n\013"
  "_descAppendB\021\n\017_nextOptionDateB\021\n\017_nextO"
  "ptionTypeB\024\n\022_nextOptionPartialB\014\n\n_bond"
  "NotesB\?\n\026com.ib.client.protobufB\024Contrac"
  "tDetailsProto\252\002\016IBApi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ContractDetails_2eproto_deps[1] = {
  &::descriptor_table_IneligibilityReason_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ContractDetails_2eproto_sccs[2] = {
  &scc_info_ContractDetails_ContractDetails_2eproto.base,
  &scc_info_ContractDetails_SecIdListEntry_DoNotUse_ContractDetails_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ContractDetails_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ContractDetails_2eproto = {
  false, false, descriptor_table_protodef_ContractDetails_2eproto, "ContractDetails.proto", 2878,
  &descriptor_table_ContractDetails_2eproto_once, descriptor_table_ContractDetails_2eproto_sccs, descriptor_table_ContractDetails_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ContractDetails_2eproto::offsets,
  file_level_metadata_ContractDetails_2eproto, 2, file_level_enum_descriptors_ContractDetails_2eproto, file_level_service_descriptors_ContractDetails_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ContractDetails_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ContractDetails_2eproto)), true);
namespace protobuf {

// ===================================================================

ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse() {}
ContractDetails_SecIdListEntry_DoNotUse::ContractDetails_SecIdListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContractDetails_SecIdListEntry_DoNotUse::MergeFrom(const ContractDetails_SecIdListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContractDetails_SecIdListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ContractDetails_SecIdListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ContractDetails::InitAsDefaultInstance() {
}
class ContractDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractDetails>()._has_bits_);
  static void set_has_marketname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mintick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ordertypes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_validexchanges(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pricemagnifier(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_underconid(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_longname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contractmonth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_industry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_subcategory(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timezoneid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tradinghours(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_liquidhours(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_evrule(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_evmultiplier(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_agggroup(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_undersymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_undersectype(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_marketruleids(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_realexpirationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_stocktype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minsize(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_sizeincrement(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_suggestedsizeincrement(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_fundname(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_fundfamily(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_fundtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fundfrontload(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fundbackload(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fundbackloadtimeinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_fundmanagementfee(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_fundclosed(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_fundclosedfornewinvestors(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_fundclosedfornewmoney(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_fundnotifyamount(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_fundminimuminitialpurchase(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_fundminimumsubsequentpurchase(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_fundblueskystates(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fundblueskyterritories(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_funddistributionpolicyindicator(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_fundassettype(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_cusip(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_issuedate(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ratings(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bondtype(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_coupon(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_coupontype(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_convertible(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_callable(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_puttable(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_descappend(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_nextoptiondate(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_nextoptiontype(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_nextoptionpartial(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_bondnotes(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

void ContractDetails::clear_ineligibilityreasonlist() {
  ineligibilityreasonlist_.Clear();
}
ContractDetails::ContractDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secidlist_(arena),
  ineligibilityreasonlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.ContractDetails)
}
ContractDetails::ContractDetails(const ContractDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ineligibilityreasonlist_(from.ineligibilityreasonlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secidlist_.MergeFrom(from.secidlist_);
  marketname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marketname()) {
    marketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_marketname(),
      GetArena());
  }
  mintick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mintick()) {
    mintick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mintick(),
      GetArena());
  }
  ordertypes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordertypes()) {
    ordertypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordertypes(),
      GetArena());
  }
  validexchanges_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_validexchanges()) {
    validexchanges_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_validexchanges(),
      GetArena());
  }
  longname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_longname()) {
    longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_longname(),
      GetArena());
  }
  contractmonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contractmonth()) {
    contractmonth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractmonth(),
      GetArena());
  }
  industry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_industry()) {
    industry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_industry(),
      GetArena());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_category()) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category(),
      GetArena());
  }
  subcategory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subcategory()) {
    subcategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subcategory(),
      GetArena());
  }
  timezoneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezoneid()) {
    timezoneid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezoneid(),
      GetArena());
  }
  tradinghours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tradinghours()) {
    tradinghours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tradinghours(),
      GetArena());
  }
  liquidhours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_liquidhours()) {
    liquidhours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_liquidhours(),
      GetArena());
  }
  evrule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_evrule()) {
    evrule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_evrule(),
      GetArena());
  }
  undersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_undersymbol()) {
    undersymbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_undersymbol(),
      GetArena());
  }
  undersectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_undersectype()) {
    undersectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_undersectype(),
      GetArena());
  }
  marketruleids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marketruleids()) {
    marketruleids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_marketruleids(),
      GetArena());
  }
  realexpirationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_realexpirationdate()) {
    realexpirationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_realexpirationdate(),
      GetArena());
  }
  stocktype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stocktype()) {
    stocktype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stocktype(),
      GetArena());
  }
  minsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_minsize()) {
    minsize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_minsize(),
      GetArena());
  }
  sizeincrement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sizeincrement()) {
    sizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sizeincrement(),
      GetArena());
  }
  suggestedsizeincrement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suggestedsizeincrement()) {
    suggestedsizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suggestedsizeincrement(),
      GetArena());
  }
  fundname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundname()) {
    fundname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundname(),
      GetArena());
  }
  fundfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundfamily()) {
    fundfamily_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundfamily(),
      GetArena());
  }
  fundtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundtype()) {
    fundtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundtype(),
      GetArena());
  }
  fundfrontload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundfrontload()) {
    fundfrontload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundfrontload(),
      GetArena());
  }
  fundbackload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundbackload()) {
    fundbackload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundbackload(),
      GetArena());
  }
  fundbackloadtimeinterval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundbackloadtimeinterval()) {
    fundbackloadtimeinterval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundbackloadtimeinterval(),
      GetArena());
  }
  fundmanagementfee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundmanagementfee()) {
    fundmanagementfee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundmanagementfee(),
      GetArena());
  }
  fundnotifyamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundnotifyamount()) {
    fundnotifyamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundnotifyamount(),
      GetArena());
  }
  fundminimuminitialpurchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundminimuminitialpurchase()) {
    fundminimuminitialpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundminimuminitialpurchase(),
      GetArena());
  }
  fundminimumsubsequentpurchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundminimumsubsequentpurchase()) {
    fundminimumsubsequentpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundminimumsubsequentpurchase(),
      GetArena());
  }
  fundblueskystates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundblueskystates()) {
    fundblueskystates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundblueskystates(),
      GetArena());
  }
  fundblueskyterritories_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundblueskyterritories()) {
    fundblueskyterritories_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundblueskyterritories(),
      GetArena());
  }
  funddistributionpolicyindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_funddistributionpolicyindicator()) {
    funddistributionpolicyindicator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_funddistributionpolicyindicator(),
      GetArena());
  }
  fundassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fundassettype()) {
    fundassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fundassettype(),
      GetArena());
  }
  cusip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cusip()) {
    cusip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cusip(),
      GetArena());
  }
  issuedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_issuedate()) {
    issuedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_issuedate(),
      GetArena());
  }
  ratings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ratings()) {
    ratings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ratings(),
      GetArena());
  }
  bondtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bondtype()) {
    bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bondtype(),
      GetArena());
  }
  coupontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coupontype()) {
    coupontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coupontype(),
      GetArena());
  }
  descappend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_descappend()) {
    descappend_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_descappend(),
      GetArena());
  }
  nextoptiondate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nextoptiondate()) {
    nextoptiondate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nextoptiondate(),
      GetArena());
  }
  nextoptiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nextoptiontype()) {
    nextoptiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nextoptiontype(),
      GetArena());
  }
  bondnotes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bondnotes()) {
    bondnotes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bondnotes(),
      GetArena());
  }
  ::memcpy(&pricemagnifier_, &from.pricemagnifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextoptionpartial_) -
    reinterpret_cast<char*>(&pricemagnifier_)) + sizeof(nextoptionpartial_));
  // @@protoc_insertion_point(copy_constructor:protobuf.ContractDetails)
}

void ContractDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractDetails_ContractDetails_2eproto.base);
  marketname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mintick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertypes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validexchanges_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractmonth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  industry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subcategory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezoneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradinghours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidhours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evrule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  undersymbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  undersectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketruleids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realexpirationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stocktype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sizeincrement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suggestedsizeincrement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundfrontload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundbackload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundbackloadtimeinterval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundmanagementfee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundnotifyamount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundminimuminitialpurchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundminimumsubsequentpurchase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundblueskystates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundblueskyterritories_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funddistributionpolicyindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cusip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ratings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bondtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coupontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descappend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextoptiondate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextoptiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bondnotes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pricemagnifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextoptionpartial_) -
      reinterpret_cast<char*>(&pricemagnifier_)) + sizeof(nextoptionpartial_));
}

ContractDetails::~ContractDetails() {
  // @@protoc_insertion_point(destructor:protobuf.ContractDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mintick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertypes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validexchanges_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  longname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractmonth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  industry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subcategory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezoneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradinghours_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidhours_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evrule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  undersymbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  undersectype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketruleids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realexpirationdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stocktype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minsize_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sizeincrement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suggestedsizeincrement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundfamily_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundfrontload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundbackload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundbackloadtimeinterval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundmanagementfee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundnotifyamount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundminimuminitialpurchase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundminimumsubsequentpurchase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundblueskystates_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundblueskyterritories_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funddistributionpolicyindicator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cusip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ratings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bondtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coupontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descappend_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextoptiondate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextoptiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bondnotes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractDetails::ArenaDtor(void* object) {
  ContractDetails* _this = reinterpret_cast< ContractDetails* >(object);
  (void)_this;
}
void ContractDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractDetails& ContractDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractDetails_ContractDetails_2eproto.base);
  return *internal_default_instance();
}


void ContractDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ContractDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secidlist_.Clear();
  ineligibilityreasonlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      marketname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mintick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ordertypes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      validexchanges_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      longname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      contractmonth_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      industry_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      category_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      subcategory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      timezoneid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      tradinghours_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      liquidhours_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      evrule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      undersymbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      undersectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      marketruleids_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      realexpirationdate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      stocktype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      minsize_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      sizeincrement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      suggestedsizeincrement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      fundname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      fundfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      fundtype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      fundfrontload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      fundbackload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      fundbackloadtimeinterval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      fundmanagementfee_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      fundnotifyamount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      fundminimuminitialpurchase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      fundminimumsubsequentpurchase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      fundblueskystates_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fundblueskyterritories_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      funddistributionpolicyindicator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      fundassettype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      cusip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      issuedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      ratings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      bondtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      coupontype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      descappend_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      nextoptiondate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      nextoptiontype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      bondnotes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&pricemagnifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&agggroup_) -
        reinterpret_cast<char*>(&pricemagnifier_)) + sizeof(agggroup_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&fundclosed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextoptionpartial_) -
        reinterpret_cast<char*>(&fundclosed_)) + sizeof(nextoptionpartial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.marketName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minTick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mintick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.minTick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderTypes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ordertypes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.orderTypes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validExchanges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validexchanges();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.validExchanges"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priceMagnifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pricemagnifier(&_has_bits_);
          pricemagnifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 underConId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_underconid(&_has_bits_);
          underconid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string longName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_longname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.longName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contractMonth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_contractmonth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.contractMonth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string industry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_industry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.industry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string category = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.category"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subcategory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_subcategory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.subcategory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeZoneId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_timezoneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.timeZoneId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingHours = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_tradinghours();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.tradingHours"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string liquidHours = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_liquidhours();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.liquidHours"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string evRule = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_evrule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.evRule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double evMultiplier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_evmultiplier(&_has_bits_);
          evmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, string> secIdList = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&secidlist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 aggGroup = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_agggroup(&_has_bits_);
          agggroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string underSymbol = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_undersymbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.underSymbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string underSecType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_undersectype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.underSecType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketRuleIds = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_marketruleids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.marketRuleIds"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string realExpirationDate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_realexpirationdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.realExpirationDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stockType = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_stocktype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.stockType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minSize = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_minsize();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.minSize"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sizeIncrement = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_sizeincrement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.sizeIncrement"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suggestedSizeIncrement = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_suggestedsizeincrement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.suggestedSizeIncrement"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundName = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_fundname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundFamily = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_fundfamily();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundFamily"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundType = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_fundtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundFrontLoad = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_fundfrontload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundFrontLoad"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundBackLoad = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_fundbackload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundBackLoad"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundBackLoadTimeInterval = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_fundbackloadtimeinterval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundBackLoadTimeInterval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundManagementFee = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fundmanagementfee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundManagementFee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fundClosed = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fundclosed(&_has_bits_);
          fundclosed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fundClosedForNewInvestors = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fundclosedfornewinvestors(&_has_bits_);
          fundclosedfornewinvestors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fundClosedForNewMoney = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fundclosedfornewmoney(&_has_bits_);
          fundclosedfornewmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundNotifyAmount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fundnotifyamount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundNotifyAmount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundMinimumInitialPurchase = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_fundminimuminitialpurchase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundMinimumInitialPurchase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundMinimumSubsequentPurchase = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fundminimumsubsequentpurchase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundMinimumSubsequentPurchase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundBlueSkyStates = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fundblueskystates();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundBlueSkyStates"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundBlueSkyTerritories = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_fundblueskyterritories();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundBlueSkyTerritories"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundDistributionPolicyIndicator = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_funddistributionpolicyindicator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundDistributionPolicyIndicator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundAssetType = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_fundassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.fundAssetType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cusip = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_cusip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.cusip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issueDate = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_issuedate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.issueDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ratings = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_ratings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.ratings"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bondType = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bondtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.bondType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double coupon = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_coupon(&_has_bits_);
          coupon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string couponType = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_coupontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.couponType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool convertible = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_convertible(&_has_bits_);
          convertible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool callable = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_callable(&_has_bits_);
          callable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool puttable = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_puttable(&_has_bits_);
          puttable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string descAppend = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_descappend();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.descAppend"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nextOptionDate = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_nextoptiondate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.nextOptionDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nextOptionType = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_nextoptiontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.nextOptionType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nextOptionPartial = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_nextoptionpartial(&_has_bits_);
          nextoptionpartial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bondNotes = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_bondnotes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ContractDetails.bondNotes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ineligibilityreasonlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ContractDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketName = 1;
  if (_internal_has_marketname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketname().data(), static_cast<int>(this->_internal_marketname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.marketName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketname(), target);
  }

  // string minTick = 2;
  if (_internal_has_mintick()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mintick().data(), static_cast<int>(this->_internal_mintick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.minTick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mintick(), target);
  }

  // string orderTypes = 3;
  if (_internal_has_ordertypes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordertypes().data(), static_cast<int>(this->_internal_ordertypes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.orderTypes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ordertypes(), target);
  }

  // string validExchanges = 4;
  if (_internal_has_validexchanges()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validexchanges().data(), static_cast<int>(this->_internal_validexchanges().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.validExchanges");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validexchanges(), target);
  }

  // int32 priceMagnifier = 5;
  if (_internal_has_pricemagnifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pricemagnifier(), target);
  }

  // int32 underConId = 6;
  if (_internal_has_underconid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_underconid(), target);
  }

  // string longName = 7;
  if (_internal_has_longname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_longname().data(), static_cast<int>(this->_internal_longname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.longName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_longname(), target);
  }

  // string contractMonth = 8;
  if (_internal_has_contractmonth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractmonth().data(), static_cast<int>(this->_internal_contractmonth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.contractMonth");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_contractmonth(), target);
  }

  // string industry = 9;
  if (_internal_has_industry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_industry().data(), static_cast<int>(this->_internal_industry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.industry");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_industry(), target);
  }

  // string category = 10;
  if (_internal_has_category()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.category");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_category(), target);
  }

  // string subcategory = 11;
  if (_internal_has_subcategory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subcategory().data(), static_cast<int>(this->_internal_subcategory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.subcategory");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_subcategory(), target);
  }

  // string timeZoneId = 12;
  if (_internal_has_timezoneid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezoneid().data(), static_cast<int>(this->_internal_timezoneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.timeZoneId");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_timezoneid(), target);
  }

  // string tradingHours = 13;
  if (_internal_has_tradinghours()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradinghours().data(), static_cast<int>(this->_internal_tradinghours().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.tradingHours");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tradinghours(), target);
  }

  // string liquidHours = 14;
  if (_internal_has_liquidhours()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquidhours().data(), static_cast<int>(this->_internal_liquidhours().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.liquidHours");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_liquidhours(), target);
  }

  // string evRule = 15;
  if (_internal_has_evrule()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_evrule().data(), static_cast<int>(this->_internal_evrule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.evRule");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_evrule(), target);
  }

  // double evMultiplier = 16;
  if (_internal_has_evmultiplier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_evmultiplier(), target);
  }

  // map<string, string> secIdList = 17;
  if (!this->_internal_secidlist().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf.ContractDetails.SecIdListEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf.ContractDetails.SecIdListEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secidlist().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secidlist().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secidlist().begin();
          it != this->_internal_secidlist().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ContractDetails_SecIdListEntry_DoNotUse::Funcs::InternalSerialize(17, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secidlist().begin();
          it != this->_internal_secidlist().end(); ++it) {
        target = ContractDetails_SecIdListEntry_DoNotUse::Funcs::InternalSerialize(17, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 aggGroup = 18;
  if (_internal_has_agggroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_agggroup(), target);
  }

  // string underSymbol = 19;
  if (_internal_has_undersymbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_undersymbol().data(), static_cast<int>(this->_internal_undersymbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.underSymbol");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_undersymbol(), target);
  }

  // string underSecType = 20;
  if (_internal_has_undersectype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_undersectype().data(), static_cast<int>(this->_internal_undersectype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.underSecType");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_undersectype(), target);
  }

  // string marketRuleIds = 21;
  if (_internal_has_marketruleids()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketruleids().data(), static_cast<int>(this->_internal_marketruleids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.marketRuleIds");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_marketruleids(), target);
  }

  // string realExpirationDate = 22;
  if (_internal_has_realexpirationdate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realexpirationdate().data(), static_cast<int>(this->_internal_realexpirationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.realExpirationDate");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_realexpirationdate(), target);
  }

  // string stockType = 23;
  if (_internal_has_stocktype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stocktype().data(), static_cast<int>(this->_internal_stocktype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.stockType");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_stocktype(), target);
  }

  // string minSize = 24;
  if (_internal_has_minsize()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minsize().data(), static_cast<int>(this->_internal_minsize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.minSize");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_minsize(), target);
  }

  // string sizeIncrement = 25;
  if (_internal_has_sizeincrement()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sizeincrement().data(), static_cast<int>(this->_internal_sizeincrement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.sizeIncrement");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_sizeincrement(), target);
  }

  // string suggestedSizeIncrement = 26;
  if (_internal_has_suggestedsizeincrement()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suggestedsizeincrement().data(), static_cast<int>(this->_internal_suggestedsizeincrement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.suggestedSizeIncrement");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_suggestedsizeincrement(), target);
  }

  // string fundName = 27;
  if (_internal_has_fundname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundname().data(), static_cast<int>(this->_internal_fundname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundName");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_fundname(), target);
  }

  // string fundFamily = 28;
  if (_internal_has_fundfamily()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundfamily().data(), static_cast<int>(this->_internal_fundfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundFamily");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_fundfamily(), target);
  }

  // string fundType = 29;
  if (_internal_has_fundtype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundtype().data(), static_cast<int>(this->_internal_fundtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundType");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_fundtype(), target);
  }

  // string fundFrontLoad = 30;
  if (_internal_has_fundfrontload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundfrontload().data(), static_cast<int>(this->_internal_fundfrontload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundFrontLoad");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_fundfrontload(), target);
  }

  // string fundBackLoad = 31;
  if (_internal_has_fundbackload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundbackload().data(), static_cast<int>(this->_internal_fundbackload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundBackLoad");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_fundbackload(), target);
  }

  // string fundBackLoadTimeInterval = 32;
  if (_internal_has_fundbackloadtimeinterval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundbackloadtimeinterval().data(), static_cast<int>(this->_internal_fundbackloadtimeinterval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundBackLoadTimeInterval");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_fundbackloadtimeinterval(), target);
  }

  // string fundManagementFee = 33;
  if (_internal_has_fundmanagementfee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundmanagementfee().data(), static_cast<int>(this->_internal_fundmanagementfee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundManagementFee");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_fundmanagementfee(), target);
  }

  // bool fundClosed = 34;
  if (_internal_has_fundclosed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_fundclosed(), target);
  }

  // bool fundClosedForNewInvestors = 35;
  if (_internal_has_fundclosedfornewinvestors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_fundclosedfornewinvestors(), target);
  }

  // bool fundClosedForNewMoney = 36;
  if (_internal_has_fundclosedfornewmoney()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_fundclosedfornewmoney(), target);
  }

  // string fundNotifyAmount = 37;
  if (_internal_has_fundnotifyamount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundnotifyamount().data(), static_cast<int>(this->_internal_fundnotifyamount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundNotifyAmount");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_fundnotifyamount(), target);
  }

  // string fundMinimumInitialPurchase = 38;
  if (_internal_has_fundminimuminitialpurchase()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundminimuminitialpurchase().data(), static_cast<int>(this->_internal_fundminimuminitialpurchase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundMinimumInitialPurchase");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_fundminimuminitialpurchase(), target);
  }

  // string fundMinimumSubsequentPurchase = 39;
  if (_internal_has_fundminimumsubsequentpurchase()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundminimumsubsequentpurchase().data(), static_cast<int>(this->_internal_fundminimumsubsequentpurchase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundMinimumSubsequentPurchase");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_fundminimumsubsequentpurchase(), target);
  }

  // string fundBlueSkyStates = 40;
  if (_internal_has_fundblueskystates()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundblueskystates().data(), static_cast<int>(this->_internal_fundblueskystates().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundBlueSkyStates");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_fundblueskystates(), target);
  }

  // string fundBlueSkyTerritories = 41;
  if (_internal_has_fundblueskyterritories()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundblueskyterritories().data(), static_cast<int>(this->_internal_fundblueskyterritories().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundBlueSkyTerritories");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_fundblueskyterritories(), target);
  }

  // string fundDistributionPolicyIndicator = 42;
  if (_internal_has_funddistributionpolicyindicator()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funddistributionpolicyindicator().data(), static_cast<int>(this->_internal_funddistributionpolicyindicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundDistributionPolicyIndicator");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_funddistributionpolicyindicator(), target);
  }

  // string fundAssetType = 43;
  if (_internal_has_fundassettype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundassettype().data(), static_cast<int>(this->_internal_fundassettype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.fundAssetType");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_fundassettype(), target);
  }

  // string cusip = 44;
  if (_internal_has_cusip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cusip().data(), static_cast<int>(this->_internal_cusip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.cusip");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_cusip(), target);
  }

  // string issueDate = 45;
  if (_internal_has_issuedate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuedate().data(), static_cast<int>(this->_internal_issuedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.issueDate");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_issuedate(), target);
  }

  // string ratings = 46;
  if (_internal_has_ratings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ratings().data(), static_cast<int>(this->_internal_ratings().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.ratings");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_ratings(), target);
  }

  // string bondType = 47;
  if (_internal_has_bondtype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bondtype().data(), static_cast<int>(this->_internal_bondtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.bondType");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_bondtype(), target);
  }

  // double coupon = 48;
  if (_internal_has_coupon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_coupon(), target);
  }

  // string couponType = 49;
  if (_internal_has_coupontype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coupontype().data(), static_cast<int>(this->_internal_coupontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.couponType");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_coupontype(), target);
  }

  // bool convertible = 50;
  if (_internal_has_convertible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_convertible(), target);
  }

  // bool callable = 51;
  if (_internal_has_callable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_callable(), target);
  }

  // bool puttable = 52;
  if (_internal_has_puttable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_puttable(), target);
  }

  // string descAppend = 53;
  if (_internal_has_descappend()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descappend().data(), static_cast<int>(this->_internal_descappend().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.descAppend");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_descappend(), target);
  }

  // string nextOptionDate = 54;
  if (_internal_has_nextoptiondate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nextoptiondate().data(), static_cast<int>(this->_internal_nextoptiondate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.nextOptionDate");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_nextoptiondate(), target);
  }

  // string nextOptionType = 55;
  if (_internal_has_nextoptiontype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nextoptiontype().data(), static_cast<int>(this->_internal_nextoptiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.nextOptionType");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_nextoptiontype(), target);
  }

  // bool nextOptionPartial = 56;
  if (_internal_has_nextoptionpartial()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_nextoptionpartial(), target);
  }

  // string bondNotes = 57;
  if (_internal_has_bondnotes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bondnotes().data(), static_cast<int>(this->_internal_bondnotes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ContractDetails.bondNotes");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_bondnotes(), target);
  }

  // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ineligibilityreasonlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, this->_internal_ineligibilityreasonlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ContractDetails)
  return target;
}

size_t ContractDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ContractDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secIdList = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secidlist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secidlist().begin();
      it != this->_internal_secidlist().end(); ++it) {
    total_size += ContractDetails_SecIdListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
  total_size += 2UL * this->_internal_ineligibilityreasonlist_size();
  for (const auto& msg : this->ineligibilityreasonlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string marketName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marketname());
    }

    // string minTick = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mintick());
    }

    // string orderTypes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ordertypes());
    }

    // string validExchanges = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_validexchanges());
    }

    // string longName = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_longname());
    }

    // string contractMonth = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contractmonth());
    }

    // string industry = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_industry());
    }

    // string category = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // string subcategory = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subcategory());
    }

    // string timeZoneId = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezoneid());
    }

    // string tradingHours = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tradinghours());
    }

    // string liquidHours = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_liquidhours());
    }

    // string evRule = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_evrule());
    }

    // string underSymbol = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_undersymbol());
    }

    // string underSecType = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_undersectype());
    }

    // string marketRuleIds = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marketruleids());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // string realExpirationDate = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_realexpirationdate());
    }

    // string stockType = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stocktype());
    }

    // string minSize = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_minsize());
    }

    // string sizeIncrement = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sizeincrement());
    }

    // string suggestedSizeIncrement = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggestedsizeincrement());
    }

    // string fundName = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundname());
    }

    // string fundFamily = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundfamily());
    }

    // string fundType = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundtype());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // string fundFrontLoad = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundfrontload());
    }

    // string fundBackLoad = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundbackload());
    }

    // string fundBackLoadTimeInterval = 32;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundbackloadtimeinterval());
    }

    // string fundManagementFee = 33;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundmanagementfee());
    }

    // string fundNotifyAmount = 37;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundnotifyamount());
    }

    // string fundMinimumInitialPurchase = 38;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundminimuminitialpurchase());
    }

    // string fundMinimumSubsequentPurchase = 39;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundminimumsubsequentpurchase());
    }

    // string fundBlueSkyStates = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundblueskystates());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // string fundBlueSkyTerritories = 41;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundblueskyterritories());
    }

    // string fundDistributionPolicyIndicator = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_funddistributionpolicyindicator());
    }

    // string fundAssetType = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fundassettype());
    }

    // string cusip = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cusip());
    }

    // string issueDate = 45;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuedate());
    }

    // string ratings = 46;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ratings());
    }

    // string bondType = 47;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bondtype());
    }

    // string couponType = 49;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coupontype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // string descAppend = 53;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descappend());
    }

    // string nextOptionDate = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nextoptiondate());
    }

    // string nextOptionType = 55;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nextoptiontype());
    }

    // string bondNotes = 57;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bondnotes());
    }

    // int32 priceMagnifier = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pricemagnifier());
    }

    // int32 underConId = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_underconid());
    }

    // double evMultiplier = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // int32 aggGroup = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_agggroup());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // bool fundClosed = 34;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // bool fundClosedForNewInvestors = 35;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // bool fundClosedForNewMoney = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // bool convertible = 50;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // double coupon = 48;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // bool callable = 51;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // bool puttable = 52;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // bool nextOptionPartial = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ContractDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ContractDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ContractDetails)
    MergeFrom(*source);
  }
}

void ContractDetails::MergeFrom(const ContractDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ContractDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secidlist_.MergeFrom(from.secidlist_);
  ineligibilityreasonlist_.MergeFrom(from.ineligibilityreasonlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_marketname(from._internal_marketname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mintick(from._internal_mintick());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ordertypes(from._internal_ordertypes());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_validexchanges(from._internal_validexchanges());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_longname(from._internal_longname());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_contractmonth(from._internal_contractmonth());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_industry(from._internal_industry());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_category(from._internal_category());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_subcategory(from._internal_subcategory());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_timezoneid(from._internal_timezoneid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_tradinghours(from._internal_tradinghours());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_liquidhours(from._internal_liquidhours());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_evrule(from._internal_evrule());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_undersymbol(from._internal_undersymbol());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_undersectype(from._internal_undersectype());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_marketruleids(from._internal_marketruleids());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_realexpirationdate(from._internal_realexpirationdate());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_stocktype(from._internal_stocktype());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_minsize(from._internal_minsize());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_sizeincrement(from._internal_sizeincrement());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_suggestedsizeincrement(from._internal_suggestedsizeincrement());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_fundname(from._internal_fundname());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_fundfamily(from._internal_fundfamily());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_fundtype(from._internal_fundtype());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_fundfrontload(from._internal_fundfrontload());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_fundbackload(from._internal_fundbackload());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_fundbackloadtimeinterval(from._internal_fundbackloadtimeinterval());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_fundmanagementfee(from._internal_fundmanagementfee());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_fundnotifyamount(from._internal_fundnotifyamount());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_fundminimuminitialpurchase(from._internal_fundminimuminitialpurchase());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_fundminimumsubsequentpurchase(from._internal_fundminimumsubsequentpurchase());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_fundblueskystates(from._internal_fundblueskystates());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fundblueskyterritories(from._internal_fundblueskyterritories());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_funddistributionpolicyindicator(from._internal_funddistributionpolicyindicator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_fundassettype(from._internal_fundassettype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_cusip(from._internal_cusip());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_issuedate(from._internal_issuedate());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_ratings(from._internal_ratings());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_bondtype(from._internal_bondtype());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_coupontype(from._internal_coupontype());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_descappend(from._internal_descappend());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_nextoptiondate(from._internal_nextoptiondate());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_nextoptiontype(from._internal_nextoptiontype());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_bondnotes(from._internal_bondnotes());
    }
    if (cached_has_bits & 0x00001000u) {
      pricemagnifier_ = from.pricemagnifier_;
    }
    if (cached_has_bits & 0x00002000u) {
      underconid_ = from.underconid_;
    }
    if (cached_has_bits & 0x00004000u) {
      evmultiplier_ = from.evmultiplier_;
    }
    if (cached_has_bits & 0x00008000u) {
      agggroup_ = from.agggroup_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      fundclosed_ = from.fundclosed_;
    }
    if (cached_has_bits & 0x00020000u) {
      fundclosedfornewinvestors_ = from.fundclosedfornewinvestors_;
    }
    if (cached_has_bits & 0x00040000u) {
      fundclosedfornewmoney_ = from.fundclosedfornewmoney_;
    }
    if (cached_has_bits & 0x00080000u) {
      convertible_ = from.convertible_;
    }
    if (cached_has_bits & 0x00100000u) {
      coupon_ = from.coupon_;
    }
    if (cached_has_bits & 0x00200000u) {
      callable_ = from.callable_;
    }
    if (cached_has_bits & 0x00400000u) {
      puttable_ = from.puttable_;
    }
    if (cached_has_bits & 0x00800000u) {
      nextoptionpartial_ = from.nextoptionpartial_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ContractDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractDetails::CopyFrom(const ContractDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractDetails::IsInitialized() const {
  return true;
}

void ContractDetails::InternalSwap(ContractDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  secidlist_.Swap(&other->secidlist_);
  ineligibilityreasonlist_.InternalSwap(&other->ineligibilityreasonlist_);
  marketname_.Swap(&other->marketname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mintick_.Swap(&other->mintick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordertypes_.Swap(&other->ordertypes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validexchanges_.Swap(&other->validexchanges_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  longname_.Swap(&other->longname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractmonth_.Swap(&other->contractmonth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  industry_.Swap(&other->industry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subcategory_.Swap(&other->subcategory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timezoneid_.Swap(&other->timezoneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tradinghours_.Swap(&other->tradinghours_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  liquidhours_.Swap(&other->liquidhours_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  evrule_.Swap(&other->evrule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  undersymbol_.Swap(&other->undersymbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  undersectype_.Swap(&other->undersectype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketruleids_.Swap(&other->marketruleids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  realexpirationdate_.Swap(&other->realexpirationdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stocktype_.Swap(&other->stocktype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  minsize_.Swap(&other->minsize_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sizeincrement_.Swap(&other->sizeincrement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suggestedsizeincrement_.Swap(&other->suggestedsizeincrement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundname_.Swap(&other->fundname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundfamily_.Swap(&other->fundfamily_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundtype_.Swap(&other->fundtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundfrontload_.Swap(&other->fundfrontload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundbackload_.Swap(&other->fundbackload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundbackloadtimeinterval_.Swap(&other->fundbackloadtimeinterval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundmanagementfee_.Swap(&other->fundmanagementfee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundnotifyamount_.Swap(&other->fundnotifyamount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundminimuminitialpurchase_.Swap(&other->fundminimuminitialpurchase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundminimumsubsequentpurchase_.Swap(&other->fundminimumsubsequentpurchase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundblueskystates_.Swap(&other->fundblueskystates_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundblueskyterritories_.Swap(&other->fundblueskyterritories_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  funddistributionpolicyindicator_.Swap(&other->funddistributionpolicyindicator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fundassettype_.Swap(&other->fundassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cusip_.Swap(&other->cusip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  issuedate_.Swap(&other->issuedate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ratings_.Swap(&other->ratings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bondtype_.Swap(&other->bondtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coupontype_.Swap(&other->coupontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descappend_.Swap(&other->descappend_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nextoptiondate_.Swap(&other->nextoptiondate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nextoptiontype_.Swap(&other->nextoptiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bondnotes_.Swap(&other->bondnotes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractDetails, nextoptionpartial_)
      + sizeof(ContractDetails::nextoptionpartial_)
      - PROTOBUF_FIELD_OFFSET(ContractDetails, pricemagnifier_)>(
          reinterpret_cast<char*>(&pricemagnifier_),
          reinterpret_cast<char*>(&other->pricemagnifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::ContractDetails_SecIdListEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::ContractDetails_SecIdListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::ContractDetails_SecIdListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::ContractDetails* Arena::CreateMaybeMessage< ::protobuf::ContractDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::ContractDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
