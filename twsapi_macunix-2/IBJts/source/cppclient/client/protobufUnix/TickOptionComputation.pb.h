// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickOptionComputation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TickOptionComputation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TickOptionComputation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TickOptionComputation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TickOptionComputation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TickOptionComputation_2eproto;
namespace protobuf {
class TickOptionComputation;
class TickOptionComputationDefaultTypeInternal;
extern TickOptionComputationDefaultTypeInternal _TickOptionComputation_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::TickOptionComputation* Arena::CreateMaybeMessage<::protobuf::TickOptionComputation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class TickOptionComputation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.TickOptionComputation) */ {
 public:
  inline TickOptionComputation() : TickOptionComputation(nullptr) {};
  virtual ~TickOptionComputation();

  TickOptionComputation(const TickOptionComputation& from);
  TickOptionComputation(TickOptionComputation&& from) noexcept
    : TickOptionComputation() {
    *this = ::std::move(from);
  }

  inline TickOptionComputation& operator=(const TickOptionComputation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickOptionComputation& operator=(TickOptionComputation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickOptionComputation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickOptionComputation* internal_default_instance() {
    return reinterpret_cast<const TickOptionComputation*>(
               &_TickOptionComputation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TickOptionComputation& a, TickOptionComputation& b) {
    a.Swap(&b);
  }
  inline void Swap(TickOptionComputation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickOptionComputation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickOptionComputation* New() const final {
    return CreateMaybeMessage<TickOptionComputation>(nullptr);
  }

  TickOptionComputation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickOptionComputation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickOptionComputation& from);
  void MergeFrom(const TickOptionComputation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickOptionComputation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.TickOptionComputation";
  }
  protected:
  explicit TickOptionComputation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TickOptionComputation_2eproto);
    return ::descriptor_table_TickOptionComputation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kImpliedVolFieldNumber = 4,
    kDeltaFieldNumber = 5,
    kOptPriceFieldNumber = 6,
    kPvDividendFieldNumber = 7,
    kGammaFieldNumber = 8,
    kVegaFieldNumber = 9,
    kThetaFieldNumber = 10,
    kUndPriceFieldNumber = 11,
    kTickAttribFieldNumber = 3,
  };
  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tickType = 2;
  bool has_ticktype() const;
  private:
  bool _internal_has_ticktype() const;
  public:
  void clear_ticktype();
  ::PROTOBUF_NAMESPACE_ID::int32 ticktype() const;
  void set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticktype() const;
  void _internal_set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double impliedVol = 4;
  bool has_impliedvol() const;
  private:
  bool _internal_has_impliedvol() const;
  public:
  void clear_impliedvol();
  double impliedvol() const;
  void set_impliedvol(double value);
  private:
  double _internal_impliedvol() const;
  void _internal_set_impliedvol(double value);
  public:

  // double delta = 5;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double optPrice = 6;
  bool has_optprice() const;
  private:
  bool _internal_has_optprice() const;
  public:
  void clear_optprice();
  double optprice() const;
  void set_optprice(double value);
  private:
  double _internal_optprice() const;
  void _internal_set_optprice(double value);
  public:

  // double pvDividend = 7;
  bool has_pvdividend() const;
  private:
  bool _internal_has_pvdividend() const;
  public:
  void clear_pvdividend();
  double pvdividend() const;
  void set_pvdividend(double value);
  private:
  double _internal_pvdividend() const;
  void _internal_set_pvdividend(double value);
  public:

  // double gamma = 8;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // double vega = 9;
  bool has_vega() const;
  private:
  bool _internal_has_vega() const;
  public:
  void clear_vega();
  double vega() const;
  void set_vega(double value);
  private:
  double _internal_vega() const;
  void _internal_set_vega(double value);
  public:

  // double theta = 10;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double undPrice = 11;
  bool has_undprice() const;
  private:
  bool _internal_has_undprice() const;
  public:
  void clear_undprice();
  double undprice() const;
  void set_undprice(double value);
  private:
  double _internal_undprice() const;
  void _internal_set_undprice(double value);
  public:

  // int32 tickAttrib = 3;
  bool has_tickattrib() const;
  private:
  bool _internal_has_tickattrib() const;
  public:
  void clear_tickattrib();
  ::PROTOBUF_NAMESPACE_ID::int32 tickattrib() const;
  void set_tickattrib(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tickattrib() const;
  void _internal_set_tickattrib(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.TickOptionComputation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticktype_;
  double impliedvol_;
  double delta_;
  double optprice_;
  double pvdividend_;
  double gamma_;
  double vega_;
  double theta_;
  double undprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 tickattrib_;
  friend struct ::TableStruct_TickOptionComputation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TickOptionComputation

// int32 reqId = 1;
inline bool TickOptionComputation::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TickOptionComputation::has_reqid() const {
  return _internal_has_reqid();
}
inline void TickOptionComputation::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.reqId)
  return _internal_reqid();
}
inline void TickOptionComputation::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void TickOptionComputation::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.reqId)
}

// int32 tickType = 2;
inline bool TickOptionComputation::_internal_has_ticktype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TickOptionComputation::has_ticktype() const {
  return _internal_has_ticktype();
}
inline void TickOptionComputation::clear_ticktype() {
  ticktype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::_internal_ticktype() const {
  return ticktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::ticktype() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.tickType)
  return _internal_ticktype();
}
inline void TickOptionComputation::_internal_set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ticktype_ = value;
}
inline void TickOptionComputation::set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.tickType)
}

// int32 tickAttrib = 3;
inline bool TickOptionComputation::_internal_has_tickattrib() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TickOptionComputation::has_tickattrib() const {
  return _internal_has_tickattrib();
}
inline void TickOptionComputation::clear_tickattrib() {
  tickattrib_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::_internal_tickattrib() const {
  return tickattrib_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickOptionComputation::tickattrib() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.tickAttrib)
  return _internal_tickattrib();
}
inline void TickOptionComputation::_internal_set_tickattrib(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  tickattrib_ = value;
}
inline void TickOptionComputation::set_tickattrib(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tickattrib(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.tickAttrib)
}

// double impliedVol = 4;
inline bool TickOptionComputation::_internal_has_impliedvol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TickOptionComputation::has_impliedvol() const {
  return _internal_has_impliedvol();
}
inline void TickOptionComputation::clear_impliedvol() {
  impliedvol_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TickOptionComputation::_internal_impliedvol() const {
  return impliedvol_;
}
inline double TickOptionComputation::impliedvol() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.impliedVol)
  return _internal_impliedvol();
}
inline void TickOptionComputation::_internal_set_impliedvol(double value) {
  _has_bits_[0] |= 0x00000004u;
  impliedvol_ = value;
}
inline void TickOptionComputation::set_impliedvol(double value) {
  _internal_set_impliedvol(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.impliedVol)
}

// double delta = 5;
inline bool TickOptionComputation::_internal_has_delta() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TickOptionComputation::has_delta() const {
  return _internal_has_delta();
}
inline void TickOptionComputation::clear_delta() {
  delta_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TickOptionComputation::_internal_delta() const {
  return delta_;
}
inline double TickOptionComputation::delta() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.delta)
  return _internal_delta();
}
inline void TickOptionComputation::_internal_set_delta(double value) {
  _has_bits_[0] |= 0x00000008u;
  delta_ = value;
}
inline void TickOptionComputation::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.delta)
}

// double optPrice = 6;
inline bool TickOptionComputation::_internal_has_optprice() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TickOptionComputation::has_optprice() const {
  return _internal_has_optprice();
}
inline void TickOptionComputation::clear_optprice() {
  optprice_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TickOptionComputation::_internal_optprice() const {
  return optprice_;
}
inline double TickOptionComputation::optprice() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.optPrice)
  return _internal_optprice();
}
inline void TickOptionComputation::_internal_set_optprice(double value) {
  _has_bits_[0] |= 0x00000010u;
  optprice_ = value;
}
inline void TickOptionComputation::set_optprice(double value) {
  _internal_set_optprice(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.optPrice)
}

// double pvDividend = 7;
inline bool TickOptionComputation::_internal_has_pvdividend() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TickOptionComputation::has_pvdividend() const {
  return _internal_has_pvdividend();
}
inline void TickOptionComputation::clear_pvdividend() {
  pvdividend_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double TickOptionComputation::_internal_pvdividend() const {
  return pvdividend_;
}
inline double TickOptionComputation::pvdividend() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.pvDividend)
  return _internal_pvdividend();
}
inline void TickOptionComputation::_internal_set_pvdividend(double value) {
  _has_bits_[0] |= 0x00000020u;
  pvdividend_ = value;
}
inline void TickOptionComputation::set_pvdividend(double value) {
  _internal_set_pvdividend(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.pvDividend)
}

// double gamma = 8;
inline bool TickOptionComputation::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TickOptionComputation::has_gamma() const {
  return _internal_has_gamma();
}
inline void TickOptionComputation::clear_gamma() {
  gamma_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double TickOptionComputation::_internal_gamma() const {
  return gamma_;
}
inline double TickOptionComputation::gamma() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.gamma)
  return _internal_gamma();
}
inline void TickOptionComputation::_internal_set_gamma(double value) {
  _has_bits_[0] |= 0x00000040u;
  gamma_ = value;
}
inline void TickOptionComputation::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.gamma)
}

// double vega = 9;
inline bool TickOptionComputation::_internal_has_vega() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TickOptionComputation::has_vega() const {
  return _internal_has_vega();
}
inline void TickOptionComputation::clear_vega() {
  vega_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double TickOptionComputation::_internal_vega() const {
  return vega_;
}
inline double TickOptionComputation::vega() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.vega)
  return _internal_vega();
}
inline void TickOptionComputation::_internal_set_vega(double value) {
  _has_bits_[0] |= 0x00000080u;
  vega_ = value;
}
inline void TickOptionComputation::set_vega(double value) {
  _internal_set_vega(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.vega)
}

// double theta = 10;
inline bool TickOptionComputation::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TickOptionComputation::has_theta() const {
  return _internal_has_theta();
}
inline void TickOptionComputation::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double TickOptionComputation::_internal_theta() const {
  return theta_;
}
inline double TickOptionComputation::theta() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.theta)
  return _internal_theta();
}
inline void TickOptionComputation::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000100u;
  theta_ = value;
}
inline void TickOptionComputation::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.theta)
}

// double undPrice = 11;
inline bool TickOptionComputation::_internal_has_undprice() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TickOptionComputation::has_undprice() const {
  return _internal_has_undprice();
}
inline void TickOptionComputation::clear_undprice() {
  undprice_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double TickOptionComputation::_internal_undprice() const {
  return undprice_;
}
inline double TickOptionComputation::undprice() const {
  // @@protoc_insertion_point(field_get:protobuf.TickOptionComputation.undPrice)
  return _internal_undprice();
}
inline void TickOptionComputation::_internal_set_undprice(double value) {
  _has_bits_[0] |= 0x00000200u;
  undprice_ = value;
}
inline void TickOptionComputation::set_undprice(double value) {
  _internal_set_undprice(value);
  // @@protoc_insertion_point(field_set:protobuf.TickOptionComputation.undPrice)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TickOptionComputation_2eproto
