// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTickBidAsk.proto

#include "HistoricalTickBidAsk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TickAttribBidAsk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickAttribBidAsk_TickAttribBidAsk_2eproto;
namespace protobuf {
class HistoricalTickBidAskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricalTickBidAsk> _instance;
} _HistoricalTickBidAsk_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HistoricalTickBidAsk_default_instance_;
    new (ptr) ::protobuf::HistoricalTickBidAsk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::HistoricalTickBidAsk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto}, {
      &scc_info_TickAttribBidAsk_TickAttribBidAsk_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HistoricalTickBidAsk_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_HistoricalTickBidAsk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HistoricalTickBidAsk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HistoricalTickBidAsk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, tickattribbidask_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, pricebid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, priceask_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, sizebid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickBidAsk, sizeask_),
  3,
  2,
  4,
  5,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protobuf::HistoricalTickBidAsk)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_HistoricalTickBidAsk_default_instance_),
};

const char descriptor_table_protodef_HistoricalTickBidAsk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032HistoricalTickBidAsk.proto\022\010protobuf\032\026"
  "TickAttribBidAsk.proto\"\216\002\n\024HistoricalTic"
  "kBidAsk\022\021\n\004time\030\001 \001(\003H\000\210\001\001\0229\n\020tickAttrib"
  "BidAsk\030\002 \001(\0132\032.protobuf.TickAttribBidAsk"
  "H\001\210\001\001\022\025\n\010priceBid\030\003 \001(\001H\002\210\001\001\022\025\n\010priceAsk"
  "\030\004 \001(\001H\003\210\001\001\022\024\n\007sizeBid\030\005 \001(\tH\004\210\001\001\022\024\n\007siz"
  "eAsk\030\006 \001(\tH\005\210\001\001B\007\n\005_timeB\023\n\021_tickAttribB"
  "idAskB\013\n\t_priceBidB\013\n\t_priceAskB\n\n\010_size"
  "BidB\n\n\010_sizeAskBD\n\026com.ib.client.protobu"
  "fB\031HistoricalTickBidAskProto\252\002\016IBApi.pro"
  "tobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HistoricalTickBidAsk_2eproto_deps[1] = {
  &::descriptor_table_TickAttribBidAsk_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HistoricalTickBidAsk_2eproto_sccs[1] = {
  &scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HistoricalTickBidAsk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTickBidAsk_2eproto = {
  false, false, descriptor_table_protodef_HistoricalTickBidAsk_2eproto, "HistoricalTickBidAsk.proto", 413,
  &descriptor_table_HistoricalTickBidAsk_2eproto_once, descriptor_table_HistoricalTickBidAsk_2eproto_sccs, descriptor_table_HistoricalTickBidAsk_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_HistoricalTickBidAsk_2eproto::offsets,
  file_level_metadata_HistoricalTickBidAsk_2eproto, 1, file_level_enum_descriptors_HistoricalTickBidAsk_2eproto, file_level_service_descriptors_HistoricalTickBidAsk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HistoricalTickBidAsk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HistoricalTickBidAsk_2eproto)), true);
namespace protobuf {

// ===================================================================

void HistoricalTickBidAsk::InitAsDefaultInstance() {
  ::protobuf::_HistoricalTickBidAsk_default_instance_._instance.get_mutable()->tickattribbidask_ = const_cast< ::protobuf::TickAttribBidAsk*>(
      ::protobuf::TickAttribBidAsk::internal_default_instance());
}
class HistoricalTickBidAsk::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricalTickBidAsk>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf::TickAttribBidAsk& tickattribbidask(const HistoricalTickBidAsk* msg);
  static void set_has_tickattribbidask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pricebid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_priceask(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sizebid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sizeask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::TickAttribBidAsk&
HistoricalTickBidAsk::_Internal::tickattribbidask(const HistoricalTickBidAsk* msg) {
  return *msg->tickattribbidask_;
}
void HistoricalTickBidAsk::clear_tickattribbidask() {
  if (GetArena() == nullptr && tickattribbidask_ != nullptr) {
    delete tickattribbidask_;
  }
  tickattribbidask_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
HistoricalTickBidAsk::HistoricalTickBidAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.HistoricalTickBidAsk)
}
HistoricalTickBidAsk::HistoricalTickBidAsk(const HistoricalTickBidAsk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sizebid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sizebid()) {
    sizebid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sizebid(),
      GetArena());
  }
  sizeask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sizeask()) {
    sizeask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sizeask(),
      GetArena());
  }
  if (from._internal_has_tickattribbidask()) {
    tickattribbidask_ = new ::protobuf::TickAttribBidAsk(*from.tickattribbidask_);
  } else {
    tickattribbidask_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&priceask_) -
    reinterpret_cast<char*>(&time_)) + sizeof(priceask_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HistoricalTickBidAsk)
}

void HistoricalTickBidAsk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto.base);
  sizebid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sizeask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tickattribbidask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priceask_) -
      reinterpret_cast<char*>(&tickattribbidask_)) + sizeof(priceask_));
}

HistoricalTickBidAsk::~HistoricalTickBidAsk() {
  // @@protoc_insertion_point(destructor:protobuf.HistoricalTickBidAsk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricalTickBidAsk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sizebid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sizeask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tickattribbidask_;
}

void HistoricalTickBidAsk::ArenaDtor(void* object) {
  HistoricalTickBidAsk* _this = reinterpret_cast< HistoricalTickBidAsk* >(object);
  (void)_this;
}
void HistoricalTickBidAsk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricalTickBidAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricalTickBidAsk& HistoricalTickBidAsk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto.base);
  return *internal_default_instance();
}


void HistoricalTickBidAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HistoricalTickBidAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sizebid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sizeask_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && tickattribbidask_ != nullptr) {
        delete tickattribbidask_;
      }
      tickattribbidask_ = nullptr;
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priceask_) -
        reinterpret_cast<char*>(&time_)) + sizeof(priceask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricalTickBidAsk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.TickAttribBidAsk tickAttribBidAsk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tickattribbidask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double priceBid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pricebid(&has_bits);
          pricebid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double priceAsk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_priceask(&has_bits);
          priceask_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string sizeBid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sizebid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTickBidAsk.sizeBid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sizeAsk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sizeask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTickBidAsk.sizeAsk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricalTickBidAsk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HistoricalTickBidAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .protobuf.TickAttribBidAsk tickAttribBidAsk = 2;
  if (_internal_has_tickattribbidask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tickattribbidask(this), target, stream);
  }

  // double priceBid = 3;
  if (_internal_has_pricebid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pricebid(), target);
  }

  // double priceAsk = 4;
  if (_internal_has_priceask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_priceask(), target);
  }

  // string sizeBid = 5;
  if (_internal_has_sizebid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sizebid().data(), static_cast<int>(this->_internal_sizebid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTickBidAsk.sizeBid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sizebid(), target);
  }

  // string sizeAsk = 6;
  if (_internal_has_sizeask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sizeask().data(), static_cast<int>(this->_internal_sizeask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTickBidAsk.sizeAsk");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sizeask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HistoricalTickBidAsk)
  return target;
}

size_t HistoricalTickBidAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HistoricalTickBidAsk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string sizeBid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sizebid());
    }

    // string sizeAsk = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sizeask());
    }

    // .protobuf.TickAttribBidAsk tickAttribBidAsk = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tickattribbidask_);
    }

    // int64 time = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

    // double priceBid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double priceAsk = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalTickBidAsk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.HistoricalTickBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalTickBidAsk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricalTickBidAsk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.HistoricalTickBidAsk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.HistoricalTickBidAsk)
    MergeFrom(*source);
  }
}

void HistoricalTickBidAsk::MergeFrom(const HistoricalTickBidAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HistoricalTickBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sizebid(from._internal_sizebid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sizeask(from._internal_sizeask());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tickattribbidask()->::protobuf::TickAttribBidAsk::MergeFrom(from._internal_tickattribbidask());
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      pricebid_ = from.pricebid_;
    }
    if (cached_has_bits & 0x00000020u) {
      priceask_ = from.priceask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalTickBidAsk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.HistoricalTickBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalTickBidAsk::CopyFrom(const HistoricalTickBidAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HistoricalTickBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalTickBidAsk::IsInitialized() const {
  return true;
}

void HistoricalTickBidAsk::InternalSwap(HistoricalTickBidAsk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sizebid_.Swap(&other->sizebid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sizeask_.Swap(&other->sizeask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricalTickBidAsk, priceask_)
      + sizeof(HistoricalTickBidAsk::priceask_)
      - PROTOBUF_FIELD_OFFSET(HistoricalTickBidAsk, tickattribbidask_)>(
          reinterpret_cast<char*>(&tickattribbidask_),
          reinterpret_cast<char*>(&other->tickattribbidask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricalTickBidAsk::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::HistoricalTickBidAsk* Arena::CreateMaybeMessage< ::protobuf::HistoricalTickBidAsk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HistoricalTickBidAsk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
