// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketDepthData.proto

#include "MarketDepthData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class MarketDepthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthData> _instance;
} _MarketDepthData_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_MarketDepthData_MarketDepthData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_MarketDepthData_default_instance_;
    new (ptr) ::protobuf::MarketDepthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::MarketDepthData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthData_MarketDepthData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthData_MarketDepthData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MarketDepthData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MarketDepthData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MarketDepthData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MarketDepthData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, position_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, operation_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, side_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, price_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, marketmaker_),
  PROTOBUF_FIELD_OFFSET(::protobuf::MarketDepthData, issmartdepth_),
  2,
  3,
  5,
  4,
  0,
  1,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::protobuf::MarketDepthData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_MarketDepthData_default_instance_),
};

const char descriptor_table_protodef_MarketDepthData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025MarketDepthData.proto\022\010protobuf\"\207\002\n\017Ma"
  "rketDepthData\022\025\n\010position\030\001 \001(\005H\000\210\001\001\022\026\n\t"
  "operation\030\002 \001(\005H\001\210\001\001\022\021\n\004side\030\003 \001(\005H\002\210\001\001\022"
  "\022\n\005price\030\004 \001(\001H\003\210\001\001\022\021\n\004size\030\005 \001(\tH\004\210\001\001\022\030"
  "\n\013marketMaker\030\006 \001(\tH\005\210\001\001\022\031\n\014isSmartDepth"
  "\030\007 \001(\010H\006\210\001\001B\013\n\t_positionB\014\n\n_operationB\007"
  "\n\005_sideB\010\n\006_priceB\007\n\005_sizeB\016\n\014_marketMak"
  "erB\017\n\r_isSmartDepthB\?\n\026com.ib.client.pro"
  "tobufB\024MarketDepthDataProto\252\002\016IBApi.prot"
  "obufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MarketDepthData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MarketDepthData_2eproto_sccs[1] = {
  &scc_info_MarketDepthData_MarketDepthData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MarketDepthData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketDepthData_2eproto = {
  false, false, descriptor_table_protodef_MarketDepthData_2eproto, "MarketDepthData.proto", 372,
  &descriptor_table_MarketDepthData_2eproto_once, descriptor_table_MarketDepthData_2eproto_sccs, descriptor_table_MarketDepthData_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_MarketDepthData_2eproto::offsets,
  file_level_metadata_MarketDepthData_2eproto, 1, file_level_enum_descriptors_MarketDepthData_2eproto, file_level_service_descriptors_MarketDepthData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MarketDepthData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MarketDepthData_2eproto)), true);
namespace protobuf {

// ===================================================================

void MarketDepthData::InitAsDefaultInstance() {
}
class MarketDepthData::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketDepthData>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marketmaker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issmartdepth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MarketDepthData::MarketDepthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.MarketDepthData)
}
MarketDepthData::MarketDepthData(const MarketDepthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_size()) {
    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_size(),
      GetArena());
  }
  marketmaker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_marketmaker()) {
    marketmaker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_marketmaker(),
      GetArena());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&issmartdepth_) -
    reinterpret_cast<char*>(&position_)) + sizeof(issmartdepth_));
  // @@protoc_insertion_point(copy_constructor:protobuf.MarketDepthData)
}

void MarketDepthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthData_MarketDepthData_2eproto.base);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketmaker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issmartdepth_) -
      reinterpret_cast<char*>(&position_)) + sizeof(issmartdepth_));
}

MarketDepthData::~MarketDepthData() {
  // @@protoc_insertion_point(destructor:protobuf.MarketDepthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketmaker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthData::ArenaDtor(void* object) {
  MarketDepthData* _this = reinterpret_cast< MarketDepthData* >(object);
  (void)_this;
}
void MarketDepthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthData& MarketDepthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthData_MarketDepthData_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MarketDepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      marketmaker_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issmartdepth_) -
        reinterpret_cast<char*>(&position_)) + sizeof(issmartdepth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_operation(&has_bits);
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_side(&has_bits);
          side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.MarketDepthData.size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketMaker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_marketmaker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.MarketDepthData.marketMaker"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSmartDepth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_issmartdepth(&has_bits);
          issmartdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MarketDepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // int32 operation = 2;
  if (_internal_has_operation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_operation(), target);
  }

  // int32 side = 3;
  if (_internal_has_side()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_side(), target);
  }

  // double price = 4;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_price(), target);
  }

  // string size = 5;
  if (_internal_has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.MarketDepthData.size");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_size(), target);
  }

  // string marketMaker = 6;
  if (_internal_has_marketmaker()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketmaker().data(), static_cast<int>(this->_internal_marketmaker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.MarketDepthData.marketMaker");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_marketmaker(), target);
  }

  // bool isSmartDepth = 7;
  if (_internal_has_issmartdepth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_issmartdepth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MarketDepthData)
  return target;
}

size_t MarketDepthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MarketDepthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // string size = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_size());
    }

    // string marketMaker = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_marketmaker());
    }

    // int32 position = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_position());
    }

    // int32 operation = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_operation());
    }

    // double price = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // int32 side = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_side());
    }

    // bool isSmartDepth = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MarketDepthData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MarketDepthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MarketDepthData)
    MergeFrom(*source);
  }
}

void MarketDepthData::MergeFrom(const MarketDepthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MarketDepthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_size(from._internal_size());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_marketmaker(from._internal_marketmaker());
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000040u) {
      issmartdepth_ = from.issmartdepth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MarketDepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthData::CopyFrom(const MarketDepthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MarketDepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthData::IsInitialized() const {
  return true;
}

void MarketDepthData::InternalSwap(MarketDepthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketmaker_.Swap(&other->marketmaker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthData, issmartdepth_)
      + sizeof(MarketDepthData::issmartdepth_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::MarketDepthData* Arena::CreateMaybeMessage< ::protobuf::MarketDepthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::MarketDepthData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
