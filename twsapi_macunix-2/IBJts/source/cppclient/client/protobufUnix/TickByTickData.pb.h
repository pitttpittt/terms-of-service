// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickByTickData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TickByTickData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TickByTickData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "HistoricalTickLast.pb.h"
#include "HistoricalTickBidAsk.pb.h"
#include "HistoricalTick.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TickByTickData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TickByTickData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TickByTickData_2eproto;
namespace protobuf {
class TickByTickData;
class TickByTickDataDefaultTypeInternal;
extern TickByTickDataDefaultTypeInternal _TickByTickData_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::TickByTickData* Arena::CreateMaybeMessage<::protobuf::TickByTickData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class TickByTickData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.TickByTickData) */ {
 public:
  inline TickByTickData() : TickByTickData(nullptr) {};
  virtual ~TickByTickData();

  TickByTickData(const TickByTickData& from);
  TickByTickData(TickByTickData&& from) noexcept
    : TickByTickData() {
    *this = ::std::move(from);
  }

  inline TickByTickData& operator=(const TickByTickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickByTickData& operator=(TickByTickData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickByTickData& default_instance();

  enum TickCase {
    kHistoricalTickLast = 3,
    kHistoricalTickBidAsk = 4,
    kHistoricalTickMidPoint = 5,
    TICK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickByTickData* internal_default_instance() {
    return reinterpret_cast<const TickByTickData*>(
               &_TickByTickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TickByTickData& a, TickByTickData& b) {
    a.Swap(&b);
  }
  inline void Swap(TickByTickData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickByTickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickByTickData* New() const final {
    return CreateMaybeMessage<TickByTickData>(nullptr);
  }

  TickByTickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickByTickData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickByTickData& from);
  void MergeFrom(const TickByTickData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickByTickData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.TickByTickData";
  }
  protected:
  explicit TickByTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TickByTickData_2eproto);
    return ::descriptor_table_TickByTickData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kHistoricalTickLastFieldNumber = 3,
    kHistoricalTickBidAskFieldNumber = 4,
    kHistoricalTickMidPointFieldNumber = 5,
  };
  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tickType = 2;
  bool has_ticktype() const;
  private:
  bool _internal_has_ticktype() const;
  public:
  void clear_ticktype();
  ::PROTOBUF_NAMESPACE_ID::int32 ticktype() const;
  void set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticktype() const;
  void _internal_set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .protobuf.HistoricalTickLast historicalTickLast = 3;
  bool has_historicalticklast() const;
  private:
  bool _internal_has_historicalticklast() const;
  public:
  void clear_historicalticklast();
  const ::protobuf::HistoricalTickLast& historicalticklast() const;
  ::protobuf::HistoricalTickLast* release_historicalticklast();
  ::protobuf::HistoricalTickLast* mutable_historicalticklast();
  void set_allocated_historicalticklast(::protobuf::HistoricalTickLast* historicalticklast);
  private:
  const ::protobuf::HistoricalTickLast& _internal_historicalticklast() const;
  ::protobuf::HistoricalTickLast* _internal_mutable_historicalticklast();
  public:
  void unsafe_arena_set_allocated_historicalticklast(
      ::protobuf::HistoricalTickLast* historicalticklast);
  ::protobuf::HistoricalTickLast* unsafe_arena_release_historicalticklast();

  // .protobuf.HistoricalTickBidAsk historicalTickBidAsk = 4;
  bool has_historicaltickbidask() const;
  private:
  bool _internal_has_historicaltickbidask() const;
  public:
  void clear_historicaltickbidask();
  const ::protobuf::HistoricalTickBidAsk& historicaltickbidask() const;
  ::protobuf::HistoricalTickBidAsk* release_historicaltickbidask();
  ::protobuf::HistoricalTickBidAsk* mutable_historicaltickbidask();
  void set_allocated_historicaltickbidask(::protobuf::HistoricalTickBidAsk* historicaltickbidask);
  private:
  const ::protobuf::HistoricalTickBidAsk& _internal_historicaltickbidask() const;
  ::protobuf::HistoricalTickBidAsk* _internal_mutable_historicaltickbidask();
  public:
  void unsafe_arena_set_allocated_historicaltickbidask(
      ::protobuf::HistoricalTickBidAsk* historicaltickbidask);
  ::protobuf::HistoricalTickBidAsk* unsafe_arena_release_historicaltickbidask();

  // .protobuf.HistoricalTick historicalTickMidPoint = 5;
  bool has_historicaltickmidpoint() const;
  private:
  bool _internal_has_historicaltickmidpoint() const;
  public:
  void clear_historicaltickmidpoint();
  const ::protobuf::HistoricalTick& historicaltickmidpoint() const;
  ::protobuf::HistoricalTick* release_historicaltickmidpoint();
  ::protobuf::HistoricalTick* mutable_historicaltickmidpoint();
  void set_allocated_historicaltickmidpoint(::protobuf::HistoricalTick* historicaltickmidpoint);
  private:
  const ::protobuf::HistoricalTick& _internal_historicaltickmidpoint() const;
  ::protobuf::HistoricalTick* _internal_mutable_historicaltickmidpoint();
  public:
  void unsafe_arena_set_allocated_historicaltickmidpoint(
      ::protobuf::HistoricalTick* historicaltickmidpoint);
  ::protobuf::HistoricalTick* unsafe_arena_release_historicaltickmidpoint();

  void clear_tick();
  TickCase tick_case() const;
  // @@protoc_insertion_point(class_scope:protobuf.TickByTickData)
 private:
  class _Internal;
  void set_has_historicalticklast();
  void set_has_historicaltickbidask();
  void set_has_historicaltickmidpoint();

  inline bool has_tick() const;
  inline void clear_has_tick();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ticktype_;
  union TickUnion {
    TickUnion() {}
    ::protobuf::HistoricalTickLast* historicalticklast_;
    ::protobuf::HistoricalTickBidAsk* historicaltickbidask_;
    ::protobuf::HistoricalTick* historicaltickmidpoint_;
  } tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_TickByTickData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TickByTickData

// int32 reqId = 1;
inline bool TickByTickData::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TickByTickData::has_reqid() const {
  return _internal_has_reqid();
}
inline void TickByTickData::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickByTickData::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickByTickData::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.TickByTickData.reqId)
  return _internal_reqid();
}
inline void TickByTickData::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void TickByTickData::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.TickByTickData.reqId)
}

// int32 tickType = 2;
inline bool TickByTickData::_internal_has_ticktype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TickByTickData::has_ticktype() const {
  return _internal_has_ticktype();
}
inline void TickByTickData::clear_ticktype() {
  ticktype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickByTickData::_internal_ticktype() const {
  return ticktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickByTickData::ticktype() const {
  // @@protoc_insertion_point(field_get:protobuf.TickByTickData.tickType)
  return _internal_ticktype();
}
inline void TickByTickData::_internal_set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ticktype_ = value;
}
inline void TickByTickData::set_ticktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ticktype(value);
  // @@protoc_insertion_point(field_set:protobuf.TickByTickData.tickType)
}

// .protobuf.HistoricalTickLast historicalTickLast = 3;
inline bool TickByTickData::_internal_has_historicalticklast() const {
  return tick_case() == kHistoricalTickLast;
}
inline bool TickByTickData::has_historicalticklast() const {
  return _internal_has_historicalticklast();
}
inline void TickByTickData::set_has_historicalticklast() {
  _oneof_case_[0] = kHistoricalTickLast;
}
inline ::protobuf::HistoricalTickLast* TickByTickData::release_historicalticklast() {
  // @@protoc_insertion_point(field_release:protobuf.TickByTickData.historicalTickLast)
  if (_internal_has_historicalticklast()) {
    clear_has_tick();
      ::protobuf::HistoricalTickLast* temp = tick_.historicalticklast_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    tick_.historicalticklast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::HistoricalTickLast& TickByTickData::_internal_historicalticklast() const {
  return _internal_has_historicalticklast()
      ? *tick_.historicalticklast_
      : *reinterpret_cast< ::protobuf::HistoricalTickLast*>(&::protobuf::_HistoricalTickLast_default_instance_);
}
inline const ::protobuf::HistoricalTickLast& TickByTickData::historicalticklast() const {
  // @@protoc_insertion_point(field_get:protobuf.TickByTickData.historicalTickLast)
  return _internal_historicalticklast();
}
inline ::protobuf::HistoricalTickLast* TickByTickData::unsafe_arena_release_historicalticklast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.TickByTickData.historicalTickLast)
  if (_internal_has_historicalticklast()) {
    clear_has_tick();
    ::protobuf::HistoricalTickLast* temp = tick_.historicalticklast_;
    tick_.historicalticklast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TickByTickData::unsafe_arena_set_allocated_historicalticklast(::protobuf::HistoricalTickLast* historicalticklast) {
  clear_tick();
  if (historicalticklast) {
    set_has_historicalticklast();
    tick_.historicalticklast_ = historicalticklast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TickByTickData.historicalTickLast)
}
inline ::protobuf::HistoricalTickLast* TickByTickData::_internal_mutable_historicalticklast() {
  if (!_internal_has_historicalticklast()) {
    clear_tick();
    set_has_historicalticklast();
    tick_.historicalticklast_ = CreateMaybeMessage< ::protobuf::HistoricalTickLast >(GetArena());
  }
  return tick_.historicalticklast_;
}
inline ::protobuf::HistoricalTickLast* TickByTickData::mutable_historicalticklast() {
  // @@protoc_insertion_point(field_mutable:protobuf.TickByTickData.historicalTickLast)
  return _internal_mutable_historicalticklast();
}

// .protobuf.HistoricalTickBidAsk historicalTickBidAsk = 4;
inline bool TickByTickData::_internal_has_historicaltickbidask() const {
  return tick_case() == kHistoricalTickBidAsk;
}
inline bool TickByTickData::has_historicaltickbidask() const {
  return _internal_has_historicaltickbidask();
}
inline void TickByTickData::set_has_historicaltickbidask() {
  _oneof_case_[0] = kHistoricalTickBidAsk;
}
inline ::protobuf::HistoricalTickBidAsk* TickByTickData::release_historicaltickbidask() {
  // @@protoc_insertion_point(field_release:protobuf.TickByTickData.historicalTickBidAsk)
  if (_internal_has_historicaltickbidask()) {
    clear_has_tick();
      ::protobuf::HistoricalTickBidAsk* temp = tick_.historicaltickbidask_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    tick_.historicaltickbidask_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::HistoricalTickBidAsk& TickByTickData::_internal_historicaltickbidask() const {
  return _internal_has_historicaltickbidask()
      ? *tick_.historicaltickbidask_
      : *reinterpret_cast< ::protobuf::HistoricalTickBidAsk*>(&::protobuf::_HistoricalTickBidAsk_default_instance_);
}
inline const ::protobuf::HistoricalTickBidAsk& TickByTickData::historicaltickbidask() const {
  // @@protoc_insertion_point(field_get:protobuf.TickByTickData.historicalTickBidAsk)
  return _internal_historicaltickbidask();
}
inline ::protobuf::HistoricalTickBidAsk* TickByTickData::unsafe_arena_release_historicaltickbidask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.TickByTickData.historicalTickBidAsk)
  if (_internal_has_historicaltickbidask()) {
    clear_has_tick();
    ::protobuf::HistoricalTickBidAsk* temp = tick_.historicaltickbidask_;
    tick_.historicaltickbidask_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TickByTickData::unsafe_arena_set_allocated_historicaltickbidask(::protobuf::HistoricalTickBidAsk* historicaltickbidask) {
  clear_tick();
  if (historicaltickbidask) {
    set_has_historicaltickbidask();
    tick_.historicaltickbidask_ = historicaltickbidask;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TickByTickData.historicalTickBidAsk)
}
inline ::protobuf::HistoricalTickBidAsk* TickByTickData::_internal_mutable_historicaltickbidask() {
  if (!_internal_has_historicaltickbidask()) {
    clear_tick();
    set_has_historicaltickbidask();
    tick_.historicaltickbidask_ = CreateMaybeMessage< ::protobuf::HistoricalTickBidAsk >(GetArena());
  }
  return tick_.historicaltickbidask_;
}
inline ::protobuf::HistoricalTickBidAsk* TickByTickData::mutable_historicaltickbidask() {
  // @@protoc_insertion_point(field_mutable:protobuf.TickByTickData.historicalTickBidAsk)
  return _internal_mutable_historicaltickbidask();
}

// .protobuf.HistoricalTick historicalTickMidPoint = 5;
inline bool TickByTickData::_internal_has_historicaltickmidpoint() const {
  return tick_case() == kHistoricalTickMidPoint;
}
inline bool TickByTickData::has_historicaltickmidpoint() const {
  return _internal_has_historicaltickmidpoint();
}
inline void TickByTickData::set_has_historicaltickmidpoint() {
  _oneof_case_[0] = kHistoricalTickMidPoint;
}
inline ::protobuf::HistoricalTick* TickByTickData::release_historicaltickmidpoint() {
  // @@protoc_insertion_point(field_release:protobuf.TickByTickData.historicalTickMidPoint)
  if (_internal_has_historicaltickmidpoint()) {
    clear_has_tick();
      ::protobuf::HistoricalTick* temp = tick_.historicaltickmidpoint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    tick_.historicaltickmidpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::HistoricalTick& TickByTickData::_internal_historicaltickmidpoint() const {
  return _internal_has_historicaltickmidpoint()
      ? *tick_.historicaltickmidpoint_
      : *reinterpret_cast< ::protobuf::HistoricalTick*>(&::protobuf::_HistoricalTick_default_instance_);
}
inline const ::protobuf::HistoricalTick& TickByTickData::historicaltickmidpoint() const {
  // @@protoc_insertion_point(field_get:protobuf.TickByTickData.historicalTickMidPoint)
  return _internal_historicaltickmidpoint();
}
inline ::protobuf::HistoricalTick* TickByTickData::unsafe_arena_release_historicaltickmidpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.TickByTickData.historicalTickMidPoint)
  if (_internal_has_historicaltickmidpoint()) {
    clear_has_tick();
    ::protobuf::HistoricalTick* temp = tick_.historicaltickmidpoint_;
    tick_.historicaltickmidpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TickByTickData::unsafe_arena_set_allocated_historicaltickmidpoint(::protobuf::HistoricalTick* historicaltickmidpoint) {
  clear_tick();
  if (historicaltickmidpoint) {
    set_has_historicaltickmidpoint();
    tick_.historicaltickmidpoint_ = historicaltickmidpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TickByTickData.historicalTickMidPoint)
}
inline ::protobuf::HistoricalTick* TickByTickData::_internal_mutable_historicaltickmidpoint() {
  if (!_internal_has_historicaltickmidpoint()) {
    clear_tick();
    set_has_historicaltickmidpoint();
    tick_.historicaltickmidpoint_ = CreateMaybeMessage< ::protobuf::HistoricalTick >(GetArena());
  }
  return tick_.historicaltickmidpoint_;
}
inline ::protobuf::HistoricalTick* TickByTickData::mutable_historicaltickmidpoint() {
  // @@protoc_insertion_point(field_mutable:protobuf.TickByTickData.historicalTickMidPoint)
  return _internal_mutable_historicaltickmidpoint();
}

inline bool TickByTickData::has_tick() const {
  return tick_case() != TICK_NOT_SET;
}
inline void TickByTickData::clear_has_tick() {
  _oneof_case_[0] = TICK_NOT_SET;
}
inline TickByTickData::TickCase TickByTickData::tick_case() const {
  return TickByTickData::TickCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TickByTickData_2eproto
