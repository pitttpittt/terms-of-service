// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RealTimeBarTick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RealTimeBarTick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RealTimeBarTick_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RealTimeBarTick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RealTimeBarTick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RealTimeBarTick_2eproto;
namespace protobuf {
class RealTimeBarTick;
class RealTimeBarTickDefaultTypeInternal;
extern RealTimeBarTickDefaultTypeInternal _RealTimeBarTick_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::RealTimeBarTick* Arena::CreateMaybeMessage<::protobuf::RealTimeBarTick>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class RealTimeBarTick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.RealTimeBarTick) */ {
 public:
  inline RealTimeBarTick() : RealTimeBarTick(nullptr) {};
  virtual ~RealTimeBarTick();

  RealTimeBarTick(const RealTimeBarTick& from);
  RealTimeBarTick(RealTimeBarTick&& from) noexcept
    : RealTimeBarTick() {
    *this = ::std::move(from);
  }

  inline RealTimeBarTick& operator=(const RealTimeBarTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealTimeBarTick& operator=(RealTimeBarTick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealTimeBarTick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealTimeBarTick* internal_default_instance() {
    return reinterpret_cast<const RealTimeBarTick*>(
               &_RealTimeBarTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RealTimeBarTick& a, RealTimeBarTick& b) {
    a.Swap(&b);
  }
  inline void Swap(RealTimeBarTick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealTimeBarTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealTimeBarTick* New() const final {
    return CreateMaybeMessage<RealTimeBarTick>(nullptr);
  }

  RealTimeBarTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealTimeBarTick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealTimeBarTick& from);
  void MergeFrom(const RealTimeBarTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealTimeBarTick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.RealTimeBarTick";
  }
  protected:
  explicit RealTimeBarTick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RealTimeBarTick_2eproto);
    return ::descriptor_table_RealTimeBarTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 7,
    kWAPFieldNumber = 8,
    kTimeFieldNumber = 2,
    kOpenFieldNumber = 3,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kReqIdFieldNumber = 1,
    kCountFieldNumber = 9,
    kCloseFieldNumber = 6,
  };
  // string volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const std::string& volume() const;
  void set_volume(const std::string& value);
  void set_volume(std::string&& value);
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  std::string* mutable_volume();
  std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_volume();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_volume(
      std::string* volume);
  private:
  const std::string& _internal_volume() const;
  void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // string WAP = 8;
  bool has_wap() const;
  private:
  bool _internal_has_wap() const;
  public:
  void clear_wap();
  const std::string& wap() const;
  void set_wap(const std::string& value);
  void set_wap(std::string&& value);
  void set_wap(const char* value);
  void set_wap(const char* value, size_t size);
  std::string* mutable_wap();
  std::string* release_wap();
  void set_allocated_wap(std::string* wap);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wap();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wap(
      std::string* wap);
  private:
  const std::string& _internal_wap() const;
  void _internal_set_wap(const std::string& value);
  std::string* _internal_mutable_wap();
  public:

  // int64 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double open = 3;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double high = 4;
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 5;
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 9;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double close = 6;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.RealTimeBarTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wap_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double open_;
  double high_;
  double low_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  double close_;
  friend struct ::TableStruct_RealTimeBarTick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RealTimeBarTick

// int32 reqId = 1;
inline bool RealTimeBarTick::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_reqid() const {
  return _internal_has_reqid();
}
inline void RealTimeBarTick::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealTimeBarTick::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealTimeBarTick::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.reqId)
  return _internal_reqid();
}
inline void RealTimeBarTick::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  reqid_ = value;
}
inline void RealTimeBarTick::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.reqId)
}

// int64 time = 2;
inline bool RealTimeBarTick::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_time() const {
  return _internal_has_time();
}
inline void RealTimeBarTick::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealTimeBarTick::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RealTimeBarTick::time() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.time)
  return _internal_time();
}
inline void RealTimeBarTick::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void RealTimeBarTick::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.time)
}

// double open = 3;
inline bool RealTimeBarTick::_internal_has_open() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_open() const {
  return _internal_has_open();
}
inline void RealTimeBarTick::clear_open() {
  open_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RealTimeBarTick::_internal_open() const {
  return open_;
}
inline double RealTimeBarTick::open() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.open)
  return _internal_open();
}
inline void RealTimeBarTick::_internal_set_open(double value) {
  _has_bits_[0] |= 0x00000008u;
  open_ = value;
}
inline void RealTimeBarTick::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.open)
}

// double high = 4;
inline bool RealTimeBarTick::_internal_has_high() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_high() const {
  return _internal_has_high();
}
inline void RealTimeBarTick::clear_high() {
  high_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RealTimeBarTick::_internal_high() const {
  return high_;
}
inline double RealTimeBarTick::high() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.high)
  return _internal_high();
}
inline void RealTimeBarTick::_internal_set_high(double value) {
  _has_bits_[0] |= 0x00000010u;
  high_ = value;
}
inline void RealTimeBarTick::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.high)
}

// double low = 5;
inline bool RealTimeBarTick::_internal_has_low() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_low() const {
  return _internal_has_low();
}
inline void RealTimeBarTick::clear_low() {
  low_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RealTimeBarTick::_internal_low() const {
  return low_;
}
inline double RealTimeBarTick::low() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.low)
  return _internal_low();
}
inline void RealTimeBarTick::_internal_set_low(double value) {
  _has_bits_[0] |= 0x00000020u;
  low_ = value;
}
inline void RealTimeBarTick::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.low)
}

// double close = 6;
inline bool RealTimeBarTick::_internal_has_close() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_close() const {
  return _internal_has_close();
}
inline void RealTimeBarTick::clear_close() {
  close_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RealTimeBarTick::_internal_close() const {
  return close_;
}
inline double RealTimeBarTick::close() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.close)
  return _internal_close();
}
inline void RealTimeBarTick::_internal_set_close(double value) {
  _has_bits_[0] |= 0x00000100u;
  close_ = value;
}
inline void RealTimeBarTick::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.close)
}

// string volume = 7;
inline bool RealTimeBarTick::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_volume() const {
  return _internal_has_volume();
}
inline void RealTimeBarTick::clear_volume() {
  volume_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RealTimeBarTick::volume() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.volume)
  return _internal_volume();
}
inline void RealTimeBarTick::set_volume(const std::string& value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.volume)
}
inline std::string* RealTimeBarTick::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:protobuf.RealTimeBarTick.volume)
  return _internal_mutable_volume();
}
inline const std::string& RealTimeBarTick::_internal_volume() const {
  return volume_.Get();
}
inline void RealTimeBarTick::_internal_set_volume(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealTimeBarTick::set_volume(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  volume_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.RealTimeBarTick.volume)
}
inline void RealTimeBarTick::set_volume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.RealTimeBarTick.volume)
}
inline void RealTimeBarTick::set_volume(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.RealTimeBarTick.volume)
}
inline std::string* RealTimeBarTick::_internal_mutable_volume() {
  _has_bits_[0] |= 0x00000001u;
  return volume_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealTimeBarTick::release_volume() {
  // @@protoc_insertion_point(field_release:protobuf.RealTimeBarTick.volume)
  if (!_internal_has_volume()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return volume_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealTimeBarTick::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.RealTimeBarTick.volume)
}
inline std::string* RealTimeBarTick::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.RealTimeBarTick.volume)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return volume_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealTimeBarTick::unsafe_arena_set_allocated_volume(
    std::string* volume) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (volume != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  volume_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      volume, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.RealTimeBarTick.volume)
}

// string WAP = 8;
inline bool RealTimeBarTick::_internal_has_wap() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_wap() const {
  return _internal_has_wap();
}
inline void RealTimeBarTick::clear_wap() {
  wap_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RealTimeBarTick::wap() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.WAP)
  return _internal_wap();
}
inline void RealTimeBarTick::set_wap(const std::string& value) {
  _internal_set_wap(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.WAP)
}
inline std::string* RealTimeBarTick::mutable_wap() {
  // @@protoc_insertion_point(field_mutable:protobuf.RealTimeBarTick.WAP)
  return _internal_mutable_wap();
}
inline const std::string& RealTimeBarTick::_internal_wap() const {
  return wap_.Get();
}
inline void RealTimeBarTick::_internal_set_wap(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  wap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealTimeBarTick::set_wap(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  wap_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.RealTimeBarTick.WAP)
}
inline void RealTimeBarTick::set_wap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  wap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.RealTimeBarTick.WAP)
}
inline void RealTimeBarTick::set_wap(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  wap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.RealTimeBarTick.WAP)
}
inline std::string* RealTimeBarTick::_internal_mutable_wap() {
  _has_bits_[0] |= 0x00000002u;
  return wap_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealTimeBarTick::release_wap() {
  // @@protoc_insertion_point(field_release:protobuf.RealTimeBarTick.WAP)
  if (!_internal_has_wap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return wap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealTimeBarTick::set_allocated_wap(std::string* wap) {
  if (wap != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.RealTimeBarTick.WAP)
}
inline std::string* RealTimeBarTick::unsafe_arena_release_wap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.RealTimeBarTick.WAP)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return wap_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealTimeBarTick::unsafe_arena_set_allocated_wap(
    std::string* wap) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wap != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wap_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wap, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.RealTimeBarTick.WAP)
}

// int32 count = 9;
inline bool RealTimeBarTick::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RealTimeBarTick::has_count() const {
  return _internal_has_count();
}
inline void RealTimeBarTick::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealTimeBarTick::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealTimeBarTick::count() const {
  // @@protoc_insertion_point(field_get:protobuf.RealTimeBarTick.count)
  return _internal_count();
}
inline void RealTimeBarTick::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  count_ = value;
}
inline void RealTimeBarTick::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:protobuf.RealTimeBarTick.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RealTimeBarTick_2eproto
