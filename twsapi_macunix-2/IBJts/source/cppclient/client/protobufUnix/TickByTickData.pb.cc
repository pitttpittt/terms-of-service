// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickByTickData.proto

#include "TickByTickData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HistoricalTick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoricalTick_HistoricalTick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HistoricalTickBidAsk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HistoricalTickLast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalTickLast_HistoricalTickLast_2eproto;
namespace protobuf {
class TickByTickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TickByTickData> _instance;
  const ::protobuf::HistoricalTickLast* historicalticklast_;
  const ::protobuf::HistoricalTickBidAsk* historicaltickbidask_;
  const ::protobuf::HistoricalTick* historicaltickmidpoint_;
} _TickByTickData_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_TickByTickData_TickByTickData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_TickByTickData_default_instance_;
    new (ptr) ::protobuf::TickByTickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::TickByTickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TickByTickData_TickByTickData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TickByTickData_TickByTickData_2eproto}, {
      &scc_info_HistoricalTickLast_HistoricalTickLast_2eproto.base,
      &scc_info_HistoricalTickBidAsk_HistoricalTickBidAsk_2eproto.base,
      &scc_info_HistoricalTick_HistoricalTick_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TickByTickData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TickByTickData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TickByTickData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TickByTickData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, reqid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, ticktype_),
  offsetof(::protobuf::TickByTickDataDefaultTypeInternal, historicalticklast_),
  offsetof(::protobuf::TickByTickDataDefaultTypeInternal, historicaltickbidask_),
  offsetof(::protobuf::TickByTickDataDefaultTypeInternal, historicaltickmidpoint_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TickByTickData, tick_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protobuf::TickByTickData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_TickByTickData_default_instance_),
};

const char descriptor_table_protodef_TickByTickData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024TickByTickData.proto\022\010protobuf\032\030Histor"
  "icalTickLast.proto\032\032HistoricalTickBidAsk"
  ".proto\032\024HistoricalTick.proto\"\222\002\n\016TickByT"
  "ickData\022\022\n\005reqId\030\001 \001(\005H\001\210\001\001\022\025\n\010tickType\030"
  "\002 \001(\005H\002\210\001\001\022:\n\022historicalTickLast\030\003 \001(\0132\034"
  ".protobuf.HistoricalTickLastH\000\022>\n\024histor"
  "icalTickBidAsk\030\004 \001(\0132\036.protobuf.Historic"
  "alTickBidAskH\000\022:\n\026historicalTickMidPoint"
  "\030\005 \001(\0132\030.protobuf.HistoricalTickH\000B\006\n\004ti"
  "ckB\010\n\006_reqIdB\013\n\t_tickTypeB>\n\026com.ib.clie"
  "nt.protobufB\023TickByTickDataProto\252\002\016IBApi"
  ".protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TickByTickData_2eproto_deps[3] = {
  &::descriptor_table_HistoricalTick_2eproto,
  &::descriptor_table_HistoricalTickBidAsk_2eproto,
  &::descriptor_table_HistoricalTickLast_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TickByTickData_2eproto_sccs[1] = {
  &scc_info_TickByTickData_TickByTickData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TickByTickData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TickByTickData_2eproto = {
  false, false, descriptor_table_protodef_TickByTickData_2eproto, "TickByTickData.proto", 457,
  &descriptor_table_TickByTickData_2eproto_once, descriptor_table_TickByTickData_2eproto_sccs, descriptor_table_TickByTickData_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_TickByTickData_2eproto::offsets,
  file_level_metadata_TickByTickData_2eproto, 1, file_level_enum_descriptors_TickByTickData_2eproto, file_level_service_descriptors_TickByTickData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TickByTickData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TickByTickData_2eproto)), true);
namespace protobuf {

// ===================================================================

void TickByTickData::InitAsDefaultInstance() {
  ::protobuf::_TickByTickData_default_instance_.historicalticklast_ = const_cast< ::protobuf::HistoricalTickLast*>(
      ::protobuf::HistoricalTickLast::internal_default_instance());
  ::protobuf::_TickByTickData_default_instance_.historicaltickbidask_ = const_cast< ::protobuf::HistoricalTickBidAsk*>(
      ::protobuf::HistoricalTickBidAsk::internal_default_instance());
  ::protobuf::_TickByTickData_default_instance_.historicaltickmidpoint_ = const_cast< ::protobuf::HistoricalTick*>(
      ::protobuf::HistoricalTick::internal_default_instance());
}
class TickByTickData::_Internal {
 public:
  using HasBits = decltype(std::declval<TickByTickData>()._has_bits_);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ticktype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf::HistoricalTickLast& historicalticklast(const TickByTickData* msg);
  static const ::protobuf::HistoricalTickBidAsk& historicaltickbidask(const TickByTickData* msg);
  static const ::protobuf::HistoricalTick& historicaltickmidpoint(const TickByTickData* msg);
};

const ::protobuf::HistoricalTickLast&
TickByTickData::_Internal::historicalticklast(const TickByTickData* msg) {
  return *msg->tick_.historicalticklast_;
}
const ::protobuf::HistoricalTickBidAsk&
TickByTickData::_Internal::historicaltickbidask(const TickByTickData* msg) {
  return *msg->tick_.historicaltickbidask_;
}
const ::protobuf::HistoricalTick&
TickByTickData::_Internal::historicaltickmidpoint(const TickByTickData* msg) {
  return *msg->tick_.historicaltickmidpoint_;
}
void TickByTickData::set_allocated_historicalticklast(::protobuf::HistoricalTickLast* historicalticklast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tick();
  if (historicalticklast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historicalticklast)->GetArena();
    if (message_arena != submessage_arena) {
      historicalticklast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historicalticklast, submessage_arena);
    }
    set_has_historicalticklast();
    tick_.historicalticklast_ = historicalticklast;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.TickByTickData.historicalTickLast)
}
void TickByTickData::clear_historicalticklast() {
  if (_internal_has_historicalticklast()) {
    if (GetArena() == nullptr) {
      delete tick_.historicalticklast_;
    }
    clear_has_tick();
  }
}
void TickByTickData::set_allocated_historicaltickbidask(::protobuf::HistoricalTickBidAsk* historicaltickbidask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tick();
  if (historicaltickbidask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historicaltickbidask)->GetArena();
    if (message_arena != submessage_arena) {
      historicaltickbidask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historicaltickbidask, submessage_arena);
    }
    set_has_historicaltickbidask();
    tick_.historicaltickbidask_ = historicaltickbidask;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.TickByTickData.historicalTickBidAsk)
}
void TickByTickData::clear_historicaltickbidask() {
  if (_internal_has_historicaltickbidask()) {
    if (GetArena() == nullptr) {
      delete tick_.historicaltickbidask_;
    }
    clear_has_tick();
  }
}
void TickByTickData::set_allocated_historicaltickmidpoint(::protobuf::HistoricalTick* historicaltickmidpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tick();
  if (historicaltickmidpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historicaltickmidpoint)->GetArena();
    if (message_arena != submessage_arena) {
      historicaltickmidpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historicaltickmidpoint, submessage_arena);
    }
    set_has_historicaltickmidpoint();
    tick_.historicaltickmidpoint_ = historicaltickmidpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.TickByTickData.historicalTickMidPoint)
}
void TickByTickData::clear_historicaltickmidpoint() {
  if (_internal_has_historicaltickmidpoint()) {
    if (GetArena() == nullptr) {
      delete tick_.historicaltickmidpoint_;
    }
    clear_has_tick();
  }
}
TickByTickData::TickByTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.TickByTickData)
}
TickByTickData::TickByTickData(const TickByTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticktype_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(ticktype_));
  clear_has_tick();
  switch (from.tick_case()) {
    case kHistoricalTickLast: {
      _internal_mutable_historicalticklast()->::protobuf::HistoricalTickLast::MergeFrom(from._internal_historicalticklast());
      break;
    }
    case kHistoricalTickBidAsk: {
      _internal_mutable_historicaltickbidask()->::protobuf::HistoricalTickBidAsk::MergeFrom(from._internal_historicaltickbidask());
      break;
    }
    case kHistoricalTickMidPoint: {
      _internal_mutable_historicaltickmidpoint()->::protobuf::HistoricalTick::MergeFrom(from._internal_historicaltickmidpoint());
      break;
    }
    case TICK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf.TickByTickData)
}

void TickByTickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TickByTickData_TickByTickData_2eproto.base);
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticktype_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(ticktype_));
  clear_has_tick();
}

TickByTickData::~TickByTickData() {
  // @@protoc_insertion_point(destructor:protobuf.TickByTickData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TickByTickData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_tick()) {
    clear_tick();
  }
}

void TickByTickData::ArenaDtor(void* object) {
  TickByTickData* _this = reinterpret_cast< TickByTickData* >(object);
  (void)_this;
}
void TickByTickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TickByTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TickByTickData& TickByTickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TickByTickData_TickByTickData_2eproto.base);
  return *internal_default_instance();
}


void TickByTickData::clear_tick() {
// @@protoc_insertion_point(one_of_clear_start:protobuf.TickByTickData)
  switch (tick_case()) {
    case kHistoricalTickLast: {
      if (GetArena() == nullptr) {
        delete tick_.historicalticklast_;
      }
      break;
    }
    case kHistoricalTickBidAsk: {
      if (GetArena() == nullptr) {
        delete tick_.historicaltickbidask_;
      }
      break;
    }
    case kHistoricalTickMidPoint: {
      if (GetArena() == nullptr) {
        delete tick_.historicaltickmidpoint_;
      }
      break;
    }
    case TICK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TICK_NOT_SET;
}


void TickByTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TickByTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ticktype_) -
        reinterpret_cast<char*>(&reqid_)) + sizeof(ticktype_));
  }
  clear_tick();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TickByTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reqid(&has_bits);
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tickType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ticktype(&has_bits);
          ticktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.HistoricalTickLast historicalTickLast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_historicalticklast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.HistoricalTickBidAsk historicalTickBidAsk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_historicaltickbidask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.HistoricalTick historicalTickMidPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_historicaltickmidpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TickByTickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TickByTickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (_internal_has_reqid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // int32 tickType = 2;
  if (_internal_has_ticktype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticktype(), target);
  }

  // .protobuf.HistoricalTickLast historicalTickLast = 3;
  if (_internal_has_historicalticklast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::historicalticklast(this), target, stream);
  }

  // .protobuf.HistoricalTickBidAsk historicalTickBidAsk = 4;
  if (_internal_has_historicaltickbidask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::historicaltickbidask(this), target, stream);
  }

  // .protobuf.HistoricalTick historicalTickMidPoint = 5;
  if (_internal_has_historicaltickmidpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::historicaltickmidpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TickByTickData)
  return target;
}

size_t TickByTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TickByTickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 reqId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reqid());
    }

    // int32 tickType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ticktype());
    }

  }
  switch (tick_case()) {
    // .protobuf.HistoricalTickLast historicalTickLast = 3;
    case kHistoricalTickLast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tick_.historicalticklast_);
      break;
    }
    // .protobuf.HistoricalTickBidAsk historicalTickBidAsk = 4;
    case kHistoricalTickBidAsk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tick_.historicaltickbidask_);
      break;
    }
    // .protobuf.HistoricalTick historicalTickMidPoint = 5;
    case kHistoricalTickMidPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tick_.historicaltickmidpoint_);
      break;
    }
    case TICK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickByTickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.TickByTickData)
  GOOGLE_DCHECK_NE(&from, this);
  const TickByTickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TickByTickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.TickByTickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.TickByTickData)
    MergeFrom(*source);
  }
}

void TickByTickData::MergeFrom(const TickByTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TickByTickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ticktype_ = from.ticktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.tick_case()) {
    case kHistoricalTickLast: {
      _internal_mutable_historicalticklast()->::protobuf::HistoricalTickLast::MergeFrom(from._internal_historicalticklast());
      break;
    }
    case kHistoricalTickBidAsk: {
      _internal_mutable_historicaltickbidask()->::protobuf::HistoricalTickBidAsk::MergeFrom(from._internal_historicaltickbidask());
      break;
    }
    case kHistoricalTickMidPoint: {
      _internal_mutable_historicaltickmidpoint()->::protobuf::HistoricalTick::MergeFrom(from._internal_historicaltickmidpoint());
      break;
    }
    case TICK_NOT_SET: {
      break;
    }
  }
}

void TickByTickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.TickByTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickByTickData::CopyFrom(const TickByTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TickByTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickByTickData::IsInitialized() const {
  return true;
}

void TickByTickData::InternalSwap(TickByTickData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickByTickData, ticktype_)
      + sizeof(TickByTickData::ticktype_)
      - PROTOBUF_FIELD_OFFSET(TickByTickData, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
  swap(tick_, other->tick_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TickByTickData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::TickByTickData* Arena::CreateMaybeMessage< ::protobuf::TickByTickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TickByTickData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
