// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTickLast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalTickLast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalTickLast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TickAttribLast.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalTickLast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalTickLast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTickLast_2eproto;
namespace protobuf {
class HistoricalTickLast;
class HistoricalTickLastDefaultTypeInternal;
extern HistoricalTickLastDefaultTypeInternal _HistoricalTickLast_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalTickLast* Arena::CreateMaybeMessage<::protobuf::HistoricalTickLast>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalTickLast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalTickLast) */ {
 public:
  inline HistoricalTickLast() : HistoricalTickLast(nullptr) {};
  virtual ~HistoricalTickLast();

  HistoricalTickLast(const HistoricalTickLast& from);
  HistoricalTickLast(HistoricalTickLast&& from) noexcept
    : HistoricalTickLast() {
    *this = ::std::move(from);
  }

  inline HistoricalTickLast& operator=(const HistoricalTickLast& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalTickLast& operator=(HistoricalTickLast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalTickLast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalTickLast* internal_default_instance() {
    return reinterpret_cast<const HistoricalTickLast*>(
               &_HistoricalTickLast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoricalTickLast& a, HistoricalTickLast& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalTickLast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalTickLast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalTickLast* New() const final {
    return CreateMaybeMessage<HistoricalTickLast>(nullptr);
  }

  HistoricalTickLast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalTickLast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalTickLast& from);
  void MergeFrom(const HistoricalTickLast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalTickLast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalTickLast";
  }
  protected:
  explicit HistoricalTickLast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalTickLast_2eproto);
    return ::descriptor_table_HistoricalTickLast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 4,
    kExchangeFieldNumber = 5,
    kSpecialConditionsFieldNumber = 6,
    kTickAttribLastFieldNumber = 2,
    kTimeFieldNumber = 1,
    kPriceFieldNumber = 3,
  };
  // string size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const std::string& size() const;
  void set_size(const std::string& value);
  void set_size(std::string&& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  std::string* mutable_size();
  std::string* release_size();
  void set_allocated_size(std::string* size);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_size();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_size(
      std::string* size);
  private:
  const std::string& _internal_size() const;
  void _internal_set_size(const std::string& value);
  std::string* _internal_mutable_size();
  public:

  // string exchange = 5;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string specialConditions = 6;
  bool has_specialconditions() const;
  private:
  bool _internal_has_specialconditions() const;
  public:
  void clear_specialconditions();
  const std::string& specialconditions() const;
  void set_specialconditions(const std::string& value);
  void set_specialconditions(std::string&& value);
  void set_specialconditions(const char* value);
  void set_specialconditions(const char* value, size_t size);
  std::string* mutable_specialconditions();
  std::string* release_specialconditions();
  void set_allocated_specialconditions(std::string* specialconditions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_specialconditions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_specialconditions(
      std::string* specialconditions);
  private:
  const std::string& _internal_specialconditions() const;
  void _internal_set_specialconditions(const std::string& value);
  std::string* _internal_mutable_specialconditions();
  public:

  // .protobuf.TickAttribLast tickAttribLast = 2;
  bool has_tickattriblast() const;
  private:
  bool _internal_has_tickattriblast() const;
  public:
  void clear_tickattriblast();
  const ::protobuf::TickAttribLast& tickattriblast() const;
  ::protobuf::TickAttribLast* release_tickattriblast();
  ::protobuf::TickAttribLast* mutable_tickattriblast();
  void set_allocated_tickattriblast(::protobuf::TickAttribLast* tickattriblast);
  private:
  const ::protobuf::TickAttribLast& _internal_tickattriblast() const;
  ::protobuf::TickAttribLast* _internal_mutable_tickattriblast();
  public:
  void unsafe_arena_set_allocated_tickattriblast(
      ::protobuf::TickAttribLast* tickattriblast);
  ::protobuf::TickAttribLast* unsafe_arena_release_tickattriblast();

  // int64 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalTickLast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specialconditions_;
  ::protobuf::TickAttribLast* tickattriblast_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double price_;
  friend struct ::TableStruct_HistoricalTickLast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoricalTickLast

// int64 time = 1;
inline bool HistoricalTickLast::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistoricalTickLast::has_time() const {
  return _internal_has_time();
}
inline void HistoricalTickLast::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoricalTickLast::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoricalTickLast::time() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.time)
  return _internal_time();
}
inline void HistoricalTickLast::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_ = value;
}
inline void HistoricalTickLast::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickLast.time)
}

// .protobuf.TickAttribLast tickAttribLast = 2;
inline bool HistoricalTickLast::_internal_has_tickattriblast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tickattriblast_ != nullptr);
  return value;
}
inline bool HistoricalTickLast::has_tickattriblast() const {
  return _internal_has_tickattriblast();
}
inline const ::protobuf::TickAttribLast& HistoricalTickLast::_internal_tickattriblast() const {
  const ::protobuf::TickAttribLast* p = tickattriblast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::TickAttribLast*>(
      &::protobuf::_TickAttribLast_default_instance_);
}
inline const ::protobuf::TickAttribLast& HistoricalTickLast::tickattriblast() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.tickAttribLast)
  return _internal_tickattriblast();
}
inline void HistoricalTickLast::unsafe_arena_set_allocated_tickattriblast(
    ::protobuf::TickAttribLast* tickattriblast) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattriblast_);
  }
  tickattriblast_ = tickattriblast;
  if (tickattriblast) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickLast.tickAttribLast)
}
inline ::protobuf::TickAttribLast* HistoricalTickLast::release_tickattriblast() {
  auto temp = unsafe_arena_release_tickattriblast();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::TickAttribLast* HistoricalTickLast::unsafe_arena_release_tickattriblast() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickLast.tickAttribLast)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf::TickAttribLast* temp = tickattriblast_;
  tickattriblast_ = nullptr;
  return temp;
}
inline ::protobuf::TickAttribLast* HistoricalTickLast::_internal_mutable_tickattriblast() {
  _has_bits_[0] |= 0x00000008u;
  if (tickattriblast_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TickAttribLast>(GetArena());
    tickattriblast_ = p;
  }
  return tickattriblast_;
}
inline ::protobuf::TickAttribLast* HistoricalTickLast::mutable_tickattriblast() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickLast.tickAttribLast)
  return _internal_mutable_tickattriblast();
}
inline void HistoricalTickLast::set_allocated_tickattriblast(::protobuf::TickAttribLast* tickattriblast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattriblast_);
  }
  if (tickattriblast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattriblast)->GetArena();
    if (message_arena != submessage_arena) {
      tickattriblast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tickattriblast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tickattriblast_ = tickattriblast;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickLast.tickAttribLast)
}

// double price = 3;
inline bool HistoricalTickLast::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistoricalTickLast::has_price() const {
  return _internal_has_price();
}
inline void HistoricalTickLast::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double HistoricalTickLast::_internal_price() const {
  return price_;
}
inline double HistoricalTickLast::price() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.price)
  return _internal_price();
}
inline void HistoricalTickLast::_internal_set_price(double value) {
  _has_bits_[0] |= 0x00000020u;
  price_ = value;
}
inline void HistoricalTickLast::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickLast.price)
}

// string size = 4;
inline bool HistoricalTickLast::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalTickLast::has_size() const {
  return _internal_has_size();
}
inline void HistoricalTickLast::clear_size() {
  size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistoricalTickLast::size() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.size)
  return _internal_size();
}
inline void HistoricalTickLast::set_size(const std::string& value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickLast.size)
}
inline std::string* HistoricalTickLast::mutable_size() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickLast.size)
  return _internal_mutable_size();
}
inline const std::string& HistoricalTickLast::_internal_size() const {
  return size_.Get();
}
inline void HistoricalTickLast::_internal_set_size(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTickLast::set_size(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTickLast.size)
}
inline void HistoricalTickLast::set_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTickLast.size)
}
inline void HistoricalTickLast::set_size(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTickLast.size)
}
inline std::string* HistoricalTickLast::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000001u;
  return size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTickLast::release_size() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickLast.size)
  if (!_internal_has_size()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return size_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTickLast::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickLast.size)
}
inline std::string* HistoricalTickLast::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTickLast.size)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return size_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTickLast::unsafe_arena_set_allocated_size(
    std::string* size) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (size != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      size, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickLast.size)
}

// string exchange = 5;
inline bool HistoricalTickLast::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalTickLast::has_exchange() const {
  return _internal_has_exchange();
}
inline void HistoricalTickLast::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistoricalTickLast::exchange() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.exchange)
  return _internal_exchange();
}
inline void HistoricalTickLast::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickLast.exchange)
}
inline std::string* HistoricalTickLast::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickLast.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& HistoricalTickLast::_internal_exchange() const {
  return exchange_.Get();
}
inline void HistoricalTickLast::_internal_set_exchange(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTickLast::set_exchange(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTickLast.exchange)
}
inline void HistoricalTickLast::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTickLast.exchange)
}
inline void HistoricalTickLast::set_exchange(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTickLast.exchange)
}
inline std::string* HistoricalTickLast::_internal_mutable_exchange() {
  _has_bits_[0] |= 0x00000002u;
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTickLast::release_exchange() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickLast.exchange)
  if (!_internal_has_exchange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return exchange_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTickLast::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickLast.exchange)
}
inline std::string* HistoricalTickLast::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTickLast.exchange)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return exchange_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTickLast::unsafe_arena_set_allocated_exchange(
    std::string* exchange) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  exchange_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickLast.exchange)
}

// string specialConditions = 6;
inline bool HistoricalTickLast::_internal_has_specialconditions() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistoricalTickLast::has_specialconditions() const {
  return _internal_has_specialconditions();
}
inline void HistoricalTickLast::clear_specialconditions() {
  specialconditions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HistoricalTickLast::specialconditions() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickLast.specialConditions)
  return _internal_specialconditions();
}
inline void HistoricalTickLast::set_specialconditions(const std::string& value) {
  _internal_set_specialconditions(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickLast.specialConditions)
}
inline std::string* HistoricalTickLast::mutable_specialconditions() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickLast.specialConditions)
  return _internal_mutable_specialconditions();
}
inline const std::string& HistoricalTickLast::_internal_specialconditions() const {
  return specialconditions_.Get();
}
inline void HistoricalTickLast::_internal_set_specialconditions(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  specialconditions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTickLast::set_specialconditions(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  specialconditions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTickLast.specialConditions)
}
inline void HistoricalTickLast::set_specialconditions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  specialconditions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTickLast.specialConditions)
}
inline void HistoricalTickLast::set_specialconditions(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  specialconditions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTickLast.specialConditions)
}
inline std::string* HistoricalTickLast::_internal_mutable_specialconditions() {
  _has_bits_[0] |= 0x00000004u;
  return specialconditions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTickLast::release_specialconditions() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickLast.specialConditions)
  if (!_internal_has_specialconditions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return specialconditions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTickLast::set_allocated_specialconditions(std::string* specialconditions) {
  if (specialconditions != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  specialconditions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specialconditions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickLast.specialConditions)
}
inline std::string* HistoricalTickLast::unsafe_arena_release_specialconditions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTickLast.specialConditions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return specialconditions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTickLast::unsafe_arena_set_allocated_specialconditions(
    std::string* specialconditions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (specialconditions != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  specialconditions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      specialconditions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickLast.specialConditions)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalTickLast_2eproto
