// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeadTimestampRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HeadTimestampRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HeadTimestampRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Contract.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HeadTimestampRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HeadTimestampRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HeadTimestampRequest_2eproto;
namespace protobuf {
class HeadTimestampRequest;
class HeadTimestampRequestDefaultTypeInternal;
extern HeadTimestampRequestDefaultTypeInternal _HeadTimestampRequest_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HeadTimestampRequest* Arena::CreateMaybeMessage<::protobuf::HeadTimestampRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HeadTimestampRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HeadTimestampRequest) */ {
 public:
  inline HeadTimestampRequest() : HeadTimestampRequest(nullptr) {};
  virtual ~HeadTimestampRequest();

  HeadTimestampRequest(const HeadTimestampRequest& from);
  HeadTimestampRequest(HeadTimestampRequest&& from) noexcept
    : HeadTimestampRequest() {
    *this = ::std::move(from);
  }

  inline HeadTimestampRequest& operator=(const HeadTimestampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeadTimestampRequest& operator=(HeadTimestampRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeadTimestampRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeadTimestampRequest* internal_default_instance() {
    return reinterpret_cast<const HeadTimestampRequest*>(
               &_HeadTimestampRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeadTimestampRequest& a, HeadTimestampRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeadTimestampRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeadTimestampRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeadTimestampRequest* New() const final {
    return CreateMaybeMessage<HeadTimestampRequest>(nullptr);
  }

  HeadTimestampRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeadTimestampRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeadTimestampRequest& from);
  void MergeFrom(const HeadTimestampRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeadTimestampRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HeadTimestampRequest";
  }
  protected:
  explicit HeadTimestampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HeadTimestampRequest_2eproto);
    return ::descriptor_table_HeadTimestampRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhatToShowFieldNumber = 4,
    kContractFieldNumber = 2,
    kReqIdFieldNumber = 1,
    kUseRTHFieldNumber = 3,
    kFormatDateFieldNumber = 5,
  };
  // string whatToShow = 4;
  bool has_whattoshow() const;
  private:
  bool _internal_has_whattoshow() const;
  public:
  void clear_whattoshow();
  const std::string& whattoshow() const;
  void set_whattoshow(const std::string& value);
  void set_whattoshow(std::string&& value);
  void set_whattoshow(const char* value);
  void set_whattoshow(const char* value, size_t size);
  std::string* mutable_whattoshow();
  std::string* release_whattoshow();
  void set_allocated_whattoshow(std::string* whattoshow);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_whattoshow();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_whattoshow(
      std::string* whattoshow);
  private:
  const std::string& _internal_whattoshow() const;
  void _internal_set_whattoshow(const std::string& value);
  std::string* _internal_mutable_whattoshow();
  public:

  // .protobuf.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::protobuf::Contract& contract() const;
  ::protobuf::Contract* release_contract();
  ::protobuf::Contract* mutable_contract();
  void set_allocated_contract(::protobuf::Contract* contract);
  private:
  const ::protobuf::Contract& _internal_contract() const;
  ::protobuf::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::protobuf::Contract* contract);
  ::protobuf::Contract* unsafe_arena_release_contract();

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool useRTH = 3;
  bool has_userth() const;
  private:
  bool _internal_has_userth() const;
  public:
  void clear_userth();
  bool userth() const;
  void set_userth(bool value);
  private:
  bool _internal_userth() const;
  void _internal_set_userth(bool value);
  public:

  // int32 formatDate = 5;
  bool has_formatdate() const;
  private:
  bool _internal_has_formatdate() const;
  public:
  void clear_formatdate();
  ::PROTOBUF_NAMESPACE_ID::int32 formatdate() const;
  void set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_formatdate() const;
  void _internal_set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HeadTimestampRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whattoshow_;
  ::protobuf::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  bool userth_;
  ::PROTOBUF_NAMESPACE_ID::int32 formatdate_;
  friend struct ::TableStruct_HeadTimestampRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeadTimestampRequest

// int32 reqId = 1;
inline bool HeadTimestampRequest::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeadTimestampRequest::has_reqid() const {
  return _internal_has_reqid();
}
inline void HeadTimestampRequest::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeadTimestampRequest::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeadTimestampRequest::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.HeadTimestampRequest.reqId)
  return _internal_reqid();
}
inline void HeadTimestampRequest::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reqid_ = value;
}
inline void HeadTimestampRequest::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.HeadTimestampRequest.reqId)
}

// .protobuf.Contract contract = 2;
inline bool HeadTimestampRequest::_internal_has_contract() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || contract_ != nullptr);
  return value;
}
inline bool HeadTimestampRequest::has_contract() const {
  return _internal_has_contract();
}
inline const ::protobuf::Contract& HeadTimestampRequest::_internal_contract() const {
  const ::protobuf::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::Contract*>(
      &::protobuf::_Contract_default_instance_);
}
inline const ::protobuf::Contract& HeadTimestampRequest::contract() const {
  // @@protoc_insertion_point(field_get:protobuf.HeadTimestampRequest.contract)
  return _internal_contract();
}
inline void HeadTimestampRequest::unsafe_arena_set_allocated_contract(
    ::protobuf::Contract* contract) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HeadTimestampRequest.contract)
}
inline ::protobuf::Contract* HeadTimestampRequest::release_contract() {
  auto temp = unsafe_arena_release_contract();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::Contract* HeadTimestampRequest::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:protobuf.HeadTimestampRequest.contract)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::protobuf::Contract* HeadTimestampRequest::_internal_mutable_contract() {
  _has_bits_[0] |= 0x00000002u;
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Contract>(GetArena());
    contract_ = p;
  }
  return contract_;
}
inline ::protobuf::Contract* HeadTimestampRequest::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:protobuf.HeadTimestampRequest.contract)
  return _internal_mutable_contract();
}
inline void HeadTimestampRequest::set_allocated_contract(::protobuf::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract)->GetArena();
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HeadTimestampRequest.contract)
}

// bool useRTH = 3;
inline bool HeadTimestampRequest::_internal_has_userth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HeadTimestampRequest::has_userth() const {
  return _internal_has_userth();
}
inline void HeadTimestampRequest::clear_userth() {
  userth_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HeadTimestampRequest::_internal_userth() const {
  return userth_;
}
inline bool HeadTimestampRequest::userth() const {
  // @@protoc_insertion_point(field_get:protobuf.HeadTimestampRequest.useRTH)
  return _internal_userth();
}
inline void HeadTimestampRequest::_internal_set_userth(bool value) {
  _has_bits_[0] |= 0x00000008u;
  userth_ = value;
}
inline void HeadTimestampRequest::set_userth(bool value) {
  _internal_set_userth(value);
  // @@protoc_insertion_point(field_set:protobuf.HeadTimestampRequest.useRTH)
}

// string whatToShow = 4;
inline bool HeadTimestampRequest::_internal_has_whattoshow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeadTimestampRequest::has_whattoshow() const {
  return _internal_has_whattoshow();
}
inline void HeadTimestampRequest::clear_whattoshow() {
  whattoshow_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeadTimestampRequest::whattoshow() const {
  // @@protoc_insertion_point(field_get:protobuf.HeadTimestampRequest.whatToShow)
  return _internal_whattoshow();
}
inline void HeadTimestampRequest::set_whattoshow(const std::string& value) {
  _internal_set_whattoshow(value);
  // @@protoc_insertion_point(field_set:protobuf.HeadTimestampRequest.whatToShow)
}
inline std::string* HeadTimestampRequest::mutable_whattoshow() {
  // @@protoc_insertion_point(field_mutable:protobuf.HeadTimestampRequest.whatToShow)
  return _internal_mutable_whattoshow();
}
inline const std::string& HeadTimestampRequest::_internal_whattoshow() const {
  return whattoshow_.Get();
}
inline void HeadTimestampRequest::_internal_set_whattoshow(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HeadTimestampRequest::set_whattoshow(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  whattoshow_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HeadTimestampRequest.whatToShow)
}
inline void HeadTimestampRequest::set_whattoshow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HeadTimestampRequest.whatToShow)
}
inline void HeadTimestampRequest::set_whattoshow(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HeadTimestampRequest.whatToShow)
}
inline std::string* HeadTimestampRequest::_internal_mutable_whattoshow() {
  _has_bits_[0] |= 0x00000001u;
  return whattoshow_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HeadTimestampRequest::release_whattoshow() {
  // @@protoc_insertion_point(field_release:protobuf.HeadTimestampRequest.whatToShow)
  if (!_internal_has_whattoshow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return whattoshow_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeadTimestampRequest::set_allocated_whattoshow(std::string* whattoshow) {
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  whattoshow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whattoshow,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HeadTimestampRequest.whatToShow)
}
inline std::string* HeadTimestampRequest::unsafe_arena_release_whattoshow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HeadTimestampRequest.whatToShow)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return whattoshow_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HeadTimestampRequest::unsafe_arena_set_allocated_whattoshow(
    std::string* whattoshow) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  whattoshow_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      whattoshow, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HeadTimestampRequest.whatToShow)
}

// int32 formatDate = 5;
inline bool HeadTimestampRequest::_internal_has_formatdate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HeadTimestampRequest::has_formatdate() const {
  return _internal_has_formatdate();
}
inline void HeadTimestampRequest::clear_formatdate() {
  formatdate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeadTimestampRequest::_internal_formatdate() const {
  return formatdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeadTimestampRequest::formatdate() const {
  // @@protoc_insertion_point(field_get:protobuf.HeadTimestampRequest.formatDate)
  return _internal_formatdate();
}
inline void HeadTimestampRequest::_internal_set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  formatdate_ = value;
}
inline void HeadTimestampRequest::set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_formatdate(value);
  // @@protoc_insertion_point(field_set:protobuf.HeadTimestampRequest.formatDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HeadTimestampRequest_2eproto
