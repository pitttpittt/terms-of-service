// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContractDetails.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ContractDetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ContractDetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "IneligibilityReason.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ContractDetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ContractDetails_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ContractDetails_2eproto;
namespace protobuf {
class ContractDetails;
class ContractDetailsDefaultTypeInternal;
extern ContractDetailsDefaultTypeInternal _ContractDetails_default_instance_;
class ContractDetails_SecIdListEntry_DoNotUse;
class ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal;
extern ContractDetails_SecIdListEntry_DoNotUseDefaultTypeInternal _ContractDetails_SecIdListEntry_DoNotUse_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::ContractDetails* Arena::CreateMaybeMessage<::protobuf::ContractDetails>(Arena*);
template<> ::protobuf::ContractDetails_SecIdListEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::ContractDetails_SecIdListEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class ContractDetails_SecIdListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContractDetails_SecIdListEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContractDetails_SecIdListEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContractDetails_SecIdListEntry_DoNotUse();
  ContractDetails_SecIdListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContractDetails_SecIdListEntry_DoNotUse& other);
  static const ContractDetails_SecIdListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContractDetails_SecIdListEntry_DoNotUse*>(&_ContractDetails_SecIdListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.ContractDetails.SecIdListEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.ContractDetails.SecIdListEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ContractDetails_2eproto);
    return ::descriptor_table_ContractDetails_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ContractDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ContractDetails) */ {
 public:
  inline ContractDetails() : ContractDetails(nullptr) {};
  virtual ~ContractDetails();

  ContractDetails(const ContractDetails& from);
  ContractDetails(ContractDetails&& from) noexcept
    : ContractDetails() {
    *this = ::std::move(from);
  }

  inline ContractDetails& operator=(const ContractDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractDetails& operator=(ContractDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractDetails* internal_default_instance() {
    return reinterpret_cast<const ContractDetails*>(
               &_ContractDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContractDetails& a, ContractDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractDetails* New() const final {
    return CreateMaybeMessage<ContractDetails>(nullptr);
  }

  ContractDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractDetails& from);
  void MergeFrom(const ContractDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.ContractDetails";
  }
  protected:
  explicit ContractDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ContractDetails_2eproto);
    return ::descriptor_table_ContractDetails_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSecIdListFieldNumber = 17,
    kIneligibilityReasonListFieldNumber = 58,
    kMarketNameFieldNumber = 1,
    kMinTickFieldNumber = 2,
    kOrderTypesFieldNumber = 3,
    kValidExchangesFieldNumber = 4,
    kLongNameFieldNumber = 7,
    kContractMonthFieldNumber = 8,
    kIndustryFieldNumber = 9,
    kCategoryFieldNumber = 10,
    kSubcategoryFieldNumber = 11,
    kTimeZoneIdFieldNumber = 12,
    kTradingHoursFieldNumber = 13,
    kLiquidHoursFieldNumber = 14,
    kEvRuleFieldNumber = 15,
    kUnderSymbolFieldNumber = 19,
    kUnderSecTypeFieldNumber = 20,
    kMarketRuleIdsFieldNumber = 21,
    kRealExpirationDateFieldNumber = 22,
    kStockTypeFieldNumber = 23,
    kMinSizeFieldNumber = 24,
    kSizeIncrementFieldNumber = 25,
    kSuggestedSizeIncrementFieldNumber = 26,
    kFundNameFieldNumber = 27,
    kFundFamilyFieldNumber = 28,
    kFundTypeFieldNumber = 29,
    kFundFrontLoadFieldNumber = 30,
    kFundBackLoadFieldNumber = 31,
    kFundBackLoadTimeIntervalFieldNumber = 32,
    kFundManagementFeeFieldNumber = 33,
    kFundNotifyAmountFieldNumber = 37,
    kFundMinimumInitialPurchaseFieldNumber = 38,
    kFundMinimumSubsequentPurchaseFieldNumber = 39,
    kFundBlueSkyStatesFieldNumber = 40,
    kFundBlueSkyTerritoriesFieldNumber = 41,
    kFundDistributionPolicyIndicatorFieldNumber = 42,
    kFundAssetTypeFieldNumber = 43,
    kCusipFieldNumber = 44,
    kIssueDateFieldNumber = 45,
    kRatingsFieldNumber = 46,
    kBondTypeFieldNumber = 47,
    kCouponTypeFieldNumber = 49,
    kDescAppendFieldNumber = 53,
    kNextOptionDateFieldNumber = 54,
    kNextOptionTypeFieldNumber = 55,
    kBondNotesFieldNumber = 57,
    kPriceMagnifierFieldNumber = 5,
    kUnderConIdFieldNumber = 6,
    kEvMultiplierFieldNumber = 16,
    kAggGroupFieldNumber = 18,
    kFundClosedFieldNumber = 34,
    kFundClosedForNewInvestorsFieldNumber = 35,
    kFundClosedForNewMoneyFieldNumber = 36,
    kConvertibleFieldNumber = 50,
    kCouponFieldNumber = 48,
    kCallableFieldNumber = 51,
    kPuttableFieldNumber = 52,
    kNextOptionPartialFieldNumber = 56,
  };
  // map<string, string> secIdList = 17;
  int secidlist_size() const;
  private:
  int _internal_secidlist_size() const;
  public:
  void clear_secidlist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_secidlist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_secidlist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      secidlist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_secidlist();

  // repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
  int ineligibilityreasonlist_size() const;
  private:
  int _internal_ineligibilityreasonlist_size() const;
  public:
  void clear_ineligibilityreasonlist();
  ::protobuf::IneligibilityReason* mutable_ineligibilityreasonlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::IneligibilityReason >*
      mutable_ineligibilityreasonlist();
  private:
  const ::protobuf::IneligibilityReason& _internal_ineligibilityreasonlist(int index) const;
  ::protobuf::IneligibilityReason* _internal_add_ineligibilityreasonlist();
  public:
  const ::protobuf::IneligibilityReason& ineligibilityreasonlist(int index) const;
  ::protobuf::IneligibilityReason* add_ineligibilityreasonlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::IneligibilityReason >&
      ineligibilityreasonlist() const;

  // string marketName = 1;
  bool has_marketname() const;
  private:
  bool _internal_has_marketname() const;
  public:
  void clear_marketname();
  const std::string& marketname() const;
  void set_marketname(const std::string& value);
  void set_marketname(std::string&& value);
  void set_marketname(const char* value);
  void set_marketname(const char* value, size_t size);
  std::string* mutable_marketname();
  std::string* release_marketname();
  void set_allocated_marketname(std::string* marketname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_marketname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_marketname(
      std::string* marketname);
  private:
  const std::string& _internal_marketname() const;
  void _internal_set_marketname(const std::string& value);
  std::string* _internal_mutable_marketname();
  public:

  // string minTick = 2;
  bool has_mintick() const;
  private:
  bool _internal_has_mintick() const;
  public:
  void clear_mintick();
  const std::string& mintick() const;
  void set_mintick(const std::string& value);
  void set_mintick(std::string&& value);
  void set_mintick(const char* value);
  void set_mintick(const char* value, size_t size);
  std::string* mutable_mintick();
  std::string* release_mintick();
  void set_allocated_mintick(std::string* mintick);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mintick();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mintick(
      std::string* mintick);
  private:
  const std::string& _internal_mintick() const;
  void _internal_set_mintick(const std::string& value);
  std::string* _internal_mutable_mintick();
  public:

  // string orderTypes = 3;
  bool has_ordertypes() const;
  private:
  bool _internal_has_ordertypes() const;
  public:
  void clear_ordertypes();
  const std::string& ordertypes() const;
  void set_ordertypes(const std::string& value);
  void set_ordertypes(std::string&& value);
  void set_ordertypes(const char* value);
  void set_ordertypes(const char* value, size_t size);
  std::string* mutable_ordertypes();
  std::string* release_ordertypes();
  void set_allocated_ordertypes(std::string* ordertypes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordertypes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordertypes(
      std::string* ordertypes);
  private:
  const std::string& _internal_ordertypes() const;
  void _internal_set_ordertypes(const std::string& value);
  std::string* _internal_mutable_ordertypes();
  public:

  // string validExchanges = 4;
  bool has_validexchanges() const;
  private:
  bool _internal_has_validexchanges() const;
  public:
  void clear_validexchanges();
  const std::string& validexchanges() const;
  void set_validexchanges(const std::string& value);
  void set_validexchanges(std::string&& value);
  void set_validexchanges(const char* value);
  void set_validexchanges(const char* value, size_t size);
  std::string* mutable_validexchanges();
  std::string* release_validexchanges();
  void set_allocated_validexchanges(std::string* validexchanges);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_validexchanges();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_validexchanges(
      std::string* validexchanges);
  private:
  const std::string& _internal_validexchanges() const;
  void _internal_set_validexchanges(const std::string& value);
  std::string* _internal_mutable_validexchanges();
  public:

  // string longName = 7;
  bool has_longname() const;
  private:
  bool _internal_has_longname() const;
  public:
  void clear_longname();
  const std::string& longname() const;
  void set_longname(const std::string& value);
  void set_longname(std::string&& value);
  void set_longname(const char* value);
  void set_longname(const char* value, size_t size);
  std::string* mutable_longname();
  std::string* release_longname();
  void set_allocated_longname(std::string* longname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_longname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_longname(
      std::string* longname);
  private:
  const std::string& _internal_longname() const;
  void _internal_set_longname(const std::string& value);
  std::string* _internal_mutable_longname();
  public:

  // string contractMonth = 8;
  bool has_contractmonth() const;
  private:
  bool _internal_has_contractmonth() const;
  public:
  void clear_contractmonth();
  const std::string& contractmonth() const;
  void set_contractmonth(const std::string& value);
  void set_contractmonth(std::string&& value);
  void set_contractmonth(const char* value);
  void set_contractmonth(const char* value, size_t size);
  std::string* mutable_contractmonth();
  std::string* release_contractmonth();
  void set_allocated_contractmonth(std::string* contractmonth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractmonth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractmonth(
      std::string* contractmonth);
  private:
  const std::string& _internal_contractmonth() const;
  void _internal_set_contractmonth(const std::string& value);
  std::string* _internal_mutable_contractmonth();
  public:

  // string industry = 9;
  bool has_industry() const;
  private:
  bool _internal_has_industry() const;
  public:
  void clear_industry();
  const std::string& industry() const;
  void set_industry(const std::string& value);
  void set_industry(std::string&& value);
  void set_industry(const char* value);
  void set_industry(const char* value, size_t size);
  std::string* mutable_industry();
  std::string* release_industry();
  void set_allocated_industry(std::string* industry);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_industry();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_industry(
      std::string* industry);
  private:
  const std::string& _internal_industry() const;
  void _internal_set_industry(const std::string& value);
  std::string* _internal_mutable_industry();
  public:

  // string category = 10;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category(
      std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string subcategory = 11;
  bool has_subcategory() const;
  private:
  bool _internal_has_subcategory() const;
  public:
  void clear_subcategory();
  const std::string& subcategory() const;
  void set_subcategory(const std::string& value);
  void set_subcategory(std::string&& value);
  void set_subcategory(const char* value);
  void set_subcategory(const char* value, size_t size);
  std::string* mutable_subcategory();
  std::string* release_subcategory();
  void set_allocated_subcategory(std::string* subcategory);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subcategory();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subcategory(
      std::string* subcategory);
  private:
  const std::string& _internal_subcategory() const;
  void _internal_set_subcategory(const std::string& value);
  std::string* _internal_mutable_subcategory();
  public:

  // string timeZoneId = 12;
  bool has_timezoneid() const;
  private:
  bool _internal_has_timezoneid() const;
  public:
  void clear_timezoneid();
  const std::string& timezoneid() const;
  void set_timezoneid(const std::string& value);
  void set_timezoneid(std::string&& value);
  void set_timezoneid(const char* value);
  void set_timezoneid(const char* value, size_t size);
  std::string* mutable_timezoneid();
  std::string* release_timezoneid();
  void set_allocated_timezoneid(std::string* timezoneid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezoneid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezoneid(
      std::string* timezoneid);
  private:
  const std::string& _internal_timezoneid() const;
  void _internal_set_timezoneid(const std::string& value);
  std::string* _internal_mutable_timezoneid();
  public:

  // string tradingHours = 13;
  bool has_tradinghours() const;
  private:
  bool _internal_has_tradinghours() const;
  public:
  void clear_tradinghours();
  const std::string& tradinghours() const;
  void set_tradinghours(const std::string& value);
  void set_tradinghours(std::string&& value);
  void set_tradinghours(const char* value);
  void set_tradinghours(const char* value, size_t size);
  std::string* mutable_tradinghours();
  std::string* release_tradinghours();
  void set_allocated_tradinghours(std::string* tradinghours);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tradinghours();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tradinghours(
      std::string* tradinghours);
  private:
  const std::string& _internal_tradinghours() const;
  void _internal_set_tradinghours(const std::string& value);
  std::string* _internal_mutable_tradinghours();
  public:

  // string liquidHours = 14;
  bool has_liquidhours() const;
  private:
  bool _internal_has_liquidhours() const;
  public:
  void clear_liquidhours();
  const std::string& liquidhours() const;
  void set_liquidhours(const std::string& value);
  void set_liquidhours(std::string&& value);
  void set_liquidhours(const char* value);
  void set_liquidhours(const char* value, size_t size);
  std::string* mutable_liquidhours();
  std::string* release_liquidhours();
  void set_allocated_liquidhours(std::string* liquidhours);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_liquidhours();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_liquidhours(
      std::string* liquidhours);
  private:
  const std::string& _internal_liquidhours() const;
  void _internal_set_liquidhours(const std::string& value);
  std::string* _internal_mutable_liquidhours();
  public:

  // string evRule = 15;
  bool has_evrule() const;
  private:
  bool _internal_has_evrule() const;
  public:
  void clear_evrule();
  const std::string& evrule() const;
  void set_evrule(const std::string& value);
  void set_evrule(std::string&& value);
  void set_evrule(const char* value);
  void set_evrule(const char* value, size_t size);
  std::string* mutable_evrule();
  std::string* release_evrule();
  void set_allocated_evrule(std::string* evrule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_evrule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_evrule(
      std::string* evrule);
  private:
  const std::string& _internal_evrule() const;
  void _internal_set_evrule(const std::string& value);
  std::string* _internal_mutable_evrule();
  public:

  // string underSymbol = 19;
  bool has_undersymbol() const;
  private:
  bool _internal_has_undersymbol() const;
  public:
  void clear_undersymbol();
  const std::string& undersymbol() const;
  void set_undersymbol(const std::string& value);
  void set_undersymbol(std::string&& value);
  void set_undersymbol(const char* value);
  void set_undersymbol(const char* value, size_t size);
  std::string* mutable_undersymbol();
  std::string* release_undersymbol();
  void set_allocated_undersymbol(std::string* undersymbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_undersymbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_undersymbol(
      std::string* undersymbol);
  private:
  const std::string& _internal_undersymbol() const;
  void _internal_set_undersymbol(const std::string& value);
  std::string* _internal_mutable_undersymbol();
  public:

  // string underSecType = 20;
  bool has_undersectype() const;
  private:
  bool _internal_has_undersectype() const;
  public:
  void clear_undersectype();
  const std::string& undersectype() const;
  void set_undersectype(const std::string& value);
  void set_undersectype(std::string&& value);
  void set_undersectype(const char* value);
  void set_undersectype(const char* value, size_t size);
  std::string* mutable_undersectype();
  std::string* release_undersectype();
  void set_allocated_undersectype(std::string* undersectype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_undersectype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_undersectype(
      std::string* undersectype);
  private:
  const std::string& _internal_undersectype() const;
  void _internal_set_undersectype(const std::string& value);
  std::string* _internal_mutable_undersectype();
  public:

  // string marketRuleIds = 21;
  bool has_marketruleids() const;
  private:
  bool _internal_has_marketruleids() const;
  public:
  void clear_marketruleids();
  const std::string& marketruleids() const;
  void set_marketruleids(const std::string& value);
  void set_marketruleids(std::string&& value);
  void set_marketruleids(const char* value);
  void set_marketruleids(const char* value, size_t size);
  std::string* mutable_marketruleids();
  std::string* release_marketruleids();
  void set_allocated_marketruleids(std::string* marketruleids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_marketruleids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_marketruleids(
      std::string* marketruleids);
  private:
  const std::string& _internal_marketruleids() const;
  void _internal_set_marketruleids(const std::string& value);
  std::string* _internal_mutable_marketruleids();
  public:

  // string realExpirationDate = 22;
  bool has_realexpirationdate() const;
  private:
  bool _internal_has_realexpirationdate() const;
  public:
  void clear_realexpirationdate();
  const std::string& realexpirationdate() const;
  void set_realexpirationdate(const std::string& value);
  void set_realexpirationdate(std::string&& value);
  void set_realexpirationdate(const char* value);
  void set_realexpirationdate(const char* value, size_t size);
  std::string* mutable_realexpirationdate();
  std::string* release_realexpirationdate();
  void set_allocated_realexpirationdate(std::string* realexpirationdate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_realexpirationdate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_realexpirationdate(
      std::string* realexpirationdate);
  private:
  const std::string& _internal_realexpirationdate() const;
  void _internal_set_realexpirationdate(const std::string& value);
  std::string* _internal_mutable_realexpirationdate();
  public:

  // string stockType = 23;
  bool has_stocktype() const;
  private:
  bool _internal_has_stocktype() const;
  public:
  void clear_stocktype();
  const std::string& stocktype() const;
  void set_stocktype(const std::string& value);
  void set_stocktype(std::string&& value);
  void set_stocktype(const char* value);
  void set_stocktype(const char* value, size_t size);
  std::string* mutable_stocktype();
  std::string* release_stocktype();
  void set_allocated_stocktype(std::string* stocktype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stocktype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stocktype(
      std::string* stocktype);
  private:
  const std::string& _internal_stocktype() const;
  void _internal_set_stocktype(const std::string& value);
  std::string* _internal_mutable_stocktype();
  public:

  // string minSize = 24;
  bool has_minsize() const;
  private:
  bool _internal_has_minsize() const;
  public:
  void clear_minsize();
  const std::string& minsize() const;
  void set_minsize(const std::string& value);
  void set_minsize(std::string&& value);
  void set_minsize(const char* value);
  void set_minsize(const char* value, size_t size);
  std::string* mutable_minsize();
  std::string* release_minsize();
  void set_allocated_minsize(std::string* minsize);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_minsize();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_minsize(
      std::string* minsize);
  private:
  const std::string& _internal_minsize() const;
  void _internal_set_minsize(const std::string& value);
  std::string* _internal_mutable_minsize();
  public:

  // string sizeIncrement = 25;
  bool has_sizeincrement() const;
  private:
  bool _internal_has_sizeincrement() const;
  public:
  void clear_sizeincrement();
  const std::string& sizeincrement() const;
  void set_sizeincrement(const std::string& value);
  void set_sizeincrement(std::string&& value);
  void set_sizeincrement(const char* value);
  void set_sizeincrement(const char* value, size_t size);
  std::string* mutable_sizeincrement();
  std::string* release_sizeincrement();
  void set_allocated_sizeincrement(std::string* sizeincrement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sizeincrement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sizeincrement(
      std::string* sizeincrement);
  private:
  const std::string& _internal_sizeincrement() const;
  void _internal_set_sizeincrement(const std::string& value);
  std::string* _internal_mutable_sizeincrement();
  public:

  // string suggestedSizeIncrement = 26;
  bool has_suggestedsizeincrement() const;
  private:
  bool _internal_has_suggestedsizeincrement() const;
  public:
  void clear_suggestedsizeincrement();
  const std::string& suggestedsizeincrement() const;
  void set_suggestedsizeincrement(const std::string& value);
  void set_suggestedsizeincrement(std::string&& value);
  void set_suggestedsizeincrement(const char* value);
  void set_suggestedsizeincrement(const char* value, size_t size);
  std::string* mutable_suggestedsizeincrement();
  std::string* release_suggestedsizeincrement();
  void set_allocated_suggestedsizeincrement(std::string* suggestedsizeincrement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suggestedsizeincrement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suggestedsizeincrement(
      std::string* suggestedsizeincrement);
  private:
  const std::string& _internal_suggestedsizeincrement() const;
  void _internal_set_suggestedsizeincrement(const std::string& value);
  std::string* _internal_mutable_suggestedsizeincrement();
  public:

  // string fundName = 27;
  bool has_fundname() const;
  private:
  bool _internal_has_fundname() const;
  public:
  void clear_fundname();
  const std::string& fundname() const;
  void set_fundname(const std::string& value);
  void set_fundname(std::string&& value);
  void set_fundname(const char* value);
  void set_fundname(const char* value, size_t size);
  std::string* mutable_fundname();
  std::string* release_fundname();
  void set_allocated_fundname(std::string* fundname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundname(
      std::string* fundname);
  private:
  const std::string& _internal_fundname() const;
  void _internal_set_fundname(const std::string& value);
  std::string* _internal_mutable_fundname();
  public:

  // string fundFamily = 28;
  bool has_fundfamily() const;
  private:
  bool _internal_has_fundfamily() const;
  public:
  void clear_fundfamily();
  const std::string& fundfamily() const;
  void set_fundfamily(const std::string& value);
  void set_fundfamily(std::string&& value);
  void set_fundfamily(const char* value);
  void set_fundfamily(const char* value, size_t size);
  std::string* mutable_fundfamily();
  std::string* release_fundfamily();
  void set_allocated_fundfamily(std::string* fundfamily);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundfamily();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundfamily(
      std::string* fundfamily);
  private:
  const std::string& _internal_fundfamily() const;
  void _internal_set_fundfamily(const std::string& value);
  std::string* _internal_mutable_fundfamily();
  public:

  // string fundType = 29;
  bool has_fundtype() const;
  private:
  bool _internal_has_fundtype() const;
  public:
  void clear_fundtype();
  const std::string& fundtype() const;
  void set_fundtype(const std::string& value);
  void set_fundtype(std::string&& value);
  void set_fundtype(const char* value);
  void set_fundtype(const char* value, size_t size);
  std::string* mutable_fundtype();
  std::string* release_fundtype();
  void set_allocated_fundtype(std::string* fundtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundtype(
      std::string* fundtype);
  private:
  const std::string& _internal_fundtype() const;
  void _internal_set_fundtype(const std::string& value);
  std::string* _internal_mutable_fundtype();
  public:

  // string fundFrontLoad = 30;
  bool has_fundfrontload() const;
  private:
  bool _internal_has_fundfrontload() const;
  public:
  void clear_fundfrontload();
  const std::string& fundfrontload() const;
  void set_fundfrontload(const std::string& value);
  void set_fundfrontload(std::string&& value);
  void set_fundfrontload(const char* value);
  void set_fundfrontload(const char* value, size_t size);
  std::string* mutable_fundfrontload();
  std::string* release_fundfrontload();
  void set_allocated_fundfrontload(std::string* fundfrontload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundfrontload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundfrontload(
      std::string* fundfrontload);
  private:
  const std::string& _internal_fundfrontload() const;
  void _internal_set_fundfrontload(const std::string& value);
  std::string* _internal_mutable_fundfrontload();
  public:

  // string fundBackLoad = 31;
  bool has_fundbackload() const;
  private:
  bool _internal_has_fundbackload() const;
  public:
  void clear_fundbackload();
  const std::string& fundbackload() const;
  void set_fundbackload(const std::string& value);
  void set_fundbackload(std::string&& value);
  void set_fundbackload(const char* value);
  void set_fundbackload(const char* value, size_t size);
  std::string* mutable_fundbackload();
  std::string* release_fundbackload();
  void set_allocated_fundbackload(std::string* fundbackload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundbackload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundbackload(
      std::string* fundbackload);
  private:
  const std::string& _internal_fundbackload() const;
  void _internal_set_fundbackload(const std::string& value);
  std::string* _internal_mutable_fundbackload();
  public:

  // string fundBackLoadTimeInterval = 32;
  bool has_fundbackloadtimeinterval() const;
  private:
  bool _internal_has_fundbackloadtimeinterval() const;
  public:
  void clear_fundbackloadtimeinterval();
  const std::string& fundbackloadtimeinterval() const;
  void set_fundbackloadtimeinterval(const std::string& value);
  void set_fundbackloadtimeinterval(std::string&& value);
  void set_fundbackloadtimeinterval(const char* value);
  void set_fundbackloadtimeinterval(const char* value, size_t size);
  std::string* mutable_fundbackloadtimeinterval();
  std::string* release_fundbackloadtimeinterval();
  void set_allocated_fundbackloadtimeinterval(std::string* fundbackloadtimeinterval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundbackloadtimeinterval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundbackloadtimeinterval(
      std::string* fundbackloadtimeinterval);
  private:
  const std::string& _internal_fundbackloadtimeinterval() const;
  void _internal_set_fundbackloadtimeinterval(const std::string& value);
  std::string* _internal_mutable_fundbackloadtimeinterval();
  public:

  // string fundManagementFee = 33;
  bool has_fundmanagementfee() const;
  private:
  bool _internal_has_fundmanagementfee() const;
  public:
  void clear_fundmanagementfee();
  const std::string& fundmanagementfee() const;
  void set_fundmanagementfee(const std::string& value);
  void set_fundmanagementfee(std::string&& value);
  void set_fundmanagementfee(const char* value);
  void set_fundmanagementfee(const char* value, size_t size);
  std::string* mutable_fundmanagementfee();
  std::string* release_fundmanagementfee();
  void set_allocated_fundmanagementfee(std::string* fundmanagementfee);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundmanagementfee();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundmanagementfee(
      std::string* fundmanagementfee);
  private:
  const std::string& _internal_fundmanagementfee() const;
  void _internal_set_fundmanagementfee(const std::string& value);
  std::string* _internal_mutable_fundmanagementfee();
  public:

  // string fundNotifyAmount = 37;
  bool has_fundnotifyamount() const;
  private:
  bool _internal_has_fundnotifyamount() const;
  public:
  void clear_fundnotifyamount();
  const std::string& fundnotifyamount() const;
  void set_fundnotifyamount(const std::string& value);
  void set_fundnotifyamount(std::string&& value);
  void set_fundnotifyamount(const char* value);
  void set_fundnotifyamount(const char* value, size_t size);
  std::string* mutable_fundnotifyamount();
  std::string* release_fundnotifyamount();
  void set_allocated_fundnotifyamount(std::string* fundnotifyamount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundnotifyamount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundnotifyamount(
      std::string* fundnotifyamount);
  private:
  const std::string& _internal_fundnotifyamount() const;
  void _internal_set_fundnotifyamount(const std::string& value);
  std::string* _internal_mutable_fundnotifyamount();
  public:

  // string fundMinimumInitialPurchase = 38;
  bool has_fundminimuminitialpurchase() const;
  private:
  bool _internal_has_fundminimuminitialpurchase() const;
  public:
  void clear_fundminimuminitialpurchase();
  const std::string& fundminimuminitialpurchase() const;
  void set_fundminimuminitialpurchase(const std::string& value);
  void set_fundminimuminitialpurchase(std::string&& value);
  void set_fundminimuminitialpurchase(const char* value);
  void set_fundminimuminitialpurchase(const char* value, size_t size);
  std::string* mutable_fundminimuminitialpurchase();
  std::string* release_fundminimuminitialpurchase();
  void set_allocated_fundminimuminitialpurchase(std::string* fundminimuminitialpurchase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundminimuminitialpurchase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundminimuminitialpurchase(
      std::string* fundminimuminitialpurchase);
  private:
  const std::string& _internal_fundminimuminitialpurchase() const;
  void _internal_set_fundminimuminitialpurchase(const std::string& value);
  std::string* _internal_mutable_fundminimuminitialpurchase();
  public:

  // string fundMinimumSubsequentPurchase = 39;
  bool has_fundminimumsubsequentpurchase() const;
  private:
  bool _internal_has_fundminimumsubsequentpurchase() const;
  public:
  void clear_fundminimumsubsequentpurchase();
  const std::string& fundminimumsubsequentpurchase() const;
  void set_fundminimumsubsequentpurchase(const std::string& value);
  void set_fundminimumsubsequentpurchase(std::string&& value);
  void set_fundminimumsubsequentpurchase(const char* value);
  void set_fundminimumsubsequentpurchase(const char* value, size_t size);
  std::string* mutable_fundminimumsubsequentpurchase();
  std::string* release_fundminimumsubsequentpurchase();
  void set_allocated_fundminimumsubsequentpurchase(std::string* fundminimumsubsequentpurchase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundminimumsubsequentpurchase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundminimumsubsequentpurchase(
      std::string* fundminimumsubsequentpurchase);
  private:
  const std::string& _internal_fundminimumsubsequentpurchase() const;
  void _internal_set_fundminimumsubsequentpurchase(const std::string& value);
  std::string* _internal_mutable_fundminimumsubsequentpurchase();
  public:

  // string fundBlueSkyStates = 40;
  bool has_fundblueskystates() const;
  private:
  bool _internal_has_fundblueskystates() const;
  public:
  void clear_fundblueskystates();
  const std::string& fundblueskystates() const;
  void set_fundblueskystates(const std::string& value);
  void set_fundblueskystates(std::string&& value);
  void set_fundblueskystates(const char* value);
  void set_fundblueskystates(const char* value, size_t size);
  std::string* mutable_fundblueskystates();
  std::string* release_fundblueskystates();
  void set_allocated_fundblueskystates(std::string* fundblueskystates);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundblueskystates();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundblueskystates(
      std::string* fundblueskystates);
  private:
  const std::string& _internal_fundblueskystates() const;
  void _internal_set_fundblueskystates(const std::string& value);
  std::string* _internal_mutable_fundblueskystates();
  public:

  // string fundBlueSkyTerritories = 41;
  bool has_fundblueskyterritories() const;
  private:
  bool _internal_has_fundblueskyterritories() const;
  public:
  void clear_fundblueskyterritories();
  const std::string& fundblueskyterritories() const;
  void set_fundblueskyterritories(const std::string& value);
  void set_fundblueskyterritories(std::string&& value);
  void set_fundblueskyterritories(const char* value);
  void set_fundblueskyterritories(const char* value, size_t size);
  std::string* mutable_fundblueskyterritories();
  std::string* release_fundblueskyterritories();
  void set_allocated_fundblueskyterritories(std::string* fundblueskyterritories);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundblueskyterritories();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundblueskyterritories(
      std::string* fundblueskyterritories);
  private:
  const std::string& _internal_fundblueskyterritories() const;
  void _internal_set_fundblueskyterritories(const std::string& value);
  std::string* _internal_mutable_fundblueskyterritories();
  public:

  // string fundDistributionPolicyIndicator = 42;
  bool has_funddistributionpolicyindicator() const;
  private:
  bool _internal_has_funddistributionpolicyindicator() const;
  public:
  void clear_funddistributionpolicyindicator();
  const std::string& funddistributionpolicyindicator() const;
  void set_funddistributionpolicyindicator(const std::string& value);
  void set_funddistributionpolicyindicator(std::string&& value);
  void set_funddistributionpolicyindicator(const char* value);
  void set_funddistributionpolicyindicator(const char* value, size_t size);
  std::string* mutable_funddistributionpolicyindicator();
  std::string* release_funddistributionpolicyindicator();
  void set_allocated_funddistributionpolicyindicator(std::string* funddistributionpolicyindicator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_funddistributionpolicyindicator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_funddistributionpolicyindicator(
      std::string* funddistributionpolicyindicator);
  private:
  const std::string& _internal_funddistributionpolicyindicator() const;
  void _internal_set_funddistributionpolicyindicator(const std::string& value);
  std::string* _internal_mutable_funddistributionpolicyindicator();
  public:

  // string fundAssetType = 43;
  bool has_fundassettype() const;
  private:
  bool _internal_has_fundassettype() const;
  public:
  void clear_fundassettype();
  const std::string& fundassettype() const;
  void set_fundassettype(const std::string& value);
  void set_fundassettype(std::string&& value);
  void set_fundassettype(const char* value);
  void set_fundassettype(const char* value, size_t size);
  std::string* mutable_fundassettype();
  std::string* release_fundassettype();
  void set_allocated_fundassettype(std::string* fundassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fundassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fundassettype(
      std::string* fundassettype);
  private:
  const std::string& _internal_fundassettype() const;
  void _internal_set_fundassettype(const std::string& value);
  std::string* _internal_mutable_fundassettype();
  public:

  // string cusip = 44;
  bool has_cusip() const;
  private:
  bool _internal_has_cusip() const;
  public:
  void clear_cusip();
  const std::string& cusip() const;
  void set_cusip(const std::string& value);
  void set_cusip(std::string&& value);
  void set_cusip(const char* value);
  void set_cusip(const char* value, size_t size);
  std::string* mutable_cusip();
  std::string* release_cusip();
  void set_allocated_cusip(std::string* cusip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cusip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cusip(
      std::string* cusip);
  private:
  const std::string& _internal_cusip() const;
  void _internal_set_cusip(const std::string& value);
  std::string* _internal_mutable_cusip();
  public:

  // string issueDate = 45;
  bool has_issuedate() const;
  private:
  bool _internal_has_issuedate() const;
  public:
  void clear_issuedate();
  const std::string& issuedate() const;
  void set_issuedate(const std::string& value);
  void set_issuedate(std::string&& value);
  void set_issuedate(const char* value);
  void set_issuedate(const char* value, size_t size);
  std::string* mutable_issuedate();
  std::string* release_issuedate();
  void set_allocated_issuedate(std::string* issuedate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_issuedate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_issuedate(
      std::string* issuedate);
  private:
  const std::string& _internal_issuedate() const;
  void _internal_set_issuedate(const std::string& value);
  std::string* _internal_mutable_issuedate();
  public:

  // string ratings = 46;
  bool has_ratings() const;
  private:
  bool _internal_has_ratings() const;
  public:
  void clear_ratings();
  const std::string& ratings() const;
  void set_ratings(const std::string& value);
  void set_ratings(std::string&& value);
  void set_ratings(const char* value);
  void set_ratings(const char* value, size_t size);
  std::string* mutable_ratings();
  std::string* release_ratings();
  void set_allocated_ratings(std::string* ratings);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ratings();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ratings(
      std::string* ratings);
  private:
  const std::string& _internal_ratings() const;
  void _internal_set_ratings(const std::string& value);
  std::string* _internal_mutable_ratings();
  public:

  // string bondType = 47;
  bool has_bondtype() const;
  private:
  bool _internal_has_bondtype() const;
  public:
  void clear_bondtype();
  const std::string& bondtype() const;
  void set_bondtype(const std::string& value);
  void set_bondtype(std::string&& value);
  void set_bondtype(const char* value);
  void set_bondtype(const char* value, size_t size);
  std::string* mutable_bondtype();
  std::string* release_bondtype();
  void set_allocated_bondtype(std::string* bondtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bondtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bondtype(
      std::string* bondtype);
  private:
  const std::string& _internal_bondtype() const;
  void _internal_set_bondtype(const std::string& value);
  std::string* _internal_mutable_bondtype();
  public:

  // string couponType = 49;
  bool has_coupontype() const;
  private:
  bool _internal_has_coupontype() const;
  public:
  void clear_coupontype();
  const std::string& coupontype() const;
  void set_coupontype(const std::string& value);
  void set_coupontype(std::string&& value);
  void set_coupontype(const char* value);
  void set_coupontype(const char* value, size_t size);
  std::string* mutable_coupontype();
  std::string* release_coupontype();
  void set_allocated_coupontype(std::string* coupontype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_coupontype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_coupontype(
      std::string* coupontype);
  private:
  const std::string& _internal_coupontype() const;
  void _internal_set_coupontype(const std::string& value);
  std::string* _internal_mutable_coupontype();
  public:

  // string descAppend = 53;
  bool has_descappend() const;
  private:
  bool _internal_has_descappend() const;
  public:
  void clear_descappend();
  const std::string& descappend() const;
  void set_descappend(const std::string& value);
  void set_descappend(std::string&& value);
  void set_descappend(const char* value);
  void set_descappend(const char* value, size_t size);
  std::string* mutable_descappend();
  std::string* release_descappend();
  void set_allocated_descappend(std::string* descappend);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_descappend();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_descappend(
      std::string* descappend);
  private:
  const std::string& _internal_descappend() const;
  void _internal_set_descappend(const std::string& value);
  std::string* _internal_mutable_descappend();
  public:

  // string nextOptionDate = 54;
  bool has_nextoptiondate() const;
  private:
  bool _internal_has_nextoptiondate() const;
  public:
  void clear_nextoptiondate();
  const std::string& nextoptiondate() const;
  void set_nextoptiondate(const std::string& value);
  void set_nextoptiondate(std::string&& value);
  void set_nextoptiondate(const char* value);
  void set_nextoptiondate(const char* value, size_t size);
  std::string* mutable_nextoptiondate();
  std::string* release_nextoptiondate();
  void set_allocated_nextoptiondate(std::string* nextoptiondate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nextoptiondate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nextoptiondate(
      std::string* nextoptiondate);
  private:
  const std::string& _internal_nextoptiondate() const;
  void _internal_set_nextoptiondate(const std::string& value);
  std::string* _internal_mutable_nextoptiondate();
  public:

  // string nextOptionType = 55;
  bool has_nextoptiontype() const;
  private:
  bool _internal_has_nextoptiontype() const;
  public:
  void clear_nextoptiontype();
  const std::string& nextoptiontype() const;
  void set_nextoptiontype(const std::string& value);
  void set_nextoptiontype(std::string&& value);
  void set_nextoptiontype(const char* value);
  void set_nextoptiontype(const char* value, size_t size);
  std::string* mutable_nextoptiontype();
  std::string* release_nextoptiontype();
  void set_allocated_nextoptiontype(std::string* nextoptiontype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nextoptiontype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nextoptiontype(
      std::string* nextoptiontype);
  private:
  const std::string& _internal_nextoptiontype() const;
  void _internal_set_nextoptiontype(const std::string& value);
  std::string* _internal_mutable_nextoptiontype();
  public:

  // string bondNotes = 57;
  bool has_bondnotes() const;
  private:
  bool _internal_has_bondnotes() const;
  public:
  void clear_bondnotes();
  const std::string& bondnotes() const;
  void set_bondnotes(const std::string& value);
  void set_bondnotes(std::string&& value);
  void set_bondnotes(const char* value);
  void set_bondnotes(const char* value, size_t size);
  std::string* mutable_bondnotes();
  std::string* release_bondnotes();
  void set_allocated_bondnotes(std::string* bondnotes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bondnotes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bondnotes(
      std::string* bondnotes);
  private:
  const std::string& _internal_bondnotes() const;
  void _internal_set_bondnotes(const std::string& value);
  std::string* _internal_mutable_bondnotes();
  public:

  // int32 priceMagnifier = 5;
  bool has_pricemagnifier() const;
  private:
  bool _internal_has_pricemagnifier() const;
  public:
  void clear_pricemagnifier();
  ::PROTOBUF_NAMESPACE_ID::int32 pricemagnifier() const;
  void set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pricemagnifier() const;
  void _internal_set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 underConId = 6;
  bool has_underconid() const;
  private:
  bool _internal_has_underconid() const;
  public:
  void clear_underconid();
  ::PROTOBUF_NAMESPACE_ID::int32 underconid() const;
  void set_underconid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_underconid() const;
  void _internal_set_underconid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double evMultiplier = 16;
  bool has_evmultiplier() const;
  private:
  bool _internal_has_evmultiplier() const;
  public:
  void clear_evmultiplier();
  double evmultiplier() const;
  void set_evmultiplier(double value);
  private:
  double _internal_evmultiplier() const;
  void _internal_set_evmultiplier(double value);
  public:

  // int32 aggGroup = 18;
  bool has_agggroup() const;
  private:
  bool _internal_has_agggroup() const;
  public:
  void clear_agggroup();
  ::PROTOBUF_NAMESPACE_ID::int32 agggroup() const;
  void set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agggroup() const;
  void _internal_set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool fundClosed = 34;
  bool has_fundclosed() const;
  private:
  bool _internal_has_fundclosed() const;
  public:
  void clear_fundclosed();
  bool fundclosed() const;
  void set_fundclosed(bool value);
  private:
  bool _internal_fundclosed() const;
  void _internal_set_fundclosed(bool value);
  public:

  // bool fundClosedForNewInvestors = 35;
  bool has_fundclosedfornewinvestors() const;
  private:
  bool _internal_has_fundclosedfornewinvestors() const;
  public:
  void clear_fundclosedfornewinvestors();
  bool fundclosedfornewinvestors() const;
  void set_fundclosedfornewinvestors(bool value);
  private:
  bool _internal_fundclosedfornewinvestors() const;
  void _internal_set_fundclosedfornewinvestors(bool value);
  public:

  // bool fundClosedForNewMoney = 36;
  bool has_fundclosedfornewmoney() const;
  private:
  bool _internal_has_fundclosedfornewmoney() const;
  public:
  void clear_fundclosedfornewmoney();
  bool fundclosedfornewmoney() const;
  void set_fundclosedfornewmoney(bool value);
  private:
  bool _internal_fundclosedfornewmoney() const;
  void _internal_set_fundclosedfornewmoney(bool value);
  public:

  // bool convertible = 50;
  bool has_convertible() const;
  private:
  bool _internal_has_convertible() const;
  public:
  void clear_convertible();
  bool convertible() const;
  void set_convertible(bool value);
  private:
  bool _internal_convertible() const;
  void _internal_set_convertible(bool value);
  public:

  // double coupon = 48;
  bool has_coupon() const;
  private:
  bool _internal_has_coupon() const;
  public:
  void clear_coupon();
  double coupon() const;
  void set_coupon(double value);
  private:
  double _internal_coupon() const;
  void _internal_set_coupon(double value);
  public:

  // bool callable = 51;
  bool has_callable() const;
  private:
  bool _internal_has_callable() const;
  public:
  void clear_callable();
  bool callable() const;
  void set_callable(bool value);
  private:
  bool _internal_callable() const;
  void _internal_set_callable(bool value);
  public:

  // bool puttable = 52;
  bool has_puttable() const;
  private:
  bool _internal_has_puttable() const;
  public:
  void clear_puttable();
  bool puttable() const;
  void set_puttable(bool value);
  private:
  bool _internal_puttable() const;
  void _internal_set_puttable(bool value);
  public:

  // bool nextOptionPartial = 56;
  bool has_nextoptionpartial() const;
  private:
  bool _internal_has_nextoptionpartial() const;
  public:
  void clear_nextoptionpartial();
  bool nextoptionpartial() const;
  void set_nextoptionpartial(bool value);
  private:
  bool _internal_nextoptionpartial() const;
  void _internal_set_nextoptionpartial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.ContractDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContractDetails_SecIdListEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > secidlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::IneligibilityReason > ineligibilityreasonlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mintick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertypes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validexchanges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractmonth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr industry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subcategory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezoneid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradinghours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liquidhours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evrule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undersymbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undersectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketruleids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realexpirationdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stocktype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minsize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sizeincrement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggestedsizeincrement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundfamily_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundfrontload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundbackload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundbackloadtimeinterval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundmanagementfee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundnotifyamount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundminimuminitialpurchase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundminimumsubsequentpurchase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundblueskystates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundblueskyterritories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funddistributionpolicyindicator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cusip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ratings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coupontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descappend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextoptiondate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextoptiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondnotes_;
  ::PROTOBUF_NAMESPACE_ID::int32 pricemagnifier_;
  ::PROTOBUF_NAMESPACE_ID::int32 underconid_;
  double evmultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 agggroup_;
  bool fundclosed_;
  bool fundclosedfornewinvestors_;
  bool fundclosedfornewmoney_;
  bool convertible_;
  double coupon_;
  bool callable_;
  bool puttable_;
  bool nextoptionpartial_;
  friend struct ::TableStruct_ContractDetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ContractDetails

// string marketName = 1;
inline bool ContractDetails::_internal_has_marketname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractDetails::has_marketname() const {
  return _internal_has_marketname();
}
inline void ContractDetails::clear_marketname() {
  marketname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractDetails::marketname() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.marketName)
  return _internal_marketname();
}
inline void ContractDetails::set_marketname(const std::string& value) {
  _internal_set_marketname(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.marketName)
}
inline std::string* ContractDetails::mutable_marketname() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.marketName)
  return _internal_mutable_marketname();
}
inline const std::string& ContractDetails::_internal_marketname() const {
  return marketname_.Get();
}
inline void ContractDetails::_internal_set_marketname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  marketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_marketname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  marketname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.marketName)
}
inline void ContractDetails::set_marketname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  marketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.marketName)
}
inline void ContractDetails::set_marketname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  marketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.marketName)
}
inline std::string* ContractDetails::_internal_mutable_marketname() {
  _has_bits_[0] |= 0x00000001u;
  return marketname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_marketname() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.marketName)
  if (!_internal_has_marketname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return marketname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_marketname(std::string* marketname) {
  if (marketname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marketname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.marketName)
}
inline std::string* ContractDetails::unsafe_arena_release_marketname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.marketName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return marketname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_marketname(
    std::string* marketname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (marketname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marketname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      marketname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.marketName)
}

// string minTick = 2;
inline bool ContractDetails::_internal_has_mintick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractDetails::has_mintick() const {
  return _internal_has_mintick();
}
inline void ContractDetails::clear_mintick() {
  mintick_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContractDetails::mintick() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.minTick)
  return _internal_mintick();
}
inline void ContractDetails::set_mintick(const std::string& value) {
  _internal_set_mintick(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.minTick)
}
inline std::string* ContractDetails::mutable_mintick() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.minTick)
  return _internal_mutable_mintick();
}
inline const std::string& ContractDetails::_internal_mintick() const {
  return mintick_.Get();
}
inline void ContractDetails::_internal_set_mintick(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mintick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_mintick(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mintick_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.minTick)
}
inline void ContractDetails::set_mintick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mintick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.minTick)
}
inline void ContractDetails::set_mintick(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mintick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.minTick)
}
inline std::string* ContractDetails::_internal_mutable_mintick() {
  _has_bits_[0] |= 0x00000002u;
  return mintick_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_mintick() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.minTick)
  if (!_internal_has_mintick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mintick_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_mintick(std::string* mintick) {
  if (mintick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mintick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mintick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.minTick)
}
inline std::string* ContractDetails::unsafe_arena_release_mintick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.minTick)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mintick_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_mintick(
    std::string* mintick) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mintick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mintick_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mintick, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.minTick)
}

// string orderTypes = 3;
inline bool ContractDetails::_internal_has_ordertypes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContractDetails::has_ordertypes() const {
  return _internal_has_ordertypes();
}
inline void ContractDetails::clear_ordertypes() {
  ordertypes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContractDetails::ordertypes() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.orderTypes)
  return _internal_ordertypes();
}
inline void ContractDetails::set_ordertypes(const std::string& value) {
  _internal_set_ordertypes(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.orderTypes)
}
inline std::string* ContractDetails::mutable_ordertypes() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.orderTypes)
  return _internal_mutable_ordertypes();
}
inline const std::string& ContractDetails::_internal_ordertypes() const {
  return ordertypes_.Get();
}
inline void ContractDetails::_internal_set_ordertypes(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ordertypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_ordertypes(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ordertypes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.orderTypes)
}
inline void ContractDetails::set_ordertypes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ordertypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.orderTypes)
}
inline void ContractDetails::set_ordertypes(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ordertypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.orderTypes)
}
inline std::string* ContractDetails::_internal_mutable_ordertypes() {
  _has_bits_[0] |= 0x00000004u;
  return ordertypes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_ordertypes() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.orderTypes)
  if (!_internal_has_ordertypes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ordertypes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_ordertypes(std::string* ordertypes) {
  if (ordertypes != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ordertypes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertypes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.orderTypes)
}
inline std::string* ContractDetails::unsafe_arena_release_ordertypes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.orderTypes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ordertypes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_ordertypes(
    std::string* ordertypes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordertypes != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ordertypes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordertypes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.orderTypes)
}

// string validExchanges = 4;
inline bool ContractDetails::_internal_has_validexchanges() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContractDetails::has_validexchanges() const {
  return _internal_has_validexchanges();
}
inline void ContractDetails::clear_validexchanges() {
  validexchanges_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContractDetails::validexchanges() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.validExchanges)
  return _internal_validexchanges();
}
inline void ContractDetails::set_validexchanges(const std::string& value) {
  _internal_set_validexchanges(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.validExchanges)
}
inline std::string* ContractDetails::mutable_validexchanges() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.validExchanges)
  return _internal_mutable_validexchanges();
}
inline const std::string& ContractDetails::_internal_validexchanges() const {
  return validexchanges_.Get();
}
inline void ContractDetails::_internal_set_validexchanges(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  validexchanges_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_validexchanges(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  validexchanges_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.validExchanges)
}
inline void ContractDetails::set_validexchanges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  validexchanges_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.validExchanges)
}
inline void ContractDetails::set_validexchanges(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  validexchanges_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.validExchanges)
}
inline std::string* ContractDetails::_internal_mutable_validexchanges() {
  _has_bits_[0] |= 0x00000008u;
  return validexchanges_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_validexchanges() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.validExchanges)
  if (!_internal_has_validexchanges()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return validexchanges_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_validexchanges(std::string* validexchanges) {
  if (validexchanges != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  validexchanges_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validexchanges,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.validExchanges)
}
inline std::string* ContractDetails::unsafe_arena_release_validexchanges() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.validExchanges)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return validexchanges_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_validexchanges(
    std::string* validexchanges) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (validexchanges != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  validexchanges_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      validexchanges, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.validExchanges)
}

// int32 priceMagnifier = 5;
inline bool ContractDetails::_internal_has_pricemagnifier() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ContractDetails::has_pricemagnifier() const {
  return _internal_has_pricemagnifier();
}
inline void ContractDetails::clear_pricemagnifier() {
  pricemagnifier_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_pricemagnifier() const {
  return pricemagnifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::pricemagnifier() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.priceMagnifier)
  return _internal_pricemagnifier();
}
inline void ContractDetails::_internal_set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  pricemagnifier_ = value;
}
inline void ContractDetails::set_pricemagnifier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pricemagnifier(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.priceMagnifier)
}

// int32 underConId = 6;
inline bool ContractDetails::_internal_has_underconid() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ContractDetails::has_underconid() const {
  return _internal_has_underconid();
}
inline void ContractDetails::clear_underconid() {
  underconid_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_underconid() const {
  return underconid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::underconid() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.underConId)
  return _internal_underconid();
}
inline void ContractDetails::_internal_set_underconid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  underconid_ = value;
}
inline void ContractDetails::set_underconid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_underconid(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.underConId)
}

// string longName = 7;
inline bool ContractDetails::_internal_has_longname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContractDetails::has_longname() const {
  return _internal_has_longname();
}
inline void ContractDetails::clear_longname() {
  longname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ContractDetails::longname() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.longName)
  return _internal_longname();
}
inline void ContractDetails::set_longname(const std::string& value) {
  _internal_set_longname(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.longName)
}
inline std::string* ContractDetails::mutable_longname() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.longName)
  return _internal_mutable_longname();
}
inline const std::string& ContractDetails::_internal_longname() const {
  return longname_.Get();
}
inline void ContractDetails::_internal_set_longname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_longname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  longname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.longName)
}
inline void ContractDetails::set_longname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.longName)
}
inline void ContractDetails::set_longname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.longName)
}
inline std::string* ContractDetails::_internal_mutable_longname() {
  _has_bits_[0] |= 0x00000010u;
  return longname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_longname() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.longName)
  if (!_internal_has_longname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return longname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_longname(std::string* longname) {
  if (longname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  longname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.longName)
}
inline std::string* ContractDetails::unsafe_arena_release_longname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.longName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return longname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_longname(
    std::string* longname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (longname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  longname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      longname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.longName)
}

// string contractMonth = 8;
inline bool ContractDetails::_internal_has_contractmonth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContractDetails::has_contractmonth() const {
  return _internal_has_contractmonth();
}
inline void ContractDetails::clear_contractmonth() {
  contractmonth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ContractDetails::contractmonth() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.contractMonth)
  return _internal_contractmonth();
}
inline void ContractDetails::set_contractmonth(const std::string& value) {
  _internal_set_contractmonth(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.contractMonth)
}
inline std::string* ContractDetails::mutable_contractmonth() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.contractMonth)
  return _internal_mutable_contractmonth();
}
inline const std::string& ContractDetails::_internal_contractmonth() const {
  return contractmonth_.Get();
}
inline void ContractDetails::_internal_set_contractmonth(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  contractmonth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_contractmonth(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  contractmonth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.contractMonth)
}
inline void ContractDetails::set_contractmonth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  contractmonth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.contractMonth)
}
inline void ContractDetails::set_contractmonth(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  contractmonth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.contractMonth)
}
inline std::string* ContractDetails::_internal_mutable_contractmonth() {
  _has_bits_[0] |= 0x00000020u;
  return contractmonth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_contractmonth() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.contractMonth)
  if (!_internal_has_contractmonth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return contractmonth_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_contractmonth(std::string* contractmonth) {
  if (contractmonth != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  contractmonth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractmonth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.contractMonth)
}
inline std::string* ContractDetails::unsafe_arena_release_contractmonth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.contractMonth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return contractmonth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_contractmonth(
    std::string* contractmonth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractmonth != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  contractmonth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractmonth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.contractMonth)
}

// string industry = 9;
inline bool ContractDetails::_internal_has_industry() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ContractDetails::has_industry() const {
  return _internal_has_industry();
}
inline void ContractDetails::clear_industry() {
  industry_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ContractDetails::industry() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.industry)
  return _internal_industry();
}
inline void ContractDetails::set_industry(const std::string& value) {
  _internal_set_industry(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.industry)
}
inline std::string* ContractDetails::mutable_industry() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.industry)
  return _internal_mutable_industry();
}
inline const std::string& ContractDetails::_internal_industry() const {
  return industry_.Get();
}
inline void ContractDetails::_internal_set_industry(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  industry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_industry(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  industry_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.industry)
}
inline void ContractDetails::set_industry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  industry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.industry)
}
inline void ContractDetails::set_industry(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  industry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.industry)
}
inline std::string* ContractDetails::_internal_mutable_industry() {
  _has_bits_[0] |= 0x00000040u;
  return industry_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_industry() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.industry)
  if (!_internal_has_industry()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return industry_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_industry(std::string* industry) {
  if (industry != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  industry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), industry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.industry)
}
inline std::string* ContractDetails::unsafe_arena_release_industry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.industry)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return industry_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_industry(
    std::string* industry) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (industry != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  industry_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      industry, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.industry)
}

// string category = 10;
inline bool ContractDetails::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ContractDetails::has_category() const {
  return _internal_has_category();
}
inline void ContractDetails::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ContractDetails::category() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.category)
  return _internal_category();
}
inline void ContractDetails::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.category)
}
inline std::string* ContractDetails::mutable_category() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.category)
  return _internal_mutable_category();
}
inline const std::string& ContractDetails::_internal_category() const {
  return category_.Get();
}
inline void ContractDetails::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.category)
}
inline void ContractDetails::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.category)
}
inline void ContractDetails::set_category(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.category)
}
inline std::string* ContractDetails::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000080u;
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_category() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.category)
}
inline std::string* ContractDetails::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.category)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return category_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_category(
    std::string* category) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  category_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.category)
}

// string subcategory = 11;
inline bool ContractDetails::_internal_has_subcategory() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ContractDetails::has_subcategory() const {
  return _internal_has_subcategory();
}
inline void ContractDetails::clear_subcategory() {
  subcategory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ContractDetails::subcategory() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.subcategory)
  return _internal_subcategory();
}
inline void ContractDetails::set_subcategory(const std::string& value) {
  _internal_set_subcategory(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.subcategory)
}
inline std::string* ContractDetails::mutable_subcategory() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.subcategory)
  return _internal_mutable_subcategory();
}
inline const std::string& ContractDetails::_internal_subcategory() const {
  return subcategory_.Get();
}
inline void ContractDetails::_internal_set_subcategory(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  subcategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_subcategory(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  subcategory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.subcategory)
}
inline void ContractDetails::set_subcategory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  subcategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.subcategory)
}
inline void ContractDetails::set_subcategory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  subcategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.subcategory)
}
inline std::string* ContractDetails::_internal_mutable_subcategory() {
  _has_bits_[0] |= 0x00000100u;
  return subcategory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_subcategory() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.subcategory)
  if (!_internal_has_subcategory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return subcategory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_subcategory(std::string* subcategory) {
  if (subcategory != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  subcategory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subcategory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.subcategory)
}
inline std::string* ContractDetails::unsafe_arena_release_subcategory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.subcategory)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return subcategory_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_subcategory(
    std::string* subcategory) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subcategory != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  subcategory_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subcategory, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.subcategory)
}

// string timeZoneId = 12;
inline bool ContractDetails::_internal_has_timezoneid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ContractDetails::has_timezoneid() const {
  return _internal_has_timezoneid();
}
inline void ContractDetails::clear_timezoneid() {
  timezoneid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ContractDetails::timezoneid() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.timeZoneId)
  return _internal_timezoneid();
}
inline void ContractDetails::set_timezoneid(const std::string& value) {
  _internal_set_timezoneid(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.timeZoneId)
}
inline std::string* ContractDetails::mutable_timezoneid() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.timeZoneId)
  return _internal_mutable_timezoneid();
}
inline const std::string& ContractDetails::_internal_timezoneid() const {
  return timezoneid_.Get();
}
inline void ContractDetails::_internal_set_timezoneid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  timezoneid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_timezoneid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  timezoneid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.timeZoneId)
}
inline void ContractDetails::set_timezoneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  timezoneid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.timeZoneId)
}
inline void ContractDetails::set_timezoneid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  timezoneid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.timeZoneId)
}
inline std::string* ContractDetails::_internal_mutable_timezoneid() {
  _has_bits_[0] |= 0x00000200u;
  return timezoneid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_timezoneid() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.timeZoneId)
  if (!_internal_has_timezoneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return timezoneid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_timezoneid(std::string* timezoneid) {
  if (timezoneid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  timezoneid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezoneid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.timeZoneId)
}
inline std::string* ContractDetails::unsafe_arena_release_timezoneid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.timeZoneId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return timezoneid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_timezoneid(
    std::string* timezoneid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezoneid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  timezoneid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezoneid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.timeZoneId)
}

// string tradingHours = 13;
inline bool ContractDetails::_internal_has_tradinghours() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ContractDetails::has_tradinghours() const {
  return _internal_has_tradinghours();
}
inline void ContractDetails::clear_tradinghours() {
  tradinghours_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& ContractDetails::tradinghours() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.tradingHours)
  return _internal_tradinghours();
}
inline void ContractDetails::set_tradinghours(const std::string& value) {
  _internal_set_tradinghours(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.tradingHours)
}
inline std::string* ContractDetails::mutable_tradinghours() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.tradingHours)
  return _internal_mutable_tradinghours();
}
inline const std::string& ContractDetails::_internal_tradinghours() const {
  return tradinghours_.Get();
}
inline void ContractDetails::_internal_set_tradinghours(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  tradinghours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_tradinghours(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  tradinghours_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.tradingHours)
}
inline void ContractDetails::set_tradinghours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  tradinghours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.tradingHours)
}
inline void ContractDetails::set_tradinghours(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  tradinghours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.tradingHours)
}
inline std::string* ContractDetails::_internal_mutable_tradinghours() {
  _has_bits_[0] |= 0x00000400u;
  return tradinghours_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_tradinghours() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.tradingHours)
  if (!_internal_has_tradinghours()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return tradinghours_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_tradinghours(std::string* tradinghours) {
  if (tradinghours != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tradinghours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradinghours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.tradingHours)
}
inline std::string* ContractDetails::unsafe_arena_release_tradinghours() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.tradingHours)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return tradinghours_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_tradinghours(
    std::string* tradinghours) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tradinghours != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tradinghours_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tradinghours, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.tradingHours)
}

// string liquidHours = 14;
inline bool ContractDetails::_internal_has_liquidhours() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ContractDetails::has_liquidhours() const {
  return _internal_has_liquidhours();
}
inline void ContractDetails::clear_liquidhours() {
  liquidhours_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& ContractDetails::liquidhours() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.liquidHours)
  return _internal_liquidhours();
}
inline void ContractDetails::set_liquidhours(const std::string& value) {
  _internal_set_liquidhours(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.liquidHours)
}
inline std::string* ContractDetails::mutable_liquidhours() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.liquidHours)
  return _internal_mutable_liquidhours();
}
inline const std::string& ContractDetails::_internal_liquidhours() const {
  return liquidhours_.Get();
}
inline void ContractDetails::_internal_set_liquidhours(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  liquidhours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_liquidhours(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  liquidhours_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.liquidHours)
}
inline void ContractDetails::set_liquidhours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  liquidhours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.liquidHours)
}
inline void ContractDetails::set_liquidhours(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  liquidhours_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.liquidHours)
}
inline std::string* ContractDetails::_internal_mutable_liquidhours() {
  _has_bits_[0] |= 0x00000800u;
  return liquidhours_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_liquidhours() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.liquidHours)
  if (!_internal_has_liquidhours()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return liquidhours_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_liquidhours(std::string* liquidhours) {
  if (liquidhours != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  liquidhours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liquidhours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.liquidHours)
}
inline std::string* ContractDetails::unsafe_arena_release_liquidhours() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.liquidHours)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return liquidhours_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_liquidhours(
    std::string* liquidhours) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (liquidhours != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  liquidhours_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      liquidhours, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.liquidHours)
}

// string evRule = 15;
inline bool ContractDetails::_internal_has_evrule() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ContractDetails::has_evrule() const {
  return _internal_has_evrule();
}
inline void ContractDetails::clear_evrule() {
  evrule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& ContractDetails::evrule() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.evRule)
  return _internal_evrule();
}
inline void ContractDetails::set_evrule(const std::string& value) {
  _internal_set_evrule(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.evRule)
}
inline std::string* ContractDetails::mutable_evrule() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.evRule)
  return _internal_mutable_evrule();
}
inline const std::string& ContractDetails::_internal_evrule() const {
  return evrule_.Get();
}
inline void ContractDetails::_internal_set_evrule(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  evrule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_evrule(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  evrule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.evRule)
}
inline void ContractDetails::set_evrule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  evrule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.evRule)
}
inline void ContractDetails::set_evrule(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  evrule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.evRule)
}
inline std::string* ContractDetails::_internal_mutable_evrule() {
  _has_bits_[0] |= 0x00001000u;
  return evrule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_evrule() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.evRule)
  if (!_internal_has_evrule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return evrule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_evrule(std::string* evrule) {
  if (evrule != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  evrule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evrule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.evRule)
}
inline std::string* ContractDetails::unsafe_arena_release_evrule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.evRule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return evrule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_evrule(
    std::string* evrule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (evrule != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  evrule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      evrule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.evRule)
}

// double evMultiplier = 16;
inline bool ContractDetails::_internal_has_evmultiplier() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ContractDetails::has_evmultiplier() const {
  return _internal_has_evmultiplier();
}
inline void ContractDetails::clear_evmultiplier() {
  evmultiplier_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline double ContractDetails::_internal_evmultiplier() const {
  return evmultiplier_;
}
inline double ContractDetails::evmultiplier() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.evMultiplier)
  return _internal_evmultiplier();
}
inline void ContractDetails::_internal_set_evmultiplier(double value) {
  _has_bits_[1] |= 0x00004000u;
  evmultiplier_ = value;
}
inline void ContractDetails::set_evmultiplier(double value) {
  _internal_set_evmultiplier(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.evMultiplier)
}

// map<string, string> secIdList = 17;
inline int ContractDetails::_internal_secidlist_size() const {
  return secidlist_.size();
}
inline int ContractDetails::secidlist_size() const {
  return _internal_secidlist_size();
}
inline void ContractDetails::clear_secidlist() {
  secidlist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContractDetails::_internal_secidlist() const {
  return secidlist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContractDetails::secidlist() const {
  // @@protoc_insertion_point(field_map:protobuf.ContractDetails.secIdList)
  return _internal_secidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContractDetails::_internal_mutable_secidlist() {
  return secidlist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContractDetails::mutable_secidlist() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.ContractDetails.secIdList)
  return _internal_mutable_secidlist();
}

// int32 aggGroup = 18;
inline bool ContractDetails::_internal_has_agggroup() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ContractDetails::has_agggroup() const {
  return _internal_has_agggroup();
}
inline void ContractDetails::clear_agggroup() {
  agggroup_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::_internal_agggroup() const {
  return agggroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetails::agggroup() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.aggGroup)
  return _internal_agggroup();
}
inline void ContractDetails::_internal_set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  agggroup_ = value;
}
inline void ContractDetails::set_agggroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agggroup(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.aggGroup)
}

// string underSymbol = 19;
inline bool ContractDetails::_internal_has_undersymbol() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ContractDetails::has_undersymbol() const {
  return _internal_has_undersymbol();
}
inline void ContractDetails::clear_undersymbol() {
  undersymbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& ContractDetails::undersymbol() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.underSymbol)
  return _internal_undersymbol();
}
inline void ContractDetails::set_undersymbol(const std::string& value) {
  _internal_set_undersymbol(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.underSymbol)
}
inline std::string* ContractDetails::mutable_undersymbol() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.underSymbol)
  return _internal_mutable_undersymbol();
}
inline const std::string& ContractDetails::_internal_undersymbol() const {
  return undersymbol_.Get();
}
inline void ContractDetails::_internal_set_undersymbol(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  undersymbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_undersymbol(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  undersymbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.underSymbol)
}
inline void ContractDetails::set_undersymbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  undersymbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.underSymbol)
}
inline void ContractDetails::set_undersymbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  undersymbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.underSymbol)
}
inline std::string* ContractDetails::_internal_mutable_undersymbol() {
  _has_bits_[0] |= 0x00002000u;
  return undersymbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_undersymbol() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.underSymbol)
  if (!_internal_has_undersymbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return undersymbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_undersymbol(std::string* undersymbol) {
  if (undersymbol != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  undersymbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undersymbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.underSymbol)
}
inline std::string* ContractDetails::unsafe_arena_release_undersymbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.underSymbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return undersymbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_undersymbol(
    std::string* undersymbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (undersymbol != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  undersymbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      undersymbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.underSymbol)
}

// string underSecType = 20;
inline bool ContractDetails::_internal_has_undersectype() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ContractDetails::has_undersectype() const {
  return _internal_has_undersectype();
}
inline void ContractDetails::clear_undersectype() {
  undersectype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& ContractDetails::undersectype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.underSecType)
  return _internal_undersectype();
}
inline void ContractDetails::set_undersectype(const std::string& value) {
  _internal_set_undersectype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.underSecType)
}
inline std::string* ContractDetails::mutable_undersectype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.underSecType)
  return _internal_mutable_undersectype();
}
inline const std::string& ContractDetails::_internal_undersectype() const {
  return undersectype_.Get();
}
inline void ContractDetails::_internal_set_undersectype(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  undersectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_undersectype(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  undersectype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.underSecType)
}
inline void ContractDetails::set_undersectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  undersectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.underSecType)
}
inline void ContractDetails::set_undersectype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  undersectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.underSecType)
}
inline std::string* ContractDetails::_internal_mutable_undersectype() {
  _has_bits_[0] |= 0x00004000u;
  return undersectype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_undersectype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.underSecType)
  if (!_internal_has_undersectype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return undersectype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_undersectype(std::string* undersectype) {
  if (undersectype != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  undersectype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undersectype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.underSecType)
}
inline std::string* ContractDetails::unsafe_arena_release_undersectype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.underSecType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return undersectype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_undersectype(
    std::string* undersectype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (undersectype != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  undersectype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      undersectype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.underSecType)
}

// string marketRuleIds = 21;
inline bool ContractDetails::_internal_has_marketruleids() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ContractDetails::has_marketruleids() const {
  return _internal_has_marketruleids();
}
inline void ContractDetails::clear_marketruleids() {
  marketruleids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& ContractDetails::marketruleids() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.marketRuleIds)
  return _internal_marketruleids();
}
inline void ContractDetails::set_marketruleids(const std::string& value) {
  _internal_set_marketruleids(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.marketRuleIds)
}
inline std::string* ContractDetails::mutable_marketruleids() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.marketRuleIds)
  return _internal_mutable_marketruleids();
}
inline const std::string& ContractDetails::_internal_marketruleids() const {
  return marketruleids_.Get();
}
inline void ContractDetails::_internal_set_marketruleids(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  marketruleids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_marketruleids(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  marketruleids_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.marketRuleIds)
}
inline void ContractDetails::set_marketruleids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  marketruleids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.marketRuleIds)
}
inline void ContractDetails::set_marketruleids(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  marketruleids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.marketRuleIds)
}
inline std::string* ContractDetails::_internal_mutable_marketruleids() {
  _has_bits_[0] |= 0x00008000u;
  return marketruleids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_marketruleids() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.marketRuleIds)
  if (!_internal_has_marketruleids()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return marketruleids_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_marketruleids(std::string* marketruleids) {
  if (marketruleids != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  marketruleids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketruleids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.marketRuleIds)
}
inline std::string* ContractDetails::unsafe_arena_release_marketruleids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.marketRuleIds)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return marketruleids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_marketruleids(
    std::string* marketruleids) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (marketruleids != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  marketruleids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      marketruleids, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.marketRuleIds)
}

// string realExpirationDate = 22;
inline bool ContractDetails::_internal_has_realexpirationdate() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ContractDetails::has_realexpirationdate() const {
  return _internal_has_realexpirationdate();
}
inline void ContractDetails::clear_realexpirationdate() {
  realexpirationdate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& ContractDetails::realexpirationdate() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.realExpirationDate)
  return _internal_realexpirationdate();
}
inline void ContractDetails::set_realexpirationdate(const std::string& value) {
  _internal_set_realexpirationdate(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.realExpirationDate)
}
inline std::string* ContractDetails::mutable_realexpirationdate() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.realExpirationDate)
  return _internal_mutable_realexpirationdate();
}
inline const std::string& ContractDetails::_internal_realexpirationdate() const {
  return realexpirationdate_.Get();
}
inline void ContractDetails::_internal_set_realexpirationdate(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  realexpirationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_realexpirationdate(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  realexpirationdate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.realExpirationDate)
}
inline void ContractDetails::set_realexpirationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  realexpirationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.realExpirationDate)
}
inline void ContractDetails::set_realexpirationdate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  realexpirationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.realExpirationDate)
}
inline std::string* ContractDetails::_internal_mutable_realexpirationdate() {
  _has_bits_[0] |= 0x00010000u;
  return realexpirationdate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_realexpirationdate() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.realExpirationDate)
  if (!_internal_has_realexpirationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return realexpirationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_realexpirationdate(std::string* realexpirationdate) {
  if (realexpirationdate != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  realexpirationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), realexpirationdate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.realExpirationDate)
}
inline std::string* ContractDetails::unsafe_arena_release_realexpirationdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.realExpirationDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return realexpirationdate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_realexpirationdate(
    std::string* realexpirationdate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (realexpirationdate != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  realexpirationdate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      realexpirationdate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.realExpirationDate)
}

// string stockType = 23;
inline bool ContractDetails::_internal_has_stocktype() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ContractDetails::has_stocktype() const {
  return _internal_has_stocktype();
}
inline void ContractDetails::clear_stocktype() {
  stocktype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& ContractDetails::stocktype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.stockType)
  return _internal_stocktype();
}
inline void ContractDetails::set_stocktype(const std::string& value) {
  _internal_set_stocktype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.stockType)
}
inline std::string* ContractDetails::mutable_stocktype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.stockType)
  return _internal_mutable_stocktype();
}
inline const std::string& ContractDetails::_internal_stocktype() const {
  return stocktype_.Get();
}
inline void ContractDetails::_internal_set_stocktype(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  stocktype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_stocktype(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  stocktype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.stockType)
}
inline void ContractDetails::set_stocktype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  stocktype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.stockType)
}
inline void ContractDetails::set_stocktype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  stocktype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.stockType)
}
inline std::string* ContractDetails::_internal_mutable_stocktype() {
  _has_bits_[0] |= 0x00020000u;
  return stocktype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_stocktype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.stockType)
  if (!_internal_has_stocktype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return stocktype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_stocktype(std::string* stocktype) {
  if (stocktype != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  stocktype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stocktype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.stockType)
}
inline std::string* ContractDetails::unsafe_arena_release_stocktype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.stockType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return stocktype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_stocktype(
    std::string* stocktype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stocktype != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  stocktype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stocktype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.stockType)
}

// string minSize = 24;
inline bool ContractDetails::_internal_has_minsize() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ContractDetails::has_minsize() const {
  return _internal_has_minsize();
}
inline void ContractDetails::clear_minsize() {
  minsize_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& ContractDetails::minsize() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.minSize)
  return _internal_minsize();
}
inline void ContractDetails::set_minsize(const std::string& value) {
  _internal_set_minsize(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.minSize)
}
inline std::string* ContractDetails::mutable_minsize() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.minSize)
  return _internal_mutable_minsize();
}
inline const std::string& ContractDetails::_internal_minsize() const {
  return minsize_.Get();
}
inline void ContractDetails::_internal_set_minsize(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  minsize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_minsize(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  minsize_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.minSize)
}
inline void ContractDetails::set_minsize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  minsize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.minSize)
}
inline void ContractDetails::set_minsize(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  minsize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.minSize)
}
inline std::string* ContractDetails::_internal_mutable_minsize() {
  _has_bits_[0] |= 0x00040000u;
  return minsize_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_minsize() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.minSize)
  if (!_internal_has_minsize()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return minsize_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_minsize(std::string* minsize) {
  if (minsize != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  minsize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minsize,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.minSize)
}
inline std::string* ContractDetails::unsafe_arena_release_minsize() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.minSize)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00040000u;
  return minsize_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_minsize(
    std::string* minsize) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (minsize != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  minsize_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      minsize, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.minSize)
}

// string sizeIncrement = 25;
inline bool ContractDetails::_internal_has_sizeincrement() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ContractDetails::has_sizeincrement() const {
  return _internal_has_sizeincrement();
}
inline void ContractDetails::clear_sizeincrement() {
  sizeincrement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& ContractDetails::sizeincrement() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.sizeIncrement)
  return _internal_sizeincrement();
}
inline void ContractDetails::set_sizeincrement(const std::string& value) {
  _internal_set_sizeincrement(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.sizeIncrement)
}
inline std::string* ContractDetails::mutable_sizeincrement() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.sizeIncrement)
  return _internal_mutable_sizeincrement();
}
inline const std::string& ContractDetails::_internal_sizeincrement() const {
  return sizeincrement_.Get();
}
inline void ContractDetails::_internal_set_sizeincrement(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  sizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_sizeincrement(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  sizeincrement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.sizeIncrement)
}
inline void ContractDetails::set_sizeincrement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  sizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.sizeIncrement)
}
inline void ContractDetails::set_sizeincrement(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  sizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.sizeIncrement)
}
inline std::string* ContractDetails::_internal_mutable_sizeincrement() {
  _has_bits_[0] |= 0x00080000u;
  return sizeincrement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_sizeincrement() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.sizeIncrement)
  if (!_internal_has_sizeincrement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return sizeincrement_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_sizeincrement(std::string* sizeincrement) {
  if (sizeincrement != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  sizeincrement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sizeincrement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.sizeIncrement)
}
inline std::string* ContractDetails::unsafe_arena_release_sizeincrement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.sizeIncrement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return sizeincrement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_sizeincrement(
    std::string* sizeincrement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sizeincrement != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  sizeincrement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sizeincrement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.sizeIncrement)
}

// string suggestedSizeIncrement = 26;
inline bool ContractDetails::_internal_has_suggestedsizeincrement() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ContractDetails::has_suggestedsizeincrement() const {
  return _internal_has_suggestedsizeincrement();
}
inline void ContractDetails::clear_suggestedsizeincrement() {
  suggestedsizeincrement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& ContractDetails::suggestedsizeincrement() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.suggestedSizeIncrement)
  return _internal_suggestedsizeincrement();
}
inline void ContractDetails::set_suggestedsizeincrement(const std::string& value) {
  _internal_set_suggestedsizeincrement(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.suggestedSizeIncrement)
}
inline std::string* ContractDetails::mutable_suggestedsizeincrement() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.suggestedSizeIncrement)
  return _internal_mutable_suggestedsizeincrement();
}
inline const std::string& ContractDetails::_internal_suggestedsizeincrement() const {
  return suggestedsizeincrement_.Get();
}
inline void ContractDetails::_internal_set_suggestedsizeincrement(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  suggestedsizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_suggestedsizeincrement(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  suggestedsizeincrement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.suggestedSizeIncrement)
}
inline void ContractDetails::set_suggestedsizeincrement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  suggestedsizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.suggestedSizeIncrement)
}
inline void ContractDetails::set_suggestedsizeincrement(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  suggestedsizeincrement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.suggestedSizeIncrement)
}
inline std::string* ContractDetails::_internal_mutable_suggestedsizeincrement() {
  _has_bits_[0] |= 0x00100000u;
  return suggestedsizeincrement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_suggestedsizeincrement() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.suggestedSizeIncrement)
  if (!_internal_has_suggestedsizeincrement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return suggestedsizeincrement_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_suggestedsizeincrement(std::string* suggestedsizeincrement) {
  if (suggestedsizeincrement != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  suggestedsizeincrement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suggestedsizeincrement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.suggestedSizeIncrement)
}
inline std::string* ContractDetails::unsafe_arena_release_suggestedsizeincrement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.suggestedSizeIncrement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return suggestedsizeincrement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_suggestedsizeincrement(
    std::string* suggestedsizeincrement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suggestedsizeincrement != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  suggestedsizeincrement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suggestedsizeincrement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.suggestedSizeIncrement)
}

// string fundName = 27;
inline bool ContractDetails::_internal_has_fundname() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundname() const {
  return _internal_has_fundname();
}
inline void ContractDetails::clear_fundname() {
  fundname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& ContractDetails::fundname() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundName)
  return _internal_fundname();
}
inline void ContractDetails::set_fundname(const std::string& value) {
  _internal_set_fundname(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundName)
}
inline std::string* ContractDetails::mutable_fundname() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundName)
  return _internal_mutable_fundname();
}
inline const std::string& ContractDetails::_internal_fundname() const {
  return fundname_.Get();
}
inline void ContractDetails::_internal_set_fundname(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  fundname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundname(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  fundname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundName)
}
inline void ContractDetails::set_fundname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  fundname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundName)
}
inline void ContractDetails::set_fundname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00200000u;
  fundname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundName)
}
inline std::string* ContractDetails::_internal_mutable_fundname() {
  _has_bits_[0] |= 0x00200000u;
  return fundname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundname() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundName)
  if (!_internal_has_fundname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return fundname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundname(std::string* fundname) {
  if (fundname != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  fundname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundName)
}
inline std::string* ContractDetails::unsafe_arena_release_fundname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00200000u;
  return fundname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundname(
    std::string* fundname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundname != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  fundname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundName)
}

// string fundFamily = 28;
inline bool ContractDetails::_internal_has_fundfamily() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundfamily() const {
  return _internal_has_fundfamily();
}
inline void ContractDetails::clear_fundfamily() {
  fundfamily_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& ContractDetails::fundfamily() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundFamily)
  return _internal_fundfamily();
}
inline void ContractDetails::set_fundfamily(const std::string& value) {
  _internal_set_fundfamily(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundFamily)
}
inline std::string* ContractDetails::mutable_fundfamily() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundFamily)
  return _internal_mutable_fundfamily();
}
inline const std::string& ContractDetails::_internal_fundfamily() const {
  return fundfamily_.Get();
}
inline void ContractDetails::_internal_set_fundfamily(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  fundfamily_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundfamily(std::string&& value) {
  _has_bits_[0] |= 0x00400000u;
  fundfamily_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundFamily)
}
inline void ContractDetails::set_fundfamily(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00400000u;
  fundfamily_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundFamily)
}
inline void ContractDetails::set_fundfamily(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00400000u;
  fundfamily_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundFamily)
}
inline std::string* ContractDetails::_internal_mutable_fundfamily() {
  _has_bits_[0] |= 0x00400000u;
  return fundfamily_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundfamily() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundFamily)
  if (!_internal_has_fundfamily()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return fundfamily_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundfamily(std::string* fundfamily) {
  if (fundfamily != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  fundfamily_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundfamily,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundFamily)
}
inline std::string* ContractDetails::unsafe_arena_release_fundfamily() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundFamily)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00400000u;
  return fundfamily_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundfamily(
    std::string* fundfamily) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundfamily != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  fundfamily_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundfamily, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundFamily)
}

// string fundType = 29;
inline bool ContractDetails::_internal_has_fundtype() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundtype() const {
  return _internal_has_fundtype();
}
inline void ContractDetails::clear_fundtype() {
  fundtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& ContractDetails::fundtype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundType)
  return _internal_fundtype();
}
inline void ContractDetails::set_fundtype(const std::string& value) {
  _internal_set_fundtype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundType)
}
inline std::string* ContractDetails::mutable_fundtype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundType)
  return _internal_mutable_fundtype();
}
inline const std::string& ContractDetails::_internal_fundtype() const {
  return fundtype_.Get();
}
inline void ContractDetails::_internal_set_fundtype(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  fundtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundtype(std::string&& value) {
  _has_bits_[0] |= 0x00800000u;
  fundtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundType)
}
inline void ContractDetails::set_fundtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00800000u;
  fundtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundType)
}
inline void ContractDetails::set_fundtype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00800000u;
  fundtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundType)
}
inline std::string* ContractDetails::_internal_mutable_fundtype() {
  _has_bits_[0] |= 0x00800000u;
  return fundtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundtype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundType)
  if (!_internal_has_fundtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  return fundtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundtype(std::string* fundtype) {
  if (fundtype != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  fundtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundType)
}
inline std::string* ContractDetails::unsafe_arena_release_fundtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00800000u;
  return fundtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundtype(
    std::string* fundtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundtype != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  fundtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundType)
}

// string fundFrontLoad = 30;
inline bool ContractDetails::_internal_has_fundfrontload() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundfrontload() const {
  return _internal_has_fundfrontload();
}
inline void ContractDetails::clear_fundfrontload() {
  fundfrontload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& ContractDetails::fundfrontload() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundFrontLoad)
  return _internal_fundfrontload();
}
inline void ContractDetails::set_fundfrontload(const std::string& value) {
  _internal_set_fundfrontload(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundFrontLoad)
}
inline std::string* ContractDetails::mutable_fundfrontload() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundFrontLoad)
  return _internal_mutable_fundfrontload();
}
inline const std::string& ContractDetails::_internal_fundfrontload() const {
  return fundfrontload_.Get();
}
inline void ContractDetails::_internal_set_fundfrontload(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  fundfrontload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundfrontload(std::string&& value) {
  _has_bits_[0] |= 0x01000000u;
  fundfrontload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundFrontLoad)
}
inline void ContractDetails::set_fundfrontload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x01000000u;
  fundfrontload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundFrontLoad)
}
inline void ContractDetails::set_fundfrontload(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x01000000u;
  fundfrontload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundFrontLoad)
}
inline std::string* ContractDetails::_internal_mutable_fundfrontload() {
  _has_bits_[0] |= 0x01000000u;
  return fundfrontload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundfrontload() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundFrontLoad)
  if (!_internal_has_fundfrontload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return fundfrontload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundfrontload(std::string* fundfrontload) {
  if (fundfrontload != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  fundfrontload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundfrontload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundFrontLoad)
}
inline std::string* ContractDetails::unsafe_arena_release_fundfrontload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundFrontLoad)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x01000000u;
  return fundfrontload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundfrontload(
    std::string* fundfrontload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundfrontload != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  fundfrontload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundfrontload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundFrontLoad)
}

// string fundBackLoad = 31;
inline bool ContractDetails::_internal_has_fundbackload() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundbackload() const {
  return _internal_has_fundbackload();
}
inline void ContractDetails::clear_fundbackload() {
  fundbackload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x02000000u;
}
inline const std::string& ContractDetails::fundbackload() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundBackLoad)
  return _internal_fundbackload();
}
inline void ContractDetails::set_fundbackload(const std::string& value) {
  _internal_set_fundbackload(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundBackLoad)
}
inline std::string* ContractDetails::mutable_fundbackload() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundBackLoad)
  return _internal_mutable_fundbackload();
}
inline const std::string& ContractDetails::_internal_fundbackload() const {
  return fundbackload_.Get();
}
inline void ContractDetails::_internal_set_fundbackload(const std::string& value) {
  _has_bits_[0] |= 0x02000000u;
  fundbackload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundbackload(std::string&& value) {
  _has_bits_[0] |= 0x02000000u;
  fundbackload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundBackLoad)
}
inline void ContractDetails::set_fundbackload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x02000000u;
  fundbackload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundBackLoad)
}
inline void ContractDetails::set_fundbackload(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x02000000u;
  fundbackload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundBackLoad)
}
inline std::string* ContractDetails::_internal_mutable_fundbackload() {
  _has_bits_[0] |= 0x02000000u;
  return fundbackload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundbackload() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundBackLoad)
  if (!_internal_has_fundbackload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x02000000u;
  return fundbackload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundbackload(std::string* fundbackload) {
  if (fundbackload != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  fundbackload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundbackload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundBackLoad)
}
inline std::string* ContractDetails::unsafe_arena_release_fundbackload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundBackLoad)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x02000000u;
  return fundbackload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundbackload(
    std::string* fundbackload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundbackload != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  fundbackload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundbackload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundBackLoad)
}

// string fundBackLoadTimeInterval = 32;
inline bool ContractDetails::_internal_has_fundbackloadtimeinterval() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundbackloadtimeinterval() const {
  return _internal_has_fundbackloadtimeinterval();
}
inline void ContractDetails::clear_fundbackloadtimeinterval() {
  fundbackloadtimeinterval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x04000000u;
}
inline const std::string& ContractDetails::fundbackloadtimeinterval() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundBackLoadTimeInterval)
  return _internal_fundbackloadtimeinterval();
}
inline void ContractDetails::set_fundbackloadtimeinterval(const std::string& value) {
  _internal_set_fundbackloadtimeinterval(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundBackLoadTimeInterval)
}
inline std::string* ContractDetails::mutable_fundbackloadtimeinterval() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundBackLoadTimeInterval)
  return _internal_mutable_fundbackloadtimeinterval();
}
inline const std::string& ContractDetails::_internal_fundbackloadtimeinterval() const {
  return fundbackloadtimeinterval_.Get();
}
inline void ContractDetails::_internal_set_fundbackloadtimeinterval(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  fundbackloadtimeinterval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundbackloadtimeinterval(std::string&& value) {
  _has_bits_[0] |= 0x04000000u;
  fundbackloadtimeinterval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundBackLoadTimeInterval)
}
inline void ContractDetails::set_fundbackloadtimeinterval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x04000000u;
  fundbackloadtimeinterval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundBackLoadTimeInterval)
}
inline void ContractDetails::set_fundbackloadtimeinterval(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x04000000u;
  fundbackloadtimeinterval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundBackLoadTimeInterval)
}
inline std::string* ContractDetails::_internal_mutable_fundbackloadtimeinterval() {
  _has_bits_[0] |= 0x04000000u;
  return fundbackloadtimeinterval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundbackloadtimeinterval() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundBackLoadTimeInterval)
  if (!_internal_has_fundbackloadtimeinterval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x04000000u;
  return fundbackloadtimeinterval_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundbackloadtimeinterval(std::string* fundbackloadtimeinterval) {
  if (fundbackloadtimeinterval != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  fundbackloadtimeinterval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundbackloadtimeinterval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundBackLoadTimeInterval)
}
inline std::string* ContractDetails::unsafe_arena_release_fundbackloadtimeinterval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundBackLoadTimeInterval)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x04000000u;
  return fundbackloadtimeinterval_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundbackloadtimeinterval(
    std::string* fundbackloadtimeinterval) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundbackloadtimeinterval != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  fundbackloadtimeinterval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundbackloadtimeinterval, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundBackLoadTimeInterval)
}

// string fundManagementFee = 33;
inline bool ContractDetails::_internal_has_fundmanagementfee() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundmanagementfee() const {
  return _internal_has_fundmanagementfee();
}
inline void ContractDetails::clear_fundmanagementfee() {
  fundmanagementfee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x08000000u;
}
inline const std::string& ContractDetails::fundmanagementfee() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundManagementFee)
  return _internal_fundmanagementfee();
}
inline void ContractDetails::set_fundmanagementfee(const std::string& value) {
  _internal_set_fundmanagementfee(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundManagementFee)
}
inline std::string* ContractDetails::mutable_fundmanagementfee() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundManagementFee)
  return _internal_mutable_fundmanagementfee();
}
inline const std::string& ContractDetails::_internal_fundmanagementfee() const {
  return fundmanagementfee_.Get();
}
inline void ContractDetails::_internal_set_fundmanagementfee(const std::string& value) {
  _has_bits_[0] |= 0x08000000u;
  fundmanagementfee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundmanagementfee(std::string&& value) {
  _has_bits_[0] |= 0x08000000u;
  fundmanagementfee_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundManagementFee)
}
inline void ContractDetails::set_fundmanagementfee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x08000000u;
  fundmanagementfee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundManagementFee)
}
inline void ContractDetails::set_fundmanagementfee(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x08000000u;
  fundmanagementfee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundManagementFee)
}
inline std::string* ContractDetails::_internal_mutable_fundmanagementfee() {
  _has_bits_[0] |= 0x08000000u;
  return fundmanagementfee_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundmanagementfee() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundManagementFee)
  if (!_internal_has_fundmanagementfee()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x08000000u;
  return fundmanagementfee_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundmanagementfee(std::string* fundmanagementfee) {
  if (fundmanagementfee != nullptr) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  fundmanagementfee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundmanagementfee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundManagementFee)
}
inline std::string* ContractDetails::unsafe_arena_release_fundmanagementfee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundManagementFee)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x08000000u;
  return fundmanagementfee_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundmanagementfee(
    std::string* fundmanagementfee) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundmanagementfee != nullptr) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  fundmanagementfee_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundmanagementfee, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundManagementFee)
}

// bool fundClosed = 34;
inline bool ContractDetails::_internal_has_fundclosed() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundclosed() const {
  return _internal_has_fundclosed();
}
inline void ContractDetails::clear_fundclosed() {
  fundclosed_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool ContractDetails::_internal_fundclosed() const {
  return fundclosed_;
}
inline bool ContractDetails::fundclosed() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundClosed)
  return _internal_fundclosed();
}
inline void ContractDetails::_internal_set_fundclosed(bool value) {
  _has_bits_[1] |= 0x00010000u;
  fundclosed_ = value;
}
inline void ContractDetails::set_fundclosed(bool value) {
  _internal_set_fundclosed(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundClosed)
}

// bool fundClosedForNewInvestors = 35;
inline bool ContractDetails::_internal_has_fundclosedfornewinvestors() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundclosedfornewinvestors() const {
  return _internal_has_fundclosedfornewinvestors();
}
inline void ContractDetails::clear_fundclosedfornewinvestors() {
  fundclosedfornewinvestors_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool ContractDetails::_internal_fundclosedfornewinvestors() const {
  return fundclosedfornewinvestors_;
}
inline bool ContractDetails::fundclosedfornewinvestors() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundClosedForNewInvestors)
  return _internal_fundclosedfornewinvestors();
}
inline void ContractDetails::_internal_set_fundclosedfornewinvestors(bool value) {
  _has_bits_[1] |= 0x00020000u;
  fundclosedfornewinvestors_ = value;
}
inline void ContractDetails::set_fundclosedfornewinvestors(bool value) {
  _internal_set_fundclosedfornewinvestors(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundClosedForNewInvestors)
}

// bool fundClosedForNewMoney = 36;
inline bool ContractDetails::_internal_has_fundclosedfornewmoney() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundclosedfornewmoney() const {
  return _internal_has_fundclosedfornewmoney();
}
inline void ContractDetails::clear_fundclosedfornewmoney() {
  fundclosedfornewmoney_ = false;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool ContractDetails::_internal_fundclosedfornewmoney() const {
  return fundclosedfornewmoney_;
}
inline bool ContractDetails::fundclosedfornewmoney() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundClosedForNewMoney)
  return _internal_fundclosedfornewmoney();
}
inline void ContractDetails::_internal_set_fundclosedfornewmoney(bool value) {
  _has_bits_[1] |= 0x00040000u;
  fundclosedfornewmoney_ = value;
}
inline void ContractDetails::set_fundclosedfornewmoney(bool value) {
  _internal_set_fundclosedfornewmoney(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundClosedForNewMoney)
}

// string fundNotifyAmount = 37;
inline bool ContractDetails::_internal_has_fundnotifyamount() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundnotifyamount() const {
  return _internal_has_fundnotifyamount();
}
inline void ContractDetails::clear_fundnotifyamount() {
  fundnotifyamount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x10000000u;
}
inline const std::string& ContractDetails::fundnotifyamount() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundNotifyAmount)
  return _internal_fundnotifyamount();
}
inline void ContractDetails::set_fundnotifyamount(const std::string& value) {
  _internal_set_fundnotifyamount(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundNotifyAmount)
}
inline std::string* ContractDetails::mutable_fundnotifyamount() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundNotifyAmount)
  return _internal_mutable_fundnotifyamount();
}
inline const std::string& ContractDetails::_internal_fundnotifyamount() const {
  return fundnotifyamount_.Get();
}
inline void ContractDetails::_internal_set_fundnotifyamount(const std::string& value) {
  _has_bits_[0] |= 0x10000000u;
  fundnotifyamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundnotifyamount(std::string&& value) {
  _has_bits_[0] |= 0x10000000u;
  fundnotifyamount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundNotifyAmount)
}
inline void ContractDetails::set_fundnotifyamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x10000000u;
  fundnotifyamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundNotifyAmount)
}
inline void ContractDetails::set_fundnotifyamount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x10000000u;
  fundnotifyamount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundNotifyAmount)
}
inline std::string* ContractDetails::_internal_mutable_fundnotifyamount() {
  _has_bits_[0] |= 0x10000000u;
  return fundnotifyamount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundnotifyamount() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundNotifyAmount)
  if (!_internal_has_fundnotifyamount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x10000000u;
  return fundnotifyamount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundnotifyamount(std::string* fundnotifyamount) {
  if (fundnotifyamount != nullptr) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  fundnotifyamount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundnotifyamount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundNotifyAmount)
}
inline std::string* ContractDetails::unsafe_arena_release_fundnotifyamount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundNotifyAmount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x10000000u;
  return fundnotifyamount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundnotifyamount(
    std::string* fundnotifyamount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundnotifyamount != nullptr) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  fundnotifyamount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundnotifyamount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundNotifyAmount)
}

// string fundMinimumInitialPurchase = 38;
inline bool ContractDetails::_internal_has_fundminimuminitialpurchase() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundminimuminitialpurchase() const {
  return _internal_has_fundminimuminitialpurchase();
}
inline void ContractDetails::clear_fundminimuminitialpurchase() {
  fundminimuminitialpurchase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x20000000u;
}
inline const std::string& ContractDetails::fundminimuminitialpurchase() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundMinimumInitialPurchase)
  return _internal_fundminimuminitialpurchase();
}
inline void ContractDetails::set_fundminimuminitialpurchase(const std::string& value) {
  _internal_set_fundminimuminitialpurchase(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundMinimumInitialPurchase)
}
inline std::string* ContractDetails::mutable_fundminimuminitialpurchase() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundMinimumInitialPurchase)
  return _internal_mutable_fundminimuminitialpurchase();
}
inline const std::string& ContractDetails::_internal_fundminimuminitialpurchase() const {
  return fundminimuminitialpurchase_.Get();
}
inline void ContractDetails::_internal_set_fundminimuminitialpurchase(const std::string& value) {
  _has_bits_[0] |= 0x20000000u;
  fundminimuminitialpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundminimuminitialpurchase(std::string&& value) {
  _has_bits_[0] |= 0x20000000u;
  fundminimuminitialpurchase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundMinimumInitialPurchase)
}
inline void ContractDetails::set_fundminimuminitialpurchase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x20000000u;
  fundminimuminitialpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundMinimumInitialPurchase)
}
inline void ContractDetails::set_fundminimuminitialpurchase(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x20000000u;
  fundminimuminitialpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundMinimumInitialPurchase)
}
inline std::string* ContractDetails::_internal_mutable_fundminimuminitialpurchase() {
  _has_bits_[0] |= 0x20000000u;
  return fundminimuminitialpurchase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundminimuminitialpurchase() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundMinimumInitialPurchase)
  if (!_internal_has_fundminimuminitialpurchase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x20000000u;
  return fundminimuminitialpurchase_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundminimuminitialpurchase(std::string* fundminimuminitialpurchase) {
  if (fundminimuminitialpurchase != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  fundminimuminitialpurchase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundminimuminitialpurchase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundMinimumInitialPurchase)
}
inline std::string* ContractDetails::unsafe_arena_release_fundminimuminitialpurchase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundMinimumInitialPurchase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x20000000u;
  return fundminimuminitialpurchase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundminimuminitialpurchase(
    std::string* fundminimuminitialpurchase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundminimuminitialpurchase != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  fundminimuminitialpurchase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundminimuminitialpurchase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundMinimumInitialPurchase)
}

// string fundMinimumSubsequentPurchase = 39;
inline bool ContractDetails::_internal_has_fundminimumsubsequentpurchase() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundminimumsubsequentpurchase() const {
  return _internal_has_fundminimumsubsequentpurchase();
}
inline void ContractDetails::clear_fundminimumsubsequentpurchase() {
  fundminimumsubsequentpurchase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x40000000u;
}
inline const std::string& ContractDetails::fundminimumsubsequentpurchase() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
  return _internal_fundminimumsubsequentpurchase();
}
inline void ContractDetails::set_fundminimumsubsequentpurchase(const std::string& value) {
  _internal_set_fundminimumsubsequentpurchase(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}
inline std::string* ContractDetails::mutable_fundminimumsubsequentpurchase() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
  return _internal_mutable_fundminimumsubsequentpurchase();
}
inline const std::string& ContractDetails::_internal_fundminimumsubsequentpurchase() const {
  return fundminimumsubsequentpurchase_.Get();
}
inline void ContractDetails::_internal_set_fundminimumsubsequentpurchase(const std::string& value) {
  _has_bits_[0] |= 0x40000000u;
  fundminimumsubsequentpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundminimumsubsequentpurchase(std::string&& value) {
  _has_bits_[0] |= 0x40000000u;
  fundminimumsubsequentpurchase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}
inline void ContractDetails::set_fundminimumsubsequentpurchase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x40000000u;
  fundminimumsubsequentpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}
inline void ContractDetails::set_fundminimumsubsequentpurchase(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x40000000u;
  fundminimumsubsequentpurchase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}
inline std::string* ContractDetails::_internal_mutable_fundminimumsubsequentpurchase() {
  _has_bits_[0] |= 0x40000000u;
  return fundminimumsubsequentpurchase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundminimumsubsequentpurchase() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
  if (!_internal_has_fundminimumsubsequentpurchase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x40000000u;
  return fundminimumsubsequentpurchase_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundminimumsubsequentpurchase(std::string* fundminimumsubsequentpurchase) {
  if (fundminimumsubsequentpurchase != nullptr) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  fundminimumsubsequentpurchase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundminimumsubsequentpurchase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}
inline std::string* ContractDetails::unsafe_arena_release_fundminimumsubsequentpurchase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x40000000u;
  return fundminimumsubsequentpurchase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundminimumsubsequentpurchase(
    std::string* fundminimumsubsequentpurchase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundminimumsubsequentpurchase != nullptr) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  fundminimumsubsequentpurchase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundminimumsubsequentpurchase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundMinimumSubsequentPurchase)
}

// string fundBlueSkyStates = 40;
inline bool ContractDetails::_internal_has_fundblueskystates() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ContractDetails::has_fundblueskystates() const {
  return _internal_has_fundblueskystates();
}
inline void ContractDetails::clear_fundblueskystates() {
  fundblueskystates_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x80000000u;
}
inline const std::string& ContractDetails::fundblueskystates() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundBlueSkyStates)
  return _internal_fundblueskystates();
}
inline void ContractDetails::set_fundblueskystates(const std::string& value) {
  _internal_set_fundblueskystates(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundBlueSkyStates)
}
inline std::string* ContractDetails::mutable_fundblueskystates() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundBlueSkyStates)
  return _internal_mutable_fundblueskystates();
}
inline const std::string& ContractDetails::_internal_fundblueskystates() const {
  return fundblueskystates_.Get();
}
inline void ContractDetails::_internal_set_fundblueskystates(const std::string& value) {
  _has_bits_[0] |= 0x80000000u;
  fundblueskystates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundblueskystates(std::string&& value) {
  _has_bits_[0] |= 0x80000000u;
  fundblueskystates_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundBlueSkyStates)
}
inline void ContractDetails::set_fundblueskystates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x80000000u;
  fundblueskystates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundBlueSkyStates)
}
inline void ContractDetails::set_fundblueskystates(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x80000000u;
  fundblueskystates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundBlueSkyStates)
}
inline std::string* ContractDetails::_internal_mutable_fundblueskystates() {
  _has_bits_[0] |= 0x80000000u;
  return fundblueskystates_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundblueskystates() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundBlueSkyStates)
  if (!_internal_has_fundblueskystates()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x80000000u;
  return fundblueskystates_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundblueskystates(std::string* fundblueskystates) {
  if (fundblueskystates != nullptr) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  fundblueskystates_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundblueskystates,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundBlueSkyStates)
}
inline std::string* ContractDetails::unsafe_arena_release_fundblueskystates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundBlueSkyStates)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x80000000u;
  return fundblueskystates_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundblueskystates(
    std::string* fundblueskystates) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundblueskystates != nullptr) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  fundblueskystates_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundblueskystates, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundBlueSkyStates)
}

// string fundBlueSkyTerritories = 41;
inline bool ContractDetails::_internal_has_fundblueskyterritories() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ContractDetails::has_fundblueskyterritories() const {
  return _internal_has_fundblueskyterritories();
}
inline void ContractDetails::clear_fundblueskyterritories() {
  fundblueskyterritories_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000001u;
}
inline const std::string& ContractDetails::fundblueskyterritories() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundBlueSkyTerritories)
  return _internal_fundblueskyterritories();
}
inline void ContractDetails::set_fundblueskyterritories(const std::string& value) {
  _internal_set_fundblueskyterritories(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundBlueSkyTerritories)
}
inline std::string* ContractDetails::mutable_fundblueskyterritories() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundBlueSkyTerritories)
  return _internal_mutable_fundblueskyterritories();
}
inline const std::string& ContractDetails::_internal_fundblueskyterritories() const {
  return fundblueskyterritories_.Get();
}
inline void ContractDetails::_internal_set_fundblueskyterritories(const std::string& value) {
  _has_bits_[1] |= 0x00000001u;
  fundblueskyterritories_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundblueskyterritories(std::string&& value) {
  _has_bits_[1] |= 0x00000001u;
  fundblueskyterritories_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundBlueSkyTerritories)
}
inline void ContractDetails::set_fundblueskyterritories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000001u;
  fundblueskyterritories_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundBlueSkyTerritories)
}
inline void ContractDetails::set_fundblueskyterritories(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000001u;
  fundblueskyterritories_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundBlueSkyTerritories)
}
inline std::string* ContractDetails::_internal_mutable_fundblueskyterritories() {
  _has_bits_[1] |= 0x00000001u;
  return fundblueskyterritories_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundblueskyterritories() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundBlueSkyTerritories)
  if (!_internal_has_fundblueskyterritories()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000001u;
  return fundblueskyterritories_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundblueskyterritories(std::string* fundblueskyterritories) {
  if (fundblueskyterritories != nullptr) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  fundblueskyterritories_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundblueskyterritories,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundBlueSkyTerritories)
}
inline std::string* ContractDetails::unsafe_arena_release_fundblueskyterritories() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundBlueSkyTerritories)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000001u;
  return fundblueskyterritories_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundblueskyterritories(
    std::string* fundblueskyterritories) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundblueskyterritories != nullptr) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  fundblueskyterritories_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundblueskyterritories, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundBlueSkyTerritories)
}

// string fundDistributionPolicyIndicator = 42;
inline bool ContractDetails::_internal_has_funddistributionpolicyindicator() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ContractDetails::has_funddistributionpolicyindicator() const {
  return _internal_has_funddistributionpolicyindicator();
}
inline void ContractDetails::clear_funddistributionpolicyindicator() {
  funddistributionpolicyindicator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000002u;
}
inline const std::string& ContractDetails::funddistributionpolicyindicator() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundDistributionPolicyIndicator)
  return _internal_funddistributionpolicyindicator();
}
inline void ContractDetails::set_funddistributionpolicyindicator(const std::string& value) {
  _internal_set_funddistributionpolicyindicator(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}
inline std::string* ContractDetails::mutable_funddistributionpolicyindicator() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundDistributionPolicyIndicator)
  return _internal_mutable_funddistributionpolicyindicator();
}
inline const std::string& ContractDetails::_internal_funddistributionpolicyindicator() const {
  return funddistributionpolicyindicator_.Get();
}
inline void ContractDetails::_internal_set_funddistributionpolicyindicator(const std::string& value) {
  _has_bits_[1] |= 0x00000002u;
  funddistributionpolicyindicator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_funddistributionpolicyindicator(std::string&& value) {
  _has_bits_[1] |= 0x00000002u;
  funddistributionpolicyindicator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}
inline void ContractDetails::set_funddistributionpolicyindicator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000002u;
  funddistributionpolicyindicator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}
inline void ContractDetails::set_funddistributionpolicyindicator(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000002u;
  funddistributionpolicyindicator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}
inline std::string* ContractDetails::_internal_mutable_funddistributionpolicyindicator() {
  _has_bits_[1] |= 0x00000002u;
  return funddistributionpolicyindicator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_funddistributionpolicyindicator() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundDistributionPolicyIndicator)
  if (!_internal_has_funddistributionpolicyindicator()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000002u;
  return funddistributionpolicyindicator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_funddistributionpolicyindicator(std::string* funddistributionpolicyindicator) {
  if (funddistributionpolicyindicator != nullptr) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  funddistributionpolicyindicator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funddistributionpolicyindicator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}
inline std::string* ContractDetails::unsafe_arena_release_funddistributionpolicyindicator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundDistributionPolicyIndicator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000002u;
  return funddistributionpolicyindicator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_funddistributionpolicyindicator(
    std::string* funddistributionpolicyindicator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (funddistributionpolicyindicator != nullptr) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  funddistributionpolicyindicator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      funddistributionpolicyindicator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundDistributionPolicyIndicator)
}

// string fundAssetType = 43;
inline bool ContractDetails::_internal_has_fundassettype() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ContractDetails::has_fundassettype() const {
  return _internal_has_fundassettype();
}
inline void ContractDetails::clear_fundassettype() {
  fundassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000004u;
}
inline const std::string& ContractDetails::fundassettype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.fundAssetType)
  return _internal_fundassettype();
}
inline void ContractDetails::set_fundassettype(const std::string& value) {
  _internal_set_fundassettype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.fundAssetType)
}
inline std::string* ContractDetails::mutable_fundassettype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.fundAssetType)
  return _internal_mutable_fundassettype();
}
inline const std::string& ContractDetails::_internal_fundassettype() const {
  return fundassettype_.Get();
}
inline void ContractDetails::_internal_set_fundassettype(const std::string& value) {
  _has_bits_[1] |= 0x00000004u;
  fundassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_fundassettype(std::string&& value) {
  _has_bits_[1] |= 0x00000004u;
  fundassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.fundAssetType)
}
inline void ContractDetails::set_fundassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000004u;
  fundassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.fundAssetType)
}
inline void ContractDetails::set_fundassettype(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000004u;
  fundassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.fundAssetType)
}
inline std::string* ContractDetails::_internal_mutable_fundassettype() {
  _has_bits_[1] |= 0x00000004u;
  return fundassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_fundassettype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.fundAssetType)
  if (!_internal_has_fundassettype()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000004u;
  return fundassettype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_fundassettype(std::string* fundassettype) {
  if (fundassettype != nullptr) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  fundassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.fundAssetType)
}
inline std::string* ContractDetails::unsafe_arena_release_fundassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.fundAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000004u;
  return fundassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_fundassettype(
    std::string* fundassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fundassettype != nullptr) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  fundassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fundassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.fundAssetType)
}

// string cusip = 44;
inline bool ContractDetails::_internal_has_cusip() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ContractDetails::has_cusip() const {
  return _internal_has_cusip();
}
inline void ContractDetails::clear_cusip() {
  cusip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000008u;
}
inline const std::string& ContractDetails::cusip() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.cusip)
  return _internal_cusip();
}
inline void ContractDetails::set_cusip(const std::string& value) {
  _internal_set_cusip(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.cusip)
}
inline std::string* ContractDetails::mutable_cusip() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.cusip)
  return _internal_mutable_cusip();
}
inline const std::string& ContractDetails::_internal_cusip() const {
  return cusip_.Get();
}
inline void ContractDetails::_internal_set_cusip(const std::string& value) {
  _has_bits_[1] |= 0x00000008u;
  cusip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_cusip(std::string&& value) {
  _has_bits_[1] |= 0x00000008u;
  cusip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.cusip)
}
inline void ContractDetails::set_cusip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000008u;
  cusip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.cusip)
}
inline void ContractDetails::set_cusip(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000008u;
  cusip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.cusip)
}
inline std::string* ContractDetails::_internal_mutable_cusip() {
  _has_bits_[1] |= 0x00000008u;
  return cusip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_cusip() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.cusip)
  if (!_internal_has_cusip()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000008u;
  return cusip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_cusip(std::string* cusip) {
  if (cusip != nullptr) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  cusip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cusip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.cusip)
}
inline std::string* ContractDetails::unsafe_arena_release_cusip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.cusip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000008u;
  return cusip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_cusip(
    std::string* cusip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cusip != nullptr) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  cusip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cusip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.cusip)
}

// string issueDate = 45;
inline bool ContractDetails::_internal_has_issuedate() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ContractDetails::has_issuedate() const {
  return _internal_has_issuedate();
}
inline void ContractDetails::clear_issuedate() {
  issuedate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000010u;
}
inline const std::string& ContractDetails::issuedate() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.issueDate)
  return _internal_issuedate();
}
inline void ContractDetails::set_issuedate(const std::string& value) {
  _internal_set_issuedate(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.issueDate)
}
inline std::string* ContractDetails::mutable_issuedate() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.issueDate)
  return _internal_mutable_issuedate();
}
inline const std::string& ContractDetails::_internal_issuedate() const {
  return issuedate_.Get();
}
inline void ContractDetails::_internal_set_issuedate(const std::string& value) {
  _has_bits_[1] |= 0x00000010u;
  issuedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_issuedate(std::string&& value) {
  _has_bits_[1] |= 0x00000010u;
  issuedate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.issueDate)
}
inline void ContractDetails::set_issuedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000010u;
  issuedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.issueDate)
}
inline void ContractDetails::set_issuedate(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000010u;
  issuedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.issueDate)
}
inline std::string* ContractDetails::_internal_mutable_issuedate() {
  _has_bits_[1] |= 0x00000010u;
  return issuedate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_issuedate() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.issueDate)
  if (!_internal_has_issuedate()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000010u;
  return issuedate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_issuedate(std::string* issuedate) {
  if (issuedate != nullptr) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  issuedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuedate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.issueDate)
}
inline std::string* ContractDetails::unsafe_arena_release_issuedate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.issueDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000010u;
  return issuedate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_issuedate(
    std::string* issuedate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (issuedate != nullptr) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  issuedate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      issuedate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.issueDate)
}

// string ratings = 46;
inline bool ContractDetails::_internal_has_ratings() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ContractDetails::has_ratings() const {
  return _internal_has_ratings();
}
inline void ContractDetails::clear_ratings() {
  ratings_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000020u;
}
inline const std::string& ContractDetails::ratings() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.ratings)
  return _internal_ratings();
}
inline void ContractDetails::set_ratings(const std::string& value) {
  _internal_set_ratings(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.ratings)
}
inline std::string* ContractDetails::mutable_ratings() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.ratings)
  return _internal_mutable_ratings();
}
inline const std::string& ContractDetails::_internal_ratings() const {
  return ratings_.Get();
}
inline void ContractDetails::_internal_set_ratings(const std::string& value) {
  _has_bits_[1] |= 0x00000020u;
  ratings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_ratings(std::string&& value) {
  _has_bits_[1] |= 0x00000020u;
  ratings_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.ratings)
}
inline void ContractDetails::set_ratings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000020u;
  ratings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.ratings)
}
inline void ContractDetails::set_ratings(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000020u;
  ratings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.ratings)
}
inline std::string* ContractDetails::_internal_mutable_ratings() {
  _has_bits_[1] |= 0x00000020u;
  return ratings_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_ratings() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.ratings)
  if (!_internal_has_ratings()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000020u;
  return ratings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_ratings(std::string* ratings) {
  if (ratings != nullptr) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  ratings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ratings,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.ratings)
}
inline std::string* ContractDetails::unsafe_arena_release_ratings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.ratings)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000020u;
  return ratings_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_ratings(
    std::string* ratings) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ratings != nullptr) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  ratings_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ratings, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.ratings)
}

// string bondType = 47;
inline bool ContractDetails::_internal_has_bondtype() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ContractDetails::has_bondtype() const {
  return _internal_has_bondtype();
}
inline void ContractDetails::clear_bondtype() {
  bondtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000040u;
}
inline const std::string& ContractDetails::bondtype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.bondType)
  return _internal_bondtype();
}
inline void ContractDetails::set_bondtype(const std::string& value) {
  _internal_set_bondtype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.bondType)
}
inline std::string* ContractDetails::mutable_bondtype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.bondType)
  return _internal_mutable_bondtype();
}
inline const std::string& ContractDetails::_internal_bondtype() const {
  return bondtype_.Get();
}
inline void ContractDetails::_internal_set_bondtype(const std::string& value) {
  _has_bits_[1] |= 0x00000040u;
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_bondtype(std::string&& value) {
  _has_bits_[1] |= 0x00000040u;
  bondtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.bondType)
}
inline void ContractDetails::set_bondtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000040u;
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.bondType)
}
inline void ContractDetails::set_bondtype(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000040u;
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.bondType)
}
inline std::string* ContractDetails::_internal_mutable_bondtype() {
  _has_bits_[1] |= 0x00000040u;
  return bondtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_bondtype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.bondType)
  if (!_internal_has_bondtype()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000040u;
  return bondtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_bondtype(std::string* bondtype) {
  if (bondtype != nullptr) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  bondtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bondtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.bondType)
}
inline std::string* ContractDetails::unsafe_arena_release_bondtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.bondType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000040u;
  return bondtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_bondtype(
    std::string* bondtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bondtype != nullptr) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  bondtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bondtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.bondType)
}

// double coupon = 48;
inline bool ContractDetails::_internal_has_coupon() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool ContractDetails::has_coupon() const {
  return _internal_has_coupon();
}
inline void ContractDetails::clear_coupon() {
  coupon_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline double ContractDetails::_internal_coupon() const {
  return coupon_;
}
inline double ContractDetails::coupon() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.coupon)
  return _internal_coupon();
}
inline void ContractDetails::_internal_set_coupon(double value) {
  _has_bits_[1] |= 0x00100000u;
  coupon_ = value;
}
inline void ContractDetails::set_coupon(double value) {
  _internal_set_coupon(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.coupon)
}

// string couponType = 49;
inline bool ContractDetails::_internal_has_coupontype() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ContractDetails::has_coupontype() const {
  return _internal_has_coupontype();
}
inline void ContractDetails::clear_coupontype() {
  coupontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000080u;
}
inline const std::string& ContractDetails::coupontype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.couponType)
  return _internal_coupontype();
}
inline void ContractDetails::set_coupontype(const std::string& value) {
  _internal_set_coupontype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.couponType)
}
inline std::string* ContractDetails::mutable_coupontype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.couponType)
  return _internal_mutable_coupontype();
}
inline const std::string& ContractDetails::_internal_coupontype() const {
  return coupontype_.Get();
}
inline void ContractDetails::_internal_set_coupontype(const std::string& value) {
  _has_bits_[1] |= 0x00000080u;
  coupontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_coupontype(std::string&& value) {
  _has_bits_[1] |= 0x00000080u;
  coupontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.couponType)
}
inline void ContractDetails::set_coupontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000080u;
  coupontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.couponType)
}
inline void ContractDetails::set_coupontype(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000080u;
  coupontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.couponType)
}
inline std::string* ContractDetails::_internal_mutable_coupontype() {
  _has_bits_[1] |= 0x00000080u;
  return coupontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_coupontype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.couponType)
  if (!_internal_has_coupontype()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000080u;
  return coupontype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_coupontype(std::string* coupontype) {
  if (coupontype != nullptr) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  coupontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coupontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.couponType)
}
inline std::string* ContractDetails::unsafe_arena_release_coupontype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.couponType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000080u;
  return coupontype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_coupontype(
    std::string* coupontype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (coupontype != nullptr) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  coupontype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      coupontype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.couponType)
}

// bool convertible = 50;
inline bool ContractDetails::_internal_has_convertible() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool ContractDetails::has_convertible() const {
  return _internal_has_convertible();
}
inline void ContractDetails::clear_convertible() {
  convertible_ = false;
  _has_bits_[1] &= ~0x00080000u;
}
inline bool ContractDetails::_internal_convertible() const {
  return convertible_;
}
inline bool ContractDetails::convertible() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.convertible)
  return _internal_convertible();
}
inline void ContractDetails::_internal_set_convertible(bool value) {
  _has_bits_[1] |= 0x00080000u;
  convertible_ = value;
}
inline void ContractDetails::set_convertible(bool value) {
  _internal_set_convertible(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.convertible)
}

// bool callable = 51;
inline bool ContractDetails::_internal_has_callable() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool ContractDetails::has_callable() const {
  return _internal_has_callable();
}
inline void ContractDetails::clear_callable() {
  callable_ = false;
  _has_bits_[1] &= ~0x00200000u;
}
inline bool ContractDetails::_internal_callable() const {
  return callable_;
}
inline bool ContractDetails::callable() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.callable)
  return _internal_callable();
}
inline void ContractDetails::_internal_set_callable(bool value) {
  _has_bits_[1] |= 0x00200000u;
  callable_ = value;
}
inline void ContractDetails::set_callable(bool value) {
  _internal_set_callable(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.callable)
}

// bool puttable = 52;
inline bool ContractDetails::_internal_has_puttable() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool ContractDetails::has_puttable() const {
  return _internal_has_puttable();
}
inline void ContractDetails::clear_puttable() {
  puttable_ = false;
  _has_bits_[1] &= ~0x00400000u;
}
inline bool ContractDetails::_internal_puttable() const {
  return puttable_;
}
inline bool ContractDetails::puttable() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.puttable)
  return _internal_puttable();
}
inline void ContractDetails::_internal_set_puttable(bool value) {
  _has_bits_[1] |= 0x00400000u;
  puttable_ = value;
}
inline void ContractDetails::set_puttable(bool value) {
  _internal_set_puttable(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.puttable)
}

// string descAppend = 53;
inline bool ContractDetails::_internal_has_descappend() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ContractDetails::has_descappend() const {
  return _internal_has_descappend();
}
inline void ContractDetails::clear_descappend() {
  descappend_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000100u;
}
inline const std::string& ContractDetails::descappend() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.descAppend)
  return _internal_descappend();
}
inline void ContractDetails::set_descappend(const std::string& value) {
  _internal_set_descappend(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.descAppend)
}
inline std::string* ContractDetails::mutable_descappend() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.descAppend)
  return _internal_mutable_descappend();
}
inline const std::string& ContractDetails::_internal_descappend() const {
  return descappend_.Get();
}
inline void ContractDetails::_internal_set_descappend(const std::string& value) {
  _has_bits_[1] |= 0x00000100u;
  descappend_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_descappend(std::string&& value) {
  _has_bits_[1] |= 0x00000100u;
  descappend_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.descAppend)
}
inline void ContractDetails::set_descappend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000100u;
  descappend_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.descAppend)
}
inline void ContractDetails::set_descappend(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000100u;
  descappend_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.descAppend)
}
inline std::string* ContractDetails::_internal_mutable_descappend() {
  _has_bits_[1] |= 0x00000100u;
  return descappend_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_descappend() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.descAppend)
  if (!_internal_has_descappend()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000100u;
  return descappend_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_descappend(std::string* descappend) {
  if (descappend != nullptr) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  descappend_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descappend,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.descAppend)
}
inline std::string* ContractDetails::unsafe_arena_release_descappend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.descAppend)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000100u;
  return descappend_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_descappend(
    std::string* descappend) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (descappend != nullptr) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  descappend_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      descappend, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.descAppend)
}

// string nextOptionDate = 54;
inline bool ContractDetails::_internal_has_nextoptiondate() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ContractDetails::has_nextoptiondate() const {
  return _internal_has_nextoptiondate();
}
inline void ContractDetails::clear_nextoptiondate() {
  nextoptiondate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000200u;
}
inline const std::string& ContractDetails::nextoptiondate() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.nextOptionDate)
  return _internal_nextoptiondate();
}
inline void ContractDetails::set_nextoptiondate(const std::string& value) {
  _internal_set_nextoptiondate(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.nextOptionDate)
}
inline std::string* ContractDetails::mutable_nextoptiondate() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.nextOptionDate)
  return _internal_mutable_nextoptiondate();
}
inline const std::string& ContractDetails::_internal_nextoptiondate() const {
  return nextoptiondate_.Get();
}
inline void ContractDetails::_internal_set_nextoptiondate(const std::string& value) {
  _has_bits_[1] |= 0x00000200u;
  nextoptiondate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_nextoptiondate(std::string&& value) {
  _has_bits_[1] |= 0x00000200u;
  nextoptiondate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.nextOptionDate)
}
inline void ContractDetails::set_nextoptiondate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000200u;
  nextoptiondate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.nextOptionDate)
}
inline void ContractDetails::set_nextoptiondate(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000200u;
  nextoptiondate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.nextOptionDate)
}
inline std::string* ContractDetails::_internal_mutable_nextoptiondate() {
  _has_bits_[1] |= 0x00000200u;
  return nextoptiondate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_nextoptiondate() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.nextOptionDate)
  if (!_internal_has_nextoptiondate()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000200u;
  return nextoptiondate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_nextoptiondate(std::string* nextoptiondate) {
  if (nextoptiondate != nullptr) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  nextoptiondate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nextoptiondate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.nextOptionDate)
}
inline std::string* ContractDetails::unsafe_arena_release_nextoptiondate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.nextOptionDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000200u;
  return nextoptiondate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_nextoptiondate(
    std::string* nextoptiondate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nextoptiondate != nullptr) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  nextoptiondate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nextoptiondate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.nextOptionDate)
}

// string nextOptionType = 55;
inline bool ContractDetails::_internal_has_nextoptiontype() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ContractDetails::has_nextoptiontype() const {
  return _internal_has_nextoptiontype();
}
inline void ContractDetails::clear_nextoptiontype() {
  nextoptiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000400u;
}
inline const std::string& ContractDetails::nextoptiontype() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.nextOptionType)
  return _internal_nextoptiontype();
}
inline void ContractDetails::set_nextoptiontype(const std::string& value) {
  _internal_set_nextoptiontype(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.nextOptionType)
}
inline std::string* ContractDetails::mutable_nextoptiontype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.nextOptionType)
  return _internal_mutable_nextoptiontype();
}
inline const std::string& ContractDetails::_internal_nextoptiontype() const {
  return nextoptiontype_.Get();
}
inline void ContractDetails::_internal_set_nextoptiontype(const std::string& value) {
  _has_bits_[1] |= 0x00000400u;
  nextoptiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_nextoptiontype(std::string&& value) {
  _has_bits_[1] |= 0x00000400u;
  nextoptiontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.nextOptionType)
}
inline void ContractDetails::set_nextoptiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000400u;
  nextoptiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.nextOptionType)
}
inline void ContractDetails::set_nextoptiontype(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000400u;
  nextoptiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.nextOptionType)
}
inline std::string* ContractDetails::_internal_mutable_nextoptiontype() {
  _has_bits_[1] |= 0x00000400u;
  return nextoptiontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_nextoptiontype() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.nextOptionType)
  if (!_internal_has_nextoptiontype()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000400u;
  return nextoptiontype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_nextoptiontype(std::string* nextoptiontype) {
  if (nextoptiontype != nullptr) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  nextoptiontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nextoptiontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.nextOptionType)
}
inline std::string* ContractDetails::unsafe_arena_release_nextoptiontype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.nextOptionType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000400u;
  return nextoptiontype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_nextoptiontype(
    std::string* nextoptiontype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nextoptiontype != nullptr) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  nextoptiontype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nextoptiontype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.nextOptionType)
}

// bool nextOptionPartial = 56;
inline bool ContractDetails::_internal_has_nextoptionpartial() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ContractDetails::has_nextoptionpartial() const {
  return _internal_has_nextoptionpartial();
}
inline void ContractDetails::clear_nextoptionpartial() {
  nextoptionpartial_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool ContractDetails::_internal_nextoptionpartial() const {
  return nextoptionpartial_;
}
inline bool ContractDetails::nextoptionpartial() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.nextOptionPartial)
  return _internal_nextoptionpartial();
}
inline void ContractDetails::_internal_set_nextoptionpartial(bool value) {
  _has_bits_[1] |= 0x00800000u;
  nextoptionpartial_ = value;
}
inline void ContractDetails::set_nextoptionpartial(bool value) {
  _internal_set_nextoptionpartial(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.nextOptionPartial)
}

// string bondNotes = 57;
inline bool ContractDetails::_internal_has_bondnotes() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ContractDetails::has_bondnotes() const {
  return _internal_has_bondnotes();
}
inline void ContractDetails::clear_bondnotes() {
  bondnotes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[1] &= ~0x00000800u;
}
inline const std::string& ContractDetails::bondnotes() const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.bondNotes)
  return _internal_bondnotes();
}
inline void ContractDetails::set_bondnotes(const std::string& value) {
  _internal_set_bondnotes(value);
  // @@protoc_insertion_point(field_set:protobuf.ContractDetails.bondNotes)
}
inline std::string* ContractDetails::mutable_bondnotes() {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.bondNotes)
  return _internal_mutable_bondnotes();
}
inline const std::string& ContractDetails::_internal_bondnotes() const {
  return bondnotes_.Get();
}
inline void ContractDetails::_internal_set_bondnotes(const std::string& value) {
  _has_bits_[1] |= 0x00000800u;
  bondnotes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractDetails::set_bondnotes(std::string&& value) {
  _has_bits_[1] |= 0x00000800u;
  bondnotes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ContractDetails.bondNotes)
}
inline void ContractDetails::set_bondnotes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000800u;
  bondnotes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ContractDetails.bondNotes)
}
inline void ContractDetails::set_bondnotes(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000800u;
  bondnotes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ContractDetails.bondNotes)
}
inline std::string* ContractDetails::_internal_mutable_bondnotes() {
  _has_bits_[1] |= 0x00000800u;
  return bondnotes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractDetails::release_bondnotes() {
  // @@protoc_insertion_point(field_release:protobuf.ContractDetails.bondNotes)
  if (!_internal_has_bondnotes()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000800u;
  return bondnotes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractDetails::set_allocated_bondnotes(std::string* bondnotes) {
  if (bondnotes != nullptr) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  bondnotes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bondnotes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ContractDetails.bondNotes)
}
inline std::string* ContractDetails::unsafe_arena_release_bondnotes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ContractDetails.bondNotes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[1] &= ~0x00000800u;
  return bondnotes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractDetails::unsafe_arena_set_allocated_bondnotes(
    std::string* bondnotes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bondnotes != nullptr) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  bondnotes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bondnotes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ContractDetails.bondNotes)
}

// repeated .protobuf.IneligibilityReason ineligibilityReasonList = 58;
inline int ContractDetails::_internal_ineligibilityreasonlist_size() const {
  return ineligibilityreasonlist_.size();
}
inline int ContractDetails::ineligibilityreasonlist_size() const {
  return _internal_ineligibilityreasonlist_size();
}
inline ::protobuf::IneligibilityReason* ContractDetails::mutable_ineligibilityreasonlist(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.ContractDetails.ineligibilityReasonList)
  return ineligibilityreasonlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::IneligibilityReason >*
ContractDetails::mutable_ineligibilityreasonlist() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.ContractDetails.ineligibilityReasonList)
  return &ineligibilityreasonlist_;
}
inline const ::protobuf::IneligibilityReason& ContractDetails::_internal_ineligibilityreasonlist(int index) const {
  return ineligibilityreasonlist_.Get(index);
}
inline const ::protobuf::IneligibilityReason& ContractDetails::ineligibilityreasonlist(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.ContractDetails.ineligibilityReasonList)
  return _internal_ineligibilityreasonlist(index);
}
inline ::protobuf::IneligibilityReason* ContractDetails::_internal_add_ineligibilityreasonlist() {
  return ineligibilityreasonlist_.Add();
}
inline ::protobuf::IneligibilityReason* ContractDetails::add_ineligibilityreasonlist() {
  // @@protoc_insertion_point(field_add:protobuf.ContractDetails.ineligibilityReasonList)
  return _internal_add_ineligibilityreasonlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::IneligibilityReason >&
ContractDetails::ineligibilityreasonlist() const {
  // @@protoc_insertion_point(field_list:protobuf.ContractDetails.ineligibilityReasonList)
  return ineligibilityreasonlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ContractDetails_2eproto
