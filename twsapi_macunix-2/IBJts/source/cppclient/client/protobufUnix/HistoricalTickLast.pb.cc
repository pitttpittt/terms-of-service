// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTickLast.proto

#include "HistoricalTickLast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TickAttribLast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickAttribLast_TickAttribLast_2eproto;
namespace protobuf {
class HistoricalTickLastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricalTickLast> _instance;
} _HistoricalTickLast_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_HistoricalTickLast_HistoricalTickLast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HistoricalTickLast_default_instance_;
    new (ptr) ::protobuf::HistoricalTickLast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::HistoricalTickLast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalTickLast_HistoricalTickLast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoricalTickLast_HistoricalTickLast_2eproto}, {
      &scc_info_TickAttribLast_TickAttribLast_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HistoricalTickLast_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_HistoricalTickLast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HistoricalTickLast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HistoricalTickLast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, tickattriblast_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, price_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, size_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, exchange_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTickLast, specialconditions_),
  4,
  3,
  5,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protobuf::HistoricalTickLast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_HistoricalTickLast_default_instance_),
};

const char descriptor_table_protodef_HistoricalTickLast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030HistoricalTickLast.proto\022\010protobuf\032\024Ti"
  "ckAttribLast.proto\"\216\002\n\022HistoricalTickLas"
  "t\022\021\n\004time\030\001 \001(\003H\000\210\001\001\0225\n\016tickAttribLast\030\002"
  " \001(\0132\030.protobuf.TickAttribLastH\001\210\001\001\022\022\n\005p"
  "rice\030\003 \001(\001H\002\210\001\001\022\021\n\004size\030\004 \001(\tH\003\210\001\001\022\025\n\010ex"
  "change\030\005 \001(\tH\004\210\001\001\022\036\n\021specialConditions\030\006"
  " \001(\tH\005\210\001\001B\007\n\005_timeB\021\n\017_tickAttribLastB\010\n"
  "\006_priceB\007\n\005_sizeB\013\n\t_exchangeB\024\n\022_specia"
  "lConditionsBB\n\026com.ib.client.protobufB\027H"
  "istoricalTickLastProto\252\002\016IBApi.protobufb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HistoricalTickLast_2eproto_deps[1] = {
  &::descriptor_table_TickAttribLast_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HistoricalTickLast_2eproto_sccs[1] = {
  &scc_info_HistoricalTickLast_HistoricalTickLast_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HistoricalTickLast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTickLast_2eproto = {
  false, false, descriptor_table_protodef_HistoricalTickLast_2eproto, "HistoricalTickLast.proto", 407,
  &descriptor_table_HistoricalTickLast_2eproto_once, descriptor_table_HistoricalTickLast_2eproto_sccs, descriptor_table_HistoricalTickLast_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_HistoricalTickLast_2eproto::offsets,
  file_level_metadata_HistoricalTickLast_2eproto, 1, file_level_enum_descriptors_HistoricalTickLast_2eproto, file_level_service_descriptors_HistoricalTickLast_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HistoricalTickLast_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HistoricalTickLast_2eproto)), true);
namespace protobuf {

// ===================================================================

void HistoricalTickLast::InitAsDefaultInstance() {
  ::protobuf::_HistoricalTickLast_default_instance_._instance.get_mutable()->tickattriblast_ = const_cast< ::protobuf::TickAttribLast*>(
      ::protobuf::TickAttribLast::internal_default_instance());
}
class HistoricalTickLast::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricalTickLast>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf::TickAttribLast& tickattriblast(const HistoricalTickLast* msg);
  static void set_has_tickattriblast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_specialconditions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf::TickAttribLast&
HistoricalTickLast::_Internal::tickattriblast(const HistoricalTickLast* msg) {
  return *msg->tickattriblast_;
}
void HistoricalTickLast::clear_tickattriblast() {
  if (GetArena() == nullptr && tickattriblast_ != nullptr) {
    delete tickattriblast_;
  }
  tickattriblast_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
HistoricalTickLast::HistoricalTickLast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.HistoricalTickLast)
}
HistoricalTickLast::HistoricalTickLast(const HistoricalTickLast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_size()) {
    size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_size(),
      GetArena());
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exchange()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  specialconditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_specialconditions()) {
    specialconditions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_specialconditions(),
      GetArena());
  }
  if (from._internal_has_tickattriblast()) {
    tickattriblast_ = new ::protobuf::TickAttribLast(*from.tickattriblast_);
  } else {
    tickattriblast_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&time_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HistoricalTickLast)
}

void HistoricalTickLast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricalTickLast_HistoricalTickLast_2eproto.base);
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specialconditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tickattriblast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&tickattriblast_)) + sizeof(price_));
}

HistoricalTickLast::~HistoricalTickLast() {
  // @@protoc_insertion_point(destructor:protobuf.HistoricalTickLast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricalTickLast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specialconditions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tickattriblast_;
}

void HistoricalTickLast::ArenaDtor(void* object) {
  HistoricalTickLast* _this = reinterpret_cast< HistoricalTickLast* >(object);
  (void)_this;
}
void HistoricalTickLast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricalTickLast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricalTickLast& HistoricalTickLast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricalTickLast_HistoricalTickLast_2eproto.base);
  return *internal_default_instance();
}


void HistoricalTickLast::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HistoricalTickLast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      specialconditions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && tickattriblast_ != nullptr) {
        delete tickattriblast_;
      }
      tickattriblast_ = nullptr;
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&time_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricalTickLast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.TickAttribLast tickAttribLast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tickattriblast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTickLast.size"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTickLast.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string specialConditions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_specialconditions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTickLast.specialConditions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricalTickLast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HistoricalTickLast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .protobuf.TickAttribLast tickAttribLast = 2;
  if (_internal_has_tickattriblast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tickattriblast(this), target, stream);
  }

  // double price = 3;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_price(), target);
  }

  // string size = 4;
  if (_internal_has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTickLast.size");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_size(), target);
  }

  // string exchange = 5;
  if (_internal_has_exchange()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTickLast.exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  // string specialConditions = 6;
  if (_internal_has_specialconditions()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specialconditions().data(), static_cast<int>(this->_internal_specialconditions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTickLast.specialConditions");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_specialconditions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HistoricalTickLast)
  return target;
}

size_t HistoricalTickLast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HistoricalTickLast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string size = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_size());
    }

    // string exchange = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exchange());
    }

    // string specialConditions = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specialconditions());
    }

    // .protobuf.TickAttribLast tickAttribLast = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tickattriblast_);
    }

    // int64 time = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

    // double price = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalTickLast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.HistoricalTickLast)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalTickLast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricalTickLast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.HistoricalTickLast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.HistoricalTickLast)
    MergeFrom(*source);
  }
}

void HistoricalTickLast::MergeFrom(const HistoricalTickLast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HistoricalTickLast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_size(from._internal_size());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_specialconditions(from._internal_specialconditions());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tickattriblast()->::protobuf::TickAttribLast::MergeFrom(from._internal_tickattriblast());
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalTickLast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.HistoricalTickLast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalTickLast::CopyFrom(const HistoricalTickLast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HistoricalTickLast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalTickLast::IsInitialized() const {
  return true;
}

void HistoricalTickLast::InternalSwap(HistoricalTickLast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  specialconditions_.Swap(&other->specialconditions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricalTickLast, price_)
      + sizeof(HistoricalTickLast::price_)
      - PROTOBUF_FIELD_OFFSET(HistoricalTickLast, tickattriblast_)>(
          reinterpret_cast<char*>(&tickattriblast_),
          reinterpret_cast<char*>(&other->tickattriblast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricalTickLast::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::HistoricalTickLast* Arena::CreateMaybeMessage< ::protobuf::HistoricalTickLast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HistoricalTickLast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
