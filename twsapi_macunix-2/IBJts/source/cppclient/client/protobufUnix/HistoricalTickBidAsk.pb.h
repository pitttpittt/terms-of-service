// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTickBidAsk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalTickBidAsk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalTickBidAsk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TickAttribBidAsk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalTickBidAsk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalTickBidAsk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTickBidAsk_2eproto;
namespace protobuf {
class HistoricalTickBidAsk;
class HistoricalTickBidAskDefaultTypeInternal;
extern HistoricalTickBidAskDefaultTypeInternal _HistoricalTickBidAsk_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalTickBidAsk* Arena::CreateMaybeMessage<::protobuf::HistoricalTickBidAsk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalTickBidAsk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalTickBidAsk) */ {
 public:
  inline HistoricalTickBidAsk() : HistoricalTickBidAsk(nullptr) {};
  virtual ~HistoricalTickBidAsk();

  HistoricalTickBidAsk(const HistoricalTickBidAsk& from);
  HistoricalTickBidAsk(HistoricalTickBidAsk&& from) noexcept
    : HistoricalTickBidAsk() {
    *this = ::std::move(from);
  }

  inline HistoricalTickBidAsk& operator=(const HistoricalTickBidAsk& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalTickBidAsk& operator=(HistoricalTickBidAsk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalTickBidAsk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalTickBidAsk* internal_default_instance() {
    return reinterpret_cast<const HistoricalTickBidAsk*>(
               &_HistoricalTickBidAsk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoricalTickBidAsk& a, HistoricalTickBidAsk& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalTickBidAsk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalTickBidAsk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalTickBidAsk* New() const final {
    return CreateMaybeMessage<HistoricalTickBidAsk>(nullptr);
  }

  HistoricalTickBidAsk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalTickBidAsk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalTickBidAsk& from);
  void MergeFrom(const HistoricalTickBidAsk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalTickBidAsk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalTickBidAsk";
  }
  protected:
  explicit HistoricalTickBidAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalTickBidAsk_2eproto);
    return ::descriptor_table_HistoricalTickBidAsk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeBidFieldNumber = 5,
    kSizeAskFieldNumber = 6,
    kTickAttribBidAskFieldNumber = 2,
    kTimeFieldNumber = 1,
    kPriceBidFieldNumber = 3,
    kPriceAskFieldNumber = 4,
  };
  // string sizeBid = 5;
  bool has_sizebid() const;
  private:
  bool _internal_has_sizebid() const;
  public:
  void clear_sizebid();
  const std::string& sizebid() const;
  void set_sizebid(const std::string& value);
  void set_sizebid(std::string&& value);
  void set_sizebid(const char* value);
  void set_sizebid(const char* value, size_t size);
  std::string* mutable_sizebid();
  std::string* release_sizebid();
  void set_allocated_sizebid(std::string* sizebid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sizebid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sizebid(
      std::string* sizebid);
  private:
  const std::string& _internal_sizebid() const;
  void _internal_set_sizebid(const std::string& value);
  std::string* _internal_mutable_sizebid();
  public:

  // string sizeAsk = 6;
  bool has_sizeask() const;
  private:
  bool _internal_has_sizeask() const;
  public:
  void clear_sizeask();
  const std::string& sizeask() const;
  void set_sizeask(const std::string& value);
  void set_sizeask(std::string&& value);
  void set_sizeask(const char* value);
  void set_sizeask(const char* value, size_t size);
  std::string* mutable_sizeask();
  std::string* release_sizeask();
  void set_allocated_sizeask(std::string* sizeask);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sizeask();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sizeask(
      std::string* sizeask);
  private:
  const std::string& _internal_sizeask() const;
  void _internal_set_sizeask(const std::string& value);
  std::string* _internal_mutable_sizeask();
  public:

  // .protobuf.TickAttribBidAsk tickAttribBidAsk = 2;
  bool has_tickattribbidask() const;
  private:
  bool _internal_has_tickattribbidask() const;
  public:
  void clear_tickattribbidask();
  const ::protobuf::TickAttribBidAsk& tickattribbidask() const;
  ::protobuf::TickAttribBidAsk* release_tickattribbidask();
  ::protobuf::TickAttribBidAsk* mutable_tickattribbidask();
  void set_allocated_tickattribbidask(::protobuf::TickAttribBidAsk* tickattribbidask);
  private:
  const ::protobuf::TickAttribBidAsk& _internal_tickattribbidask() const;
  ::protobuf::TickAttribBidAsk* _internal_mutable_tickattribbidask();
  public:
  void unsafe_arena_set_allocated_tickattribbidask(
      ::protobuf::TickAttribBidAsk* tickattribbidask);
  ::protobuf::TickAttribBidAsk* unsafe_arena_release_tickattribbidask();

  // int64 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double priceBid = 3;
  bool has_pricebid() const;
  private:
  bool _internal_has_pricebid() const;
  public:
  void clear_pricebid();
  double pricebid() const;
  void set_pricebid(double value);
  private:
  double _internal_pricebid() const;
  void _internal_set_pricebid(double value);
  public:

  // double priceAsk = 4;
  bool has_priceask() const;
  private:
  bool _internal_has_priceask() const;
  public:
  void clear_priceask();
  double priceask() const;
  void set_priceask(double value);
  private:
  double _internal_priceask() const;
  void _internal_set_priceask(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalTickBidAsk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sizebid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sizeask_;
  ::protobuf::TickAttribBidAsk* tickattribbidask_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double pricebid_;
  double priceask_;
  friend struct ::TableStruct_HistoricalTickBidAsk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoricalTickBidAsk

// int64 time = 1;
inline bool HistoricalTickBidAsk::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HistoricalTickBidAsk::has_time() const {
  return _internal_has_time();
}
inline void HistoricalTickBidAsk::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoricalTickBidAsk::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoricalTickBidAsk::time() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.time)
  return _internal_time();
}
inline void HistoricalTickBidAsk::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void HistoricalTickBidAsk::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickBidAsk.time)
}

// .protobuf.TickAttribBidAsk tickAttribBidAsk = 2;
inline bool HistoricalTickBidAsk::_internal_has_tickattribbidask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tickattribbidask_ != nullptr);
  return value;
}
inline bool HistoricalTickBidAsk::has_tickattribbidask() const {
  return _internal_has_tickattribbidask();
}
inline const ::protobuf::TickAttribBidAsk& HistoricalTickBidAsk::_internal_tickattribbidask() const {
  const ::protobuf::TickAttribBidAsk* p = tickattribbidask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::TickAttribBidAsk*>(
      &::protobuf::_TickAttribBidAsk_default_instance_);
}
inline const ::protobuf::TickAttribBidAsk& HistoricalTickBidAsk::tickattribbidask() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.tickAttribBidAsk)
  return _internal_tickattribbidask();
}
inline void HistoricalTickBidAsk::unsafe_arena_set_allocated_tickattribbidask(
    ::protobuf::TickAttribBidAsk* tickattribbidask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattribbidask_);
  }
  tickattribbidask_ = tickattribbidask;
  if (tickattribbidask) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickBidAsk.tickAttribBidAsk)
}
inline ::protobuf::TickAttribBidAsk* HistoricalTickBidAsk::release_tickattribbidask() {
  auto temp = unsafe_arena_release_tickattribbidask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::TickAttribBidAsk* HistoricalTickBidAsk::unsafe_arena_release_tickattribbidask() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickBidAsk.tickAttribBidAsk)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf::TickAttribBidAsk* temp = tickattribbidask_;
  tickattribbidask_ = nullptr;
  return temp;
}
inline ::protobuf::TickAttribBidAsk* HistoricalTickBidAsk::_internal_mutable_tickattribbidask() {
  _has_bits_[0] |= 0x00000004u;
  if (tickattribbidask_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TickAttribBidAsk>(GetArena());
    tickattribbidask_ = p;
  }
  return tickattribbidask_;
}
inline ::protobuf::TickAttribBidAsk* HistoricalTickBidAsk::mutable_tickattribbidask() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickBidAsk.tickAttribBidAsk)
  return _internal_mutable_tickattribbidask();
}
inline void HistoricalTickBidAsk::set_allocated_tickattribbidask(::protobuf::TickAttribBidAsk* tickattribbidask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattribbidask_);
  }
  if (tickattribbidask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tickattribbidask)->GetArena();
    if (message_arena != submessage_arena) {
      tickattribbidask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tickattribbidask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tickattribbidask_ = tickattribbidask;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickBidAsk.tickAttribBidAsk)
}

// double priceBid = 3;
inline bool HistoricalTickBidAsk::_internal_has_pricebid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistoricalTickBidAsk::has_pricebid() const {
  return _internal_has_pricebid();
}
inline void HistoricalTickBidAsk::clear_pricebid() {
  pricebid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double HistoricalTickBidAsk::_internal_pricebid() const {
  return pricebid_;
}
inline double HistoricalTickBidAsk::pricebid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.priceBid)
  return _internal_pricebid();
}
inline void HistoricalTickBidAsk::_internal_set_pricebid(double value) {
  _has_bits_[0] |= 0x00000010u;
  pricebid_ = value;
}
inline void HistoricalTickBidAsk::set_pricebid(double value) {
  _internal_set_pricebid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickBidAsk.priceBid)
}

// double priceAsk = 4;
inline bool HistoricalTickBidAsk::_internal_has_priceask() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistoricalTickBidAsk::has_priceask() const {
  return _internal_has_priceask();
}
inline void HistoricalTickBidAsk::clear_priceask() {
  priceask_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double HistoricalTickBidAsk::_internal_priceask() const {
  return priceask_;
}
inline double HistoricalTickBidAsk::priceask() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.priceAsk)
  return _internal_priceask();
}
inline void HistoricalTickBidAsk::_internal_set_priceask(double value) {
  _has_bits_[0] |= 0x00000020u;
  priceask_ = value;
}
inline void HistoricalTickBidAsk::set_priceask(double value) {
  _internal_set_priceask(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickBidAsk.priceAsk)
}

// string sizeBid = 5;
inline bool HistoricalTickBidAsk::_internal_has_sizebid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalTickBidAsk::has_sizebid() const {
  return _internal_has_sizebid();
}
inline void HistoricalTickBidAsk::clear_sizebid() {
  sizebid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistoricalTickBidAsk::sizebid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.sizeBid)
  return _internal_sizebid();
}
inline void HistoricalTickBidAsk::set_sizebid(const std::string& value) {
  _internal_set_sizebid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickBidAsk.sizeBid)
}
inline std::string* HistoricalTickBidAsk::mutable_sizebid() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickBidAsk.sizeBid)
  return _internal_mutable_sizebid();
}
inline const std::string& HistoricalTickBidAsk::_internal_sizebid() const {
  return sizebid_.Get();
}
inline void HistoricalTickBidAsk::_internal_set_sizebid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sizebid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTickBidAsk::set_sizebid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sizebid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTickBidAsk.sizeBid)
}
inline void HistoricalTickBidAsk::set_sizebid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sizebid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTickBidAsk.sizeBid)
}
inline void HistoricalTickBidAsk::set_sizebid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sizebid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTickBidAsk.sizeBid)
}
inline std::string* HistoricalTickBidAsk::_internal_mutable_sizebid() {
  _has_bits_[0] |= 0x00000001u;
  return sizebid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTickBidAsk::release_sizebid() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickBidAsk.sizeBid)
  if (!_internal_has_sizebid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sizebid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTickBidAsk::set_allocated_sizebid(std::string* sizebid) {
  if (sizebid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sizebid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sizebid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickBidAsk.sizeBid)
}
inline std::string* HistoricalTickBidAsk::unsafe_arena_release_sizebid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTickBidAsk.sizeBid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sizebid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTickBidAsk::unsafe_arena_set_allocated_sizebid(
    std::string* sizebid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sizebid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sizebid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sizebid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickBidAsk.sizeBid)
}

// string sizeAsk = 6;
inline bool HistoricalTickBidAsk::_internal_has_sizeask() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalTickBidAsk::has_sizeask() const {
  return _internal_has_sizeask();
}
inline void HistoricalTickBidAsk::clear_sizeask() {
  sizeask_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistoricalTickBidAsk::sizeask() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTickBidAsk.sizeAsk)
  return _internal_sizeask();
}
inline void HistoricalTickBidAsk::set_sizeask(const std::string& value) {
  _internal_set_sizeask(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTickBidAsk.sizeAsk)
}
inline std::string* HistoricalTickBidAsk::mutable_sizeask() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTickBidAsk.sizeAsk)
  return _internal_mutable_sizeask();
}
inline const std::string& HistoricalTickBidAsk::_internal_sizeask() const {
  return sizeask_.Get();
}
inline void HistoricalTickBidAsk::_internal_set_sizeask(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sizeask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTickBidAsk::set_sizeask(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sizeask_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTickBidAsk.sizeAsk)
}
inline void HistoricalTickBidAsk::set_sizeask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sizeask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTickBidAsk.sizeAsk)
}
inline void HistoricalTickBidAsk::set_sizeask(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sizeask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTickBidAsk.sizeAsk)
}
inline std::string* HistoricalTickBidAsk::_internal_mutable_sizeask() {
  _has_bits_[0] |= 0x00000002u;
  return sizeask_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTickBidAsk::release_sizeask() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTickBidAsk.sizeAsk)
  if (!_internal_has_sizeask()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sizeask_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTickBidAsk::set_allocated_sizeask(std::string* sizeask) {
  if (sizeask != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sizeask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sizeask,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTickBidAsk.sizeAsk)
}
inline std::string* HistoricalTickBidAsk::unsafe_arena_release_sizeask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTickBidAsk.sizeAsk)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return sizeask_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTickBidAsk::unsafe_arena_set_allocated_sizeask(
    std::string* sizeask) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sizeask != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sizeask_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sizeask, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTickBidAsk.sizeAsk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalTickBidAsk_2eproto
