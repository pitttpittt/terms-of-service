// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PortfolioValue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PortfolioValue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PortfolioValue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Contract.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PortfolioValue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PortfolioValue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PortfolioValue_2eproto;
namespace protobuf {
class PortfolioValue;
class PortfolioValueDefaultTypeInternal;
extern PortfolioValueDefaultTypeInternal _PortfolioValue_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::PortfolioValue* Arena::CreateMaybeMessage<::protobuf::PortfolioValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class PortfolioValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.PortfolioValue) */ {
 public:
  inline PortfolioValue() : PortfolioValue(nullptr) {};
  virtual ~PortfolioValue();

  PortfolioValue(const PortfolioValue& from);
  PortfolioValue(PortfolioValue&& from) noexcept
    : PortfolioValue() {
    *this = ::std::move(from);
  }

  inline PortfolioValue& operator=(const PortfolioValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioValue& operator=(PortfolioValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioValue* internal_default_instance() {
    return reinterpret_cast<const PortfolioValue*>(
               &_PortfolioValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PortfolioValue& a, PortfolioValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioValue* New() const final {
    return CreateMaybeMessage<PortfolioValue>(nullptr);
  }

  PortfolioValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioValue& from);
  void MergeFrom(const PortfolioValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.PortfolioValue";
  }
  protected:
  explicit PortfolioValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PortfolioValue_2eproto);
    return ::descriptor_table_PortfolioValue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kAccountNameFieldNumber = 8,
    kContractFieldNumber = 1,
    kMarketPriceFieldNumber = 3,
    kMarketValueFieldNumber = 4,
    kAverageCostFieldNumber = 5,
    kUnrealizedPNLFieldNumber = 6,
    kRealizedPNLFieldNumber = 7,
  };
  // string position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const std::string& position() const;
  void set_position(const std::string& value);
  void set_position(std::string&& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  std::string* mutable_position();
  std::string* release_position();
  void set_allocated_position(std::string* position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position(
      std::string* position);
  private:
  const std::string& _internal_position() const;
  void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // string accountName = 8;
  bool has_accountname() const;
  private:
  bool _internal_has_accountname() const;
  public:
  void clear_accountname();
  const std::string& accountname() const;
  void set_accountname(const std::string& value);
  void set_accountname(std::string&& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  std::string* mutable_accountname();
  std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountname(
      std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // .protobuf.Contract contract = 1;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::protobuf::Contract& contract() const;
  ::protobuf::Contract* release_contract();
  ::protobuf::Contract* mutable_contract();
  void set_allocated_contract(::protobuf::Contract* contract);
  private:
  const ::protobuf::Contract& _internal_contract() const;
  ::protobuf::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::protobuf::Contract* contract);
  ::protobuf::Contract* unsafe_arena_release_contract();

  // double marketPrice = 3;
  bool has_marketprice() const;
  private:
  bool _internal_has_marketprice() const;
  public:
  void clear_marketprice();
  double marketprice() const;
  void set_marketprice(double value);
  private:
  double _internal_marketprice() const;
  void _internal_set_marketprice(double value);
  public:

  // double marketValue = 4;
  bool has_marketvalue() const;
  private:
  bool _internal_has_marketvalue() const;
  public:
  void clear_marketvalue();
  double marketvalue() const;
  void set_marketvalue(double value);
  private:
  double _internal_marketvalue() const;
  void _internal_set_marketvalue(double value);
  public:

  // double averageCost = 5;
  bool has_averagecost() const;
  private:
  bool _internal_has_averagecost() const;
  public:
  void clear_averagecost();
  double averagecost() const;
  void set_averagecost(double value);
  private:
  double _internal_averagecost() const;
  void _internal_set_averagecost(double value);
  public:

  // double unrealizedPNL = 6;
  bool has_unrealizedpnl() const;
  private:
  bool _internal_has_unrealizedpnl() const;
  public:
  void clear_unrealizedpnl();
  double unrealizedpnl() const;
  void set_unrealizedpnl(double value);
  private:
  double _internal_unrealizedpnl() const;
  void _internal_set_unrealizedpnl(double value);
  public:

  // double realizedPNL = 7;
  bool has_realizedpnl() const;
  private:
  bool _internal_has_realizedpnl() const;
  public:
  void clear_realizedpnl();
  double realizedpnl() const;
  void set_realizedpnl(double value);
  private:
  double _internal_realizedpnl() const;
  void _internal_set_realizedpnl(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.PortfolioValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
  ::protobuf::Contract* contract_;
  double marketprice_;
  double marketvalue_;
  double averagecost_;
  double unrealizedpnl_;
  double realizedpnl_;
  friend struct ::TableStruct_PortfolioValue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PortfolioValue

// .protobuf.Contract contract = 1;
inline bool PortfolioValue::_internal_has_contract() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || contract_ != nullptr);
  return value;
}
inline bool PortfolioValue::has_contract() const {
  return _internal_has_contract();
}
inline const ::protobuf::Contract& PortfolioValue::_internal_contract() const {
  const ::protobuf::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::Contract*>(
      &::protobuf::_Contract_default_instance_);
}
inline const ::protobuf::Contract& PortfolioValue::contract() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.contract)
  return _internal_contract();
}
inline void PortfolioValue::unsafe_arena_set_allocated_contract(
    ::protobuf::Contract* contract) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PortfolioValue.contract)
}
inline ::protobuf::Contract* PortfolioValue::release_contract() {
  auto temp = unsafe_arena_release_contract();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::Contract* PortfolioValue::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:protobuf.PortfolioValue.contract)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::protobuf::Contract* PortfolioValue::_internal_mutable_contract() {
  _has_bits_[0] |= 0x00000004u;
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Contract>(GetArena());
    contract_ = p;
  }
  return contract_;
}
inline ::protobuf::Contract* PortfolioValue::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:protobuf.PortfolioValue.contract)
  return _internal_mutable_contract();
}
inline void PortfolioValue::set_allocated_contract(::protobuf::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract)->GetArena();
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:protobuf.PortfolioValue.contract)
}

// string position = 2;
inline bool PortfolioValue::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortfolioValue::has_position() const {
  return _internal_has_position();
}
inline void PortfolioValue::clear_position() {
  position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PortfolioValue::position() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.position)
  return _internal_position();
}
inline void PortfolioValue::set_position(const std::string& value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.position)
}
inline std::string* PortfolioValue::mutable_position() {
  // @@protoc_insertion_point(field_mutable:protobuf.PortfolioValue.position)
  return _internal_mutable_position();
}
inline const std::string& PortfolioValue::_internal_position() const {
  return position_.Get();
}
inline void PortfolioValue::_internal_set_position(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioValue::set_position(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.PortfolioValue.position)
}
inline void PortfolioValue::set_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.PortfolioValue.position)
}
inline void PortfolioValue::set_position(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.PortfolioValue.position)
}
inline std::string* PortfolioValue::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  return position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioValue::release_position() {
  // @@protoc_insertion_point(field_release:protobuf.PortfolioValue.position)
  if (!_internal_has_position()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return position_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioValue::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.PortfolioValue.position)
}
inline std::string* PortfolioValue::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PortfolioValue.position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioValue::unsafe_arena_set_allocated_position(
    std::string* position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PortfolioValue.position)
}

// double marketPrice = 3;
inline bool PortfolioValue::_internal_has_marketprice() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PortfolioValue::has_marketprice() const {
  return _internal_has_marketprice();
}
inline void PortfolioValue::clear_marketprice() {
  marketprice_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PortfolioValue::_internal_marketprice() const {
  return marketprice_;
}
inline double PortfolioValue::marketprice() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.marketPrice)
  return _internal_marketprice();
}
inline void PortfolioValue::_internal_set_marketprice(double value) {
  _has_bits_[0] |= 0x00000008u;
  marketprice_ = value;
}
inline void PortfolioValue::set_marketprice(double value) {
  _internal_set_marketprice(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.marketPrice)
}

// double marketValue = 4;
inline bool PortfolioValue::_internal_has_marketvalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PortfolioValue::has_marketvalue() const {
  return _internal_has_marketvalue();
}
inline void PortfolioValue::clear_marketvalue() {
  marketvalue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PortfolioValue::_internal_marketvalue() const {
  return marketvalue_;
}
inline double PortfolioValue::marketvalue() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.marketValue)
  return _internal_marketvalue();
}
inline void PortfolioValue::_internal_set_marketvalue(double value) {
  _has_bits_[0] |= 0x00000010u;
  marketvalue_ = value;
}
inline void PortfolioValue::set_marketvalue(double value) {
  _internal_set_marketvalue(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.marketValue)
}

// double averageCost = 5;
inline bool PortfolioValue::_internal_has_averagecost() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PortfolioValue::has_averagecost() const {
  return _internal_has_averagecost();
}
inline void PortfolioValue::clear_averagecost() {
  averagecost_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PortfolioValue::_internal_averagecost() const {
  return averagecost_;
}
inline double PortfolioValue::averagecost() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.averageCost)
  return _internal_averagecost();
}
inline void PortfolioValue::_internal_set_averagecost(double value) {
  _has_bits_[0] |= 0x00000020u;
  averagecost_ = value;
}
inline void PortfolioValue::set_averagecost(double value) {
  _internal_set_averagecost(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.averageCost)
}

// double unrealizedPNL = 6;
inline bool PortfolioValue::_internal_has_unrealizedpnl() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PortfolioValue::has_unrealizedpnl() const {
  return _internal_has_unrealizedpnl();
}
inline void PortfolioValue::clear_unrealizedpnl() {
  unrealizedpnl_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PortfolioValue::_internal_unrealizedpnl() const {
  return unrealizedpnl_;
}
inline double PortfolioValue::unrealizedpnl() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.unrealizedPNL)
  return _internal_unrealizedpnl();
}
inline void PortfolioValue::_internal_set_unrealizedpnl(double value) {
  _has_bits_[0] |= 0x00000040u;
  unrealizedpnl_ = value;
}
inline void PortfolioValue::set_unrealizedpnl(double value) {
  _internal_set_unrealizedpnl(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.unrealizedPNL)
}

// double realizedPNL = 7;
inline bool PortfolioValue::_internal_has_realizedpnl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PortfolioValue::has_realizedpnl() const {
  return _internal_has_realizedpnl();
}
inline void PortfolioValue::clear_realizedpnl() {
  realizedpnl_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PortfolioValue::_internal_realizedpnl() const {
  return realizedpnl_;
}
inline double PortfolioValue::realizedpnl() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.realizedPNL)
  return _internal_realizedpnl();
}
inline void PortfolioValue::_internal_set_realizedpnl(double value) {
  _has_bits_[0] |= 0x00000080u;
  realizedpnl_ = value;
}
inline void PortfolioValue::set_realizedpnl(double value) {
  _internal_set_realizedpnl(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.realizedPNL)
}

// string accountName = 8;
inline bool PortfolioValue::_internal_has_accountname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PortfolioValue::has_accountname() const {
  return _internal_has_accountname();
}
inline void PortfolioValue::clear_accountname() {
  accountname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PortfolioValue::accountname() const {
  // @@protoc_insertion_point(field_get:protobuf.PortfolioValue.accountName)
  return _internal_accountname();
}
inline void PortfolioValue::set_accountname(const std::string& value) {
  _internal_set_accountname(value);
  // @@protoc_insertion_point(field_set:protobuf.PortfolioValue.accountName)
}
inline std::string* PortfolioValue::mutable_accountname() {
  // @@protoc_insertion_point(field_mutable:protobuf.PortfolioValue.accountName)
  return _internal_mutable_accountname();
}
inline const std::string& PortfolioValue::_internal_accountname() const {
  return accountname_.Get();
}
inline void PortfolioValue::_internal_set_accountname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioValue::set_accountname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  accountname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.PortfolioValue.accountName)
}
inline void PortfolioValue::set_accountname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.PortfolioValue.accountName)
}
inline void PortfolioValue::set_accountname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  accountname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.PortfolioValue.accountName)
}
inline std::string* PortfolioValue::_internal_mutable_accountname() {
  _has_bits_[0] |= 0x00000002u;
  return accountname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioValue::release_accountname() {
  // @@protoc_insertion_point(field_release:protobuf.PortfolioValue.accountName)
  if (!_internal_has_accountname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return accountname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioValue::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  accountname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.PortfolioValue.accountName)
}
inline std::string* PortfolioValue::unsafe_arena_release_accountname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PortfolioValue.accountName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return accountname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PortfolioValue::unsafe_arena_set_allocated_accountname(
    std::string* accountname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  accountname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PortfolioValue.accountName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PortfolioValue_2eproto
