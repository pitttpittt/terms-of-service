// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalDataRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalDataRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalDataRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Contract.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalDataRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalDataRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalDataRequest_2eproto;
namespace protobuf {
class HistoricalDataRequest;
class HistoricalDataRequestDefaultTypeInternal;
extern HistoricalDataRequestDefaultTypeInternal _HistoricalDataRequest_default_instance_;
class HistoricalDataRequest_ChartOptionsEntry_DoNotUse;
class HistoricalDataRequest_ChartOptionsEntry_DoNotUseDefaultTypeInternal;
extern HistoricalDataRequest_ChartOptionsEntry_DoNotUseDefaultTypeInternal _HistoricalDataRequest_ChartOptionsEntry_DoNotUse_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalDataRequest* Arena::CreateMaybeMessage<::protobuf::HistoricalDataRequest>(Arena*);
template<> ::protobuf::HistoricalDataRequest_ChartOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::HistoricalDataRequest_ChartOptionsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalDataRequest_ChartOptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoricalDataRequest_ChartOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoricalDataRequest_ChartOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HistoricalDataRequest_ChartOptionsEntry_DoNotUse();
  HistoricalDataRequest_ChartOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HistoricalDataRequest_ChartOptionsEntry_DoNotUse& other);
  static const HistoricalDataRequest_ChartOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HistoricalDataRequest_ChartOptionsEntry_DoNotUse*>(&_HistoricalDataRequest_ChartOptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.HistoricalDataRequest.ChartOptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.HistoricalDataRequest.ChartOptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalDataRequest_2eproto);
    return ::descriptor_table_HistoricalDataRequest_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class HistoricalDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalDataRequest) */ {
 public:
  inline HistoricalDataRequest() : HistoricalDataRequest(nullptr) {};
  virtual ~HistoricalDataRequest();

  HistoricalDataRequest(const HistoricalDataRequest& from);
  HistoricalDataRequest(HistoricalDataRequest&& from) noexcept
    : HistoricalDataRequest() {
    *this = ::std::move(from);
  }

  inline HistoricalDataRequest& operator=(const HistoricalDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalDataRequest& operator=(HistoricalDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalDataRequest* internal_default_instance() {
    return reinterpret_cast<const HistoricalDataRequest*>(
               &_HistoricalDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoricalDataRequest& a, HistoricalDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalDataRequest* New() const final {
    return CreateMaybeMessage<HistoricalDataRequest>(nullptr);
  }

  HistoricalDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalDataRequest& from);
  void MergeFrom(const HistoricalDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalDataRequest";
  }
  protected:
  explicit HistoricalDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalDataRequest_2eproto);
    return ::descriptor_table_HistoricalDataRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChartOptionsFieldNumber = 10,
    kEndDateTimeFieldNumber = 3,
    kBarSizeSettingFieldNumber = 4,
    kDurationFieldNumber = 5,
    kWhatToShowFieldNumber = 7,
    kContractFieldNumber = 2,
    kReqIdFieldNumber = 1,
    kUseRTHFieldNumber = 6,
    kKeepUpToDateFieldNumber = 9,
    kFormatDateFieldNumber = 8,
  };
  // map<string, string> chartOptions = 10;
  int chartoptions_size() const;
  private:
  int _internal_chartoptions_size() const;
  public:
  void clear_chartoptions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_chartoptions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_chartoptions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      chartoptions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_chartoptions();

  // string endDateTime = 3;
  bool has_enddatetime() const;
  private:
  bool _internal_has_enddatetime() const;
  public:
  void clear_enddatetime();
  const std::string& enddatetime() const;
  void set_enddatetime(const std::string& value);
  void set_enddatetime(std::string&& value);
  void set_enddatetime(const char* value);
  void set_enddatetime(const char* value, size_t size);
  std::string* mutable_enddatetime();
  std::string* release_enddatetime();
  void set_allocated_enddatetime(std::string* enddatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enddatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enddatetime(
      std::string* enddatetime);
  private:
  const std::string& _internal_enddatetime() const;
  void _internal_set_enddatetime(const std::string& value);
  std::string* _internal_mutable_enddatetime();
  public:

  // string barSizeSetting = 4;
  bool has_barsizesetting() const;
  private:
  bool _internal_has_barsizesetting() const;
  public:
  void clear_barsizesetting();
  const std::string& barsizesetting() const;
  void set_barsizesetting(const std::string& value);
  void set_barsizesetting(std::string&& value);
  void set_barsizesetting(const char* value);
  void set_barsizesetting(const char* value, size_t size);
  std::string* mutable_barsizesetting();
  std::string* release_barsizesetting();
  void set_allocated_barsizesetting(std::string* barsizesetting);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_barsizesetting();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_barsizesetting(
      std::string* barsizesetting);
  private:
  const std::string& _internal_barsizesetting() const;
  void _internal_set_barsizesetting(const std::string& value);
  std::string* _internal_mutable_barsizesetting();
  public:

  // string duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const std::string& duration() const;
  void set_duration(const std::string& value);
  void set_duration(std::string&& value);
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  std::string* mutable_duration();
  std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_duration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_duration(
      std::string* duration);
  private:
  const std::string& _internal_duration() const;
  void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // string whatToShow = 7;
  bool has_whattoshow() const;
  private:
  bool _internal_has_whattoshow() const;
  public:
  void clear_whattoshow();
  const std::string& whattoshow() const;
  void set_whattoshow(const std::string& value);
  void set_whattoshow(std::string&& value);
  void set_whattoshow(const char* value);
  void set_whattoshow(const char* value, size_t size);
  std::string* mutable_whattoshow();
  std::string* release_whattoshow();
  void set_allocated_whattoshow(std::string* whattoshow);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_whattoshow();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_whattoshow(
      std::string* whattoshow);
  private:
  const std::string& _internal_whattoshow() const;
  void _internal_set_whattoshow(const std::string& value);
  std::string* _internal_mutable_whattoshow();
  public:

  // .protobuf.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::protobuf::Contract& contract() const;
  ::protobuf::Contract* release_contract();
  ::protobuf::Contract* mutable_contract();
  void set_allocated_contract(::protobuf::Contract* contract);
  private:
  const ::protobuf::Contract& _internal_contract() const;
  ::protobuf::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::protobuf::Contract* contract);
  ::protobuf::Contract* unsafe_arena_release_contract();

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool useRTH = 6;
  bool has_userth() const;
  private:
  bool _internal_has_userth() const;
  public:
  void clear_userth();
  bool userth() const;
  void set_userth(bool value);
  private:
  bool _internal_userth() const;
  void _internal_set_userth(bool value);
  public:

  // bool keepUpToDate = 9;
  bool has_keepuptodate() const;
  private:
  bool _internal_has_keepuptodate() const;
  public:
  void clear_keepuptodate();
  bool keepuptodate() const;
  void set_keepuptodate(bool value);
  private:
  bool _internal_keepuptodate() const;
  void _internal_set_keepuptodate(bool value);
  public:

  // int32 formatDate = 8;
  bool has_formatdate() const;
  private:
  bool _internal_has_formatdate() const;
  public:
  void clear_formatdate();
  ::PROTOBUF_NAMESPACE_ID::int32 formatdate() const;
  void set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_formatdate() const;
  void _internal_set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HistoricalDataRequest_ChartOptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > chartoptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr barsizesetting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whattoshow_;
  ::protobuf::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  bool userth_;
  bool keepuptodate_;
  ::PROTOBUF_NAMESPACE_ID::int32 formatdate_;
  friend struct ::TableStruct_HistoricalDataRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HistoricalDataRequest

// int32 reqId = 1;
inline bool HistoricalDataRequest::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_reqid() const {
  return _internal_has_reqid();
}
inline void HistoricalDataRequest::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataRequest::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataRequest::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.reqId)
  return _internal_reqid();
}
inline void HistoricalDataRequest::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  reqid_ = value;
}
inline void HistoricalDataRequest::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.reqId)
}

// .protobuf.Contract contract = 2;
inline bool HistoricalDataRequest::_internal_has_contract() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || contract_ != nullptr);
  return value;
}
inline bool HistoricalDataRequest::has_contract() const {
  return _internal_has_contract();
}
inline const ::protobuf::Contract& HistoricalDataRequest::_internal_contract() const {
  const ::protobuf::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::Contract*>(
      &::protobuf::_Contract_default_instance_);
}
inline const ::protobuf::Contract& HistoricalDataRequest::contract() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.contract)
  return _internal_contract();
}
inline void HistoricalDataRequest::unsafe_arena_set_allocated_contract(
    ::protobuf::Contract* contract) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataRequest.contract)
}
inline ::protobuf::Contract* HistoricalDataRequest::release_contract() {
  auto temp = unsafe_arena_release_contract();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::Contract* HistoricalDataRequest::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataRequest.contract)
  _has_bits_[0] &= ~0x00000010u;
  ::protobuf::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::protobuf::Contract* HistoricalDataRequest::_internal_mutable_contract() {
  _has_bits_[0] |= 0x00000010u;
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Contract>(GetArena());
    contract_ = p;
  }
  return contract_;
}
inline ::protobuf::Contract* HistoricalDataRequest::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataRequest.contract)
  return _internal_mutable_contract();
}
inline void HistoricalDataRequest::set_allocated_contract(::protobuf::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract)->GetArena();
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataRequest.contract)
}

// string endDateTime = 3;
inline bool HistoricalDataRequest::_internal_has_enddatetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_enddatetime() const {
  return _internal_has_enddatetime();
}
inline void HistoricalDataRequest::clear_enddatetime() {
  enddatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistoricalDataRequest::enddatetime() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.endDateTime)
  return _internal_enddatetime();
}
inline void HistoricalDataRequest::set_enddatetime(const std::string& value) {
  _internal_set_enddatetime(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.endDateTime)
}
inline std::string* HistoricalDataRequest::mutable_enddatetime() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataRequest.endDateTime)
  return _internal_mutable_enddatetime();
}
inline const std::string& HistoricalDataRequest::_internal_enddatetime() const {
  return enddatetime_.Get();
}
inline void HistoricalDataRequest::_internal_set_enddatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataRequest::set_enddatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  enddatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataRequest.endDateTime)
}
inline void HistoricalDataRequest::set_enddatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataRequest.endDateTime)
}
inline void HistoricalDataRequest::set_enddatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataRequest.endDateTime)
}
inline std::string* HistoricalDataRequest::_internal_mutable_enddatetime() {
  _has_bits_[0] |= 0x00000001u;
  return enddatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataRequest::release_enddatetime() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataRequest.endDateTime)
  if (!_internal_has_enddatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return enddatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataRequest::set_allocated_enddatetime(std::string* enddatetime) {
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enddatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataRequest.endDateTime)
}
inline std::string* HistoricalDataRequest::unsafe_arena_release_enddatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataRequest.endDateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return enddatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataRequest::unsafe_arena_set_allocated_enddatetime(
    std::string* enddatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enddatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      enddatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataRequest.endDateTime)
}

// string barSizeSetting = 4;
inline bool HistoricalDataRequest::_internal_has_barsizesetting() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_barsizesetting() const {
  return _internal_has_barsizesetting();
}
inline void HistoricalDataRequest::clear_barsizesetting() {
  barsizesetting_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistoricalDataRequest::barsizesetting() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.barSizeSetting)
  return _internal_barsizesetting();
}
inline void HistoricalDataRequest::set_barsizesetting(const std::string& value) {
  _internal_set_barsizesetting(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.barSizeSetting)
}
inline std::string* HistoricalDataRequest::mutable_barsizesetting() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataRequest.barSizeSetting)
  return _internal_mutable_barsizesetting();
}
inline const std::string& HistoricalDataRequest::_internal_barsizesetting() const {
  return barsizesetting_.Get();
}
inline void HistoricalDataRequest::_internal_set_barsizesetting(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  barsizesetting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataRequest::set_barsizesetting(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  barsizesetting_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataRequest.barSizeSetting)
}
inline void HistoricalDataRequest::set_barsizesetting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  barsizesetting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataRequest.barSizeSetting)
}
inline void HistoricalDataRequest::set_barsizesetting(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  barsizesetting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataRequest.barSizeSetting)
}
inline std::string* HistoricalDataRequest::_internal_mutable_barsizesetting() {
  _has_bits_[0] |= 0x00000002u;
  return barsizesetting_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataRequest::release_barsizesetting() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataRequest.barSizeSetting)
  if (!_internal_has_barsizesetting()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return barsizesetting_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataRequest::set_allocated_barsizesetting(std::string* barsizesetting) {
  if (barsizesetting != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  barsizesetting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), barsizesetting,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataRequest.barSizeSetting)
}
inline std::string* HistoricalDataRequest::unsafe_arena_release_barsizesetting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataRequest.barSizeSetting)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return barsizesetting_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataRequest::unsafe_arena_set_allocated_barsizesetting(
    std::string* barsizesetting) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (barsizesetting != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  barsizesetting_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      barsizesetting, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataRequest.barSizeSetting)
}

// string duration = 5;
inline bool HistoricalDataRequest::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_duration() const {
  return _internal_has_duration();
}
inline void HistoricalDataRequest::clear_duration() {
  duration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HistoricalDataRequest::duration() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.duration)
  return _internal_duration();
}
inline void HistoricalDataRequest::set_duration(const std::string& value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.duration)
}
inline std::string* HistoricalDataRequest::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataRequest.duration)
  return _internal_mutable_duration();
}
inline const std::string& HistoricalDataRequest::_internal_duration() const {
  return duration_.Get();
}
inline void HistoricalDataRequest::_internal_set_duration(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataRequest::set_duration(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  duration_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataRequest.duration)
}
inline void HistoricalDataRequest::set_duration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataRequest.duration)
}
inline void HistoricalDataRequest::set_duration(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataRequest.duration)
}
inline std::string* HistoricalDataRequest::_internal_mutable_duration() {
  _has_bits_[0] |= 0x00000004u;
  return duration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataRequest::release_duration() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataRequest.duration)
  if (!_internal_has_duration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return duration_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataRequest::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  duration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataRequest.duration)
}
inline std::string* HistoricalDataRequest::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataRequest.duration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return duration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataRequest::unsafe_arena_set_allocated_duration(
    std::string* duration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (duration != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  duration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      duration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataRequest.duration)
}

// bool useRTH = 6;
inline bool HistoricalDataRequest::_internal_has_userth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_userth() const {
  return _internal_has_userth();
}
inline void HistoricalDataRequest::clear_userth() {
  userth_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HistoricalDataRequest::_internal_userth() const {
  return userth_;
}
inline bool HistoricalDataRequest::userth() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.useRTH)
  return _internal_userth();
}
inline void HistoricalDataRequest::_internal_set_userth(bool value) {
  _has_bits_[0] |= 0x00000040u;
  userth_ = value;
}
inline void HistoricalDataRequest::set_userth(bool value) {
  _internal_set_userth(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.useRTH)
}

// string whatToShow = 7;
inline bool HistoricalDataRequest::_internal_has_whattoshow() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_whattoshow() const {
  return _internal_has_whattoshow();
}
inline void HistoricalDataRequest::clear_whattoshow() {
  whattoshow_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& HistoricalDataRequest::whattoshow() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.whatToShow)
  return _internal_whattoshow();
}
inline void HistoricalDataRequest::set_whattoshow(const std::string& value) {
  _internal_set_whattoshow(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.whatToShow)
}
inline std::string* HistoricalDataRequest::mutable_whattoshow() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalDataRequest.whatToShow)
  return _internal_mutable_whattoshow();
}
inline const std::string& HistoricalDataRequest::_internal_whattoshow() const {
  return whattoshow_.Get();
}
inline void HistoricalDataRequest::_internal_set_whattoshow(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalDataRequest::set_whattoshow(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  whattoshow_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalDataRequest.whatToShow)
}
inline void HistoricalDataRequest::set_whattoshow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalDataRequest.whatToShow)
}
inline void HistoricalDataRequest::set_whattoshow(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalDataRequest.whatToShow)
}
inline std::string* HistoricalDataRequest::_internal_mutable_whattoshow() {
  _has_bits_[0] |= 0x00000008u;
  return whattoshow_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalDataRequest::release_whattoshow() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalDataRequest.whatToShow)
  if (!_internal_has_whattoshow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return whattoshow_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalDataRequest::set_allocated_whattoshow(std::string* whattoshow) {
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  whattoshow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whattoshow,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalDataRequest.whatToShow)
}
inline std::string* HistoricalDataRequest::unsafe_arena_release_whattoshow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalDataRequest.whatToShow)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return whattoshow_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalDataRequest::unsafe_arena_set_allocated_whattoshow(
    std::string* whattoshow) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  whattoshow_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      whattoshow, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalDataRequest.whatToShow)
}

// int32 formatDate = 8;
inline bool HistoricalDataRequest::_internal_has_formatdate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_formatdate() const {
  return _internal_has_formatdate();
}
inline void HistoricalDataRequest::clear_formatdate() {
  formatdate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataRequest::_internal_formatdate() const {
  return formatdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalDataRequest::formatdate() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.formatDate)
  return _internal_formatdate();
}
inline void HistoricalDataRequest::_internal_set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  formatdate_ = value;
}
inline void HistoricalDataRequest::set_formatdate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_formatdate(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.formatDate)
}

// bool keepUpToDate = 9;
inline bool HistoricalDataRequest::_internal_has_keepuptodate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HistoricalDataRequest::has_keepuptodate() const {
  return _internal_has_keepuptodate();
}
inline void HistoricalDataRequest::clear_keepuptodate() {
  keepuptodate_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HistoricalDataRequest::_internal_keepuptodate() const {
  return keepuptodate_;
}
inline bool HistoricalDataRequest::keepuptodate() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalDataRequest.keepUpToDate)
  return _internal_keepuptodate();
}
inline void HistoricalDataRequest::_internal_set_keepuptodate(bool value) {
  _has_bits_[0] |= 0x00000080u;
  keepuptodate_ = value;
}
inline void HistoricalDataRequest::set_keepuptodate(bool value) {
  _internal_set_keepuptodate(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalDataRequest.keepUpToDate)
}

// map<string, string> chartOptions = 10;
inline int HistoricalDataRequest::_internal_chartoptions_size() const {
  return chartoptions_.size();
}
inline int HistoricalDataRequest::chartoptions_size() const {
  return _internal_chartoptions_size();
}
inline void HistoricalDataRequest::clear_chartoptions() {
  chartoptions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HistoricalDataRequest::_internal_chartoptions() const {
  return chartoptions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HistoricalDataRequest::chartoptions() const {
  // @@protoc_insertion_point(field_map:protobuf.HistoricalDataRequest.chartOptions)
  return _internal_chartoptions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HistoricalDataRequest::_internal_mutable_chartoptions() {
  return chartoptions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HistoricalDataRequest::mutable_chartoptions() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.HistoricalDataRequest.chartOptions)
  return _internal_mutable_chartoptions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalDataRequest_2eproto
