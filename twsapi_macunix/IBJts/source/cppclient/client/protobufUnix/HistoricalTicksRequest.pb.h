// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTicksRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HistoricalTicksRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HistoricalTicksRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Contract.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HistoricalTicksRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HistoricalTicksRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTicksRequest_2eproto;
namespace protobuf {
class HistoricalTicksRequest;
class HistoricalTicksRequestDefaultTypeInternal;
extern HistoricalTicksRequestDefaultTypeInternal _HistoricalTicksRequest_default_instance_;
class HistoricalTicksRequest_MiscOptionsEntry_DoNotUse;
class HistoricalTicksRequest_MiscOptionsEntry_DoNotUseDefaultTypeInternal;
extern HistoricalTicksRequest_MiscOptionsEntry_DoNotUseDefaultTypeInternal _HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::HistoricalTicksRequest* Arena::CreateMaybeMessage<::protobuf::HistoricalTicksRequest>(Arena*);
template<> ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class HistoricalTicksRequest_MiscOptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HistoricalTicksRequest_MiscOptionsEntry_DoNotUse();
  HistoricalTicksRequest_MiscOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HistoricalTicksRequest_MiscOptionsEntry_DoNotUse& other);
  static const HistoricalTicksRequest_MiscOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HistoricalTicksRequest_MiscOptionsEntry_DoNotUse*>(&_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.HistoricalTicksRequest.MiscOptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.HistoricalTicksRequest.MiscOptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalTicksRequest_2eproto);
    return ::descriptor_table_HistoricalTicksRequest_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class HistoricalTicksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HistoricalTicksRequest) */ {
 public:
  inline HistoricalTicksRequest() : HistoricalTicksRequest(nullptr) {};
  virtual ~HistoricalTicksRequest();

  HistoricalTicksRequest(const HistoricalTicksRequest& from);
  HistoricalTicksRequest(HistoricalTicksRequest&& from) noexcept
    : HistoricalTicksRequest() {
    *this = ::std::move(from);
  }

  inline HistoricalTicksRequest& operator=(const HistoricalTicksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalTicksRequest& operator=(HistoricalTicksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalTicksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalTicksRequest* internal_default_instance() {
    return reinterpret_cast<const HistoricalTicksRequest*>(
               &_HistoricalTicksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoricalTicksRequest& a, HistoricalTicksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalTicksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalTicksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalTicksRequest* New() const final {
    return CreateMaybeMessage<HistoricalTicksRequest>(nullptr);
  }

  HistoricalTicksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalTicksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalTicksRequest& from);
  void MergeFrom(const HistoricalTicksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalTicksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.HistoricalTicksRequest";
  }
  protected:
  explicit HistoricalTicksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HistoricalTicksRequest_2eproto);
    return ::descriptor_table_HistoricalTicksRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMiscOptionsFieldNumber = 9,
    kStartDateTimeFieldNumber = 3,
    kEndDateTimeFieldNumber = 4,
    kWhatToShowFieldNumber = 6,
    kContractFieldNumber = 2,
    kReqIdFieldNumber = 1,
    kNumberOfTicksFieldNumber = 5,
    kUseRTHFieldNumber = 7,
    kIgnoreSizeFieldNumber = 8,
  };
  // map<string, string> miscOptions = 9;
  int miscoptions_size() const;
  private:
  int _internal_miscoptions_size() const;
  public:
  void clear_miscoptions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_miscoptions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_miscoptions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      miscoptions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_miscoptions();

  // string startDateTime = 3;
  bool has_startdatetime() const;
  private:
  bool _internal_has_startdatetime() const;
  public:
  void clear_startdatetime();
  const std::string& startdatetime() const;
  void set_startdatetime(const std::string& value);
  void set_startdatetime(std::string&& value);
  void set_startdatetime(const char* value);
  void set_startdatetime(const char* value, size_t size);
  std::string* mutable_startdatetime();
  std::string* release_startdatetime();
  void set_allocated_startdatetime(std::string* startdatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_startdatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_startdatetime(
      std::string* startdatetime);
  private:
  const std::string& _internal_startdatetime() const;
  void _internal_set_startdatetime(const std::string& value);
  std::string* _internal_mutable_startdatetime();
  public:

  // string endDateTime = 4;
  bool has_enddatetime() const;
  private:
  bool _internal_has_enddatetime() const;
  public:
  void clear_enddatetime();
  const std::string& enddatetime() const;
  void set_enddatetime(const std::string& value);
  void set_enddatetime(std::string&& value);
  void set_enddatetime(const char* value);
  void set_enddatetime(const char* value, size_t size);
  std::string* mutable_enddatetime();
  std::string* release_enddatetime();
  void set_allocated_enddatetime(std::string* enddatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enddatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enddatetime(
      std::string* enddatetime);
  private:
  const std::string& _internal_enddatetime() const;
  void _internal_set_enddatetime(const std::string& value);
  std::string* _internal_mutable_enddatetime();
  public:

  // string whatToShow = 6;
  bool has_whattoshow() const;
  private:
  bool _internal_has_whattoshow() const;
  public:
  void clear_whattoshow();
  const std::string& whattoshow() const;
  void set_whattoshow(const std::string& value);
  void set_whattoshow(std::string&& value);
  void set_whattoshow(const char* value);
  void set_whattoshow(const char* value, size_t size);
  std::string* mutable_whattoshow();
  std::string* release_whattoshow();
  void set_allocated_whattoshow(std::string* whattoshow);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_whattoshow();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_whattoshow(
      std::string* whattoshow);
  private:
  const std::string& _internal_whattoshow() const;
  void _internal_set_whattoshow(const std::string& value);
  std::string* _internal_mutable_whattoshow();
  public:

  // .protobuf.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::protobuf::Contract& contract() const;
  ::protobuf::Contract* release_contract();
  ::protobuf::Contract* mutable_contract();
  void set_allocated_contract(::protobuf::Contract* contract);
  private:
  const ::protobuf::Contract& _internal_contract() const;
  ::protobuf::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::protobuf::Contract* contract);
  ::protobuf::Contract* unsafe_arena_release_contract();

  // int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numberOfTicks = 5;
  bool has_numberofticks() const;
  private:
  bool _internal_has_numberofticks() const;
  public:
  void clear_numberofticks();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofticks() const;
  void set_numberofticks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofticks() const;
  void _internal_set_numberofticks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool useRTH = 7;
  bool has_userth() const;
  private:
  bool _internal_has_userth() const;
  public:
  void clear_userth();
  bool userth() const;
  void set_userth(bool value);
  private:
  bool _internal_userth() const;
  void _internal_set_userth(bool value);
  public:

  // bool ignoreSize = 8;
  bool has_ignoresize() const;
  private:
  bool _internal_has_ignoresize() const;
  public:
  void clear_ignoresize();
  bool ignoresize() const;
  void set_ignoresize(bool value);
  private:
  bool _internal_ignoresize() const;
  void _internal_set_ignoresize(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.HistoricalTicksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HistoricalTicksRequest_MiscOptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > miscoptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whattoshow_;
  ::protobuf::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofticks_;
  bool userth_;
  bool ignoresize_;
  friend struct ::TableStruct_HistoricalTicksRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HistoricalTicksRequest

// int32 reqId = 1;
inline bool HistoricalTicksRequest::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_reqid() const {
  return _internal_has_reqid();
}
inline void HistoricalTicksRequest::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicksRequest::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicksRequest::reqid() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.reqId)
  return _internal_reqid();
}
inline void HistoricalTicksRequest::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reqid_ = value;
}
inline void HistoricalTicksRequest::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.reqId)
}

// .protobuf.Contract contract = 2;
inline bool HistoricalTicksRequest::_internal_has_contract() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || contract_ != nullptr);
  return value;
}
inline bool HistoricalTicksRequest::has_contract() const {
  return _internal_has_contract();
}
inline const ::protobuf::Contract& HistoricalTicksRequest::_internal_contract() const {
  const ::protobuf::Contract* p = contract_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::Contract*>(
      &::protobuf::_Contract_default_instance_);
}
inline const ::protobuf::Contract& HistoricalTicksRequest::contract() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.contract)
  return _internal_contract();
}
inline void HistoricalTicksRequest::unsafe_arena_set_allocated_contract(
    ::protobuf::Contract* contract) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTicksRequest.contract)
}
inline ::protobuf::Contract* HistoricalTicksRequest::release_contract() {
  auto temp = unsafe_arena_release_contract();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::Contract* HistoricalTicksRequest::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTicksRequest.contract)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::protobuf::Contract* HistoricalTicksRequest::_internal_mutable_contract() {
  _has_bits_[0] |= 0x00000008u;
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Contract>(GetArena());
    contract_ = p;
  }
  return contract_;
}
inline ::protobuf::Contract* HistoricalTicksRequest::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTicksRequest.contract)
  return _internal_mutable_contract();
}
inline void HistoricalTicksRequest::set_allocated_contract(::protobuf::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract)->GetArena();
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTicksRequest.contract)
}

// string startDateTime = 3;
inline bool HistoricalTicksRequest::_internal_has_startdatetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_startdatetime() const {
  return _internal_has_startdatetime();
}
inline void HistoricalTicksRequest::clear_startdatetime() {
  startdatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HistoricalTicksRequest::startdatetime() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.startDateTime)
  return _internal_startdatetime();
}
inline void HistoricalTicksRequest::set_startdatetime(const std::string& value) {
  _internal_set_startdatetime(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.startDateTime)
}
inline std::string* HistoricalTicksRequest::mutable_startdatetime() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTicksRequest.startDateTime)
  return _internal_mutable_startdatetime();
}
inline const std::string& HistoricalTicksRequest::_internal_startdatetime() const {
  return startdatetime_.Get();
}
inline void HistoricalTicksRequest::_internal_set_startdatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  startdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTicksRequest::set_startdatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  startdatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTicksRequest.startDateTime)
}
inline void HistoricalTicksRequest::set_startdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  startdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTicksRequest.startDateTime)
}
inline void HistoricalTicksRequest::set_startdatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  startdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTicksRequest.startDateTime)
}
inline std::string* HistoricalTicksRequest::_internal_mutable_startdatetime() {
  _has_bits_[0] |= 0x00000001u;
  return startdatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTicksRequest::release_startdatetime() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTicksRequest.startDateTime)
  if (!_internal_has_startdatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return startdatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTicksRequest::set_allocated_startdatetime(std::string* startdatetime) {
  if (startdatetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  startdatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startdatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTicksRequest.startDateTime)
}
inline std::string* HistoricalTicksRequest::unsafe_arena_release_startdatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTicksRequest.startDateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return startdatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTicksRequest::unsafe_arena_set_allocated_startdatetime(
    std::string* startdatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (startdatetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  startdatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      startdatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTicksRequest.startDateTime)
}

// string endDateTime = 4;
inline bool HistoricalTicksRequest::_internal_has_enddatetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_enddatetime() const {
  return _internal_has_enddatetime();
}
inline void HistoricalTicksRequest::clear_enddatetime() {
  enddatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HistoricalTicksRequest::enddatetime() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.endDateTime)
  return _internal_enddatetime();
}
inline void HistoricalTicksRequest::set_enddatetime(const std::string& value) {
  _internal_set_enddatetime(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.endDateTime)
}
inline std::string* HistoricalTicksRequest::mutable_enddatetime() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTicksRequest.endDateTime)
  return _internal_mutable_enddatetime();
}
inline const std::string& HistoricalTicksRequest::_internal_enddatetime() const {
  return enddatetime_.Get();
}
inline void HistoricalTicksRequest::_internal_set_enddatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTicksRequest::set_enddatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  enddatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTicksRequest.endDateTime)
}
inline void HistoricalTicksRequest::set_enddatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTicksRequest.endDateTime)
}
inline void HistoricalTicksRequest::set_enddatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTicksRequest.endDateTime)
}
inline std::string* HistoricalTicksRequest::_internal_mutable_enddatetime() {
  _has_bits_[0] |= 0x00000002u;
  return enddatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTicksRequest::release_enddatetime() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTicksRequest.endDateTime)
  if (!_internal_has_enddatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return enddatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTicksRequest::set_allocated_enddatetime(std::string* enddatetime) {
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enddatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTicksRequest.endDateTime)
}
inline std::string* HistoricalTicksRequest::unsafe_arena_release_enddatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTicksRequest.endDateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return enddatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTicksRequest::unsafe_arena_set_allocated_enddatetime(
    std::string* enddatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enddatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      enddatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTicksRequest.endDateTime)
}

// int32 numberOfTicks = 5;
inline bool HistoricalTicksRequest::_internal_has_numberofticks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_numberofticks() const {
  return _internal_has_numberofticks();
}
inline void HistoricalTicksRequest::clear_numberofticks() {
  numberofticks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicksRequest::_internal_numberofticks() const {
  return numberofticks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricalTicksRequest::numberofticks() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.numberOfTicks)
  return _internal_numberofticks();
}
inline void HistoricalTicksRequest::_internal_set_numberofticks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  numberofticks_ = value;
}
inline void HistoricalTicksRequest::set_numberofticks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofticks(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.numberOfTicks)
}

// string whatToShow = 6;
inline bool HistoricalTicksRequest::_internal_has_whattoshow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_whattoshow() const {
  return _internal_has_whattoshow();
}
inline void HistoricalTicksRequest::clear_whattoshow() {
  whattoshow_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HistoricalTicksRequest::whattoshow() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.whatToShow)
  return _internal_whattoshow();
}
inline void HistoricalTicksRequest::set_whattoshow(const std::string& value) {
  _internal_set_whattoshow(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.whatToShow)
}
inline std::string* HistoricalTicksRequest::mutable_whattoshow() {
  // @@protoc_insertion_point(field_mutable:protobuf.HistoricalTicksRequest.whatToShow)
  return _internal_mutable_whattoshow();
}
inline const std::string& HistoricalTicksRequest::_internal_whattoshow() const {
  return whattoshow_.Get();
}
inline void HistoricalTicksRequest::_internal_set_whattoshow(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoricalTicksRequest::set_whattoshow(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  whattoshow_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.HistoricalTicksRequest.whatToShow)
}
inline void HistoricalTicksRequest::set_whattoshow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.HistoricalTicksRequest.whatToShow)
}
inline void HistoricalTicksRequest::set_whattoshow(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.HistoricalTicksRequest.whatToShow)
}
inline std::string* HistoricalTicksRequest::_internal_mutable_whattoshow() {
  _has_bits_[0] |= 0x00000004u;
  return whattoshow_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoricalTicksRequest::release_whattoshow() {
  // @@protoc_insertion_point(field_release:protobuf.HistoricalTicksRequest.whatToShow)
  if (!_internal_has_whattoshow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return whattoshow_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoricalTicksRequest::set_allocated_whattoshow(std::string* whattoshow) {
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  whattoshow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whattoshow,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.HistoricalTicksRequest.whatToShow)
}
inline std::string* HistoricalTicksRequest::unsafe_arena_release_whattoshow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.HistoricalTicksRequest.whatToShow)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return whattoshow_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoricalTicksRequest::unsafe_arena_set_allocated_whattoshow(
    std::string* whattoshow) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (whattoshow != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  whattoshow_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      whattoshow, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.HistoricalTicksRequest.whatToShow)
}

// bool useRTH = 7;
inline bool HistoricalTicksRequest::_internal_has_userth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_userth() const {
  return _internal_has_userth();
}
inline void HistoricalTicksRequest::clear_userth() {
  userth_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HistoricalTicksRequest::_internal_userth() const {
  return userth_;
}
inline bool HistoricalTicksRequest::userth() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.useRTH)
  return _internal_userth();
}
inline void HistoricalTicksRequest::_internal_set_userth(bool value) {
  _has_bits_[0] |= 0x00000040u;
  userth_ = value;
}
inline void HistoricalTicksRequest::set_userth(bool value) {
  _internal_set_userth(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.useRTH)
}

// bool ignoreSize = 8;
inline bool HistoricalTicksRequest::_internal_has_ignoresize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HistoricalTicksRequest::has_ignoresize() const {
  return _internal_has_ignoresize();
}
inline void HistoricalTicksRequest::clear_ignoresize() {
  ignoresize_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HistoricalTicksRequest::_internal_ignoresize() const {
  return ignoresize_;
}
inline bool HistoricalTicksRequest::ignoresize() const {
  // @@protoc_insertion_point(field_get:protobuf.HistoricalTicksRequest.ignoreSize)
  return _internal_ignoresize();
}
inline void HistoricalTicksRequest::_internal_set_ignoresize(bool value) {
  _has_bits_[0] |= 0x00000080u;
  ignoresize_ = value;
}
inline void HistoricalTicksRequest::set_ignoresize(bool value) {
  _internal_set_ignoresize(value);
  // @@protoc_insertion_point(field_set:protobuf.HistoricalTicksRequest.ignoreSize)
}

// map<string, string> miscOptions = 9;
inline int HistoricalTicksRequest::_internal_miscoptions_size() const {
  return miscoptions_.size();
}
inline int HistoricalTicksRequest::miscoptions_size() const {
  return _internal_miscoptions_size();
}
inline void HistoricalTicksRequest::clear_miscoptions() {
  miscoptions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HistoricalTicksRequest::_internal_miscoptions() const {
  return miscoptions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HistoricalTicksRequest::miscoptions() const {
  // @@protoc_insertion_point(field_map:protobuf.HistoricalTicksRequest.miscOptions)
  return _internal_miscoptions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HistoricalTicksRequest::_internal_mutable_miscoptions() {
  return miscoptions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HistoricalTicksRequest::mutable_miscoptions() {
  // @@protoc_insertion_point(field_mutable_map:protobuf.HistoricalTicksRequest.miscOptions)
  return _internal_mutable_miscoptions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HistoricalTicksRequest_2eproto
