// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HistoricalTicksRequest.proto

#include "HistoricalTicksRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Contract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contract_Contract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HistoricalTicksRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto;
namespace protobuf {
class HistoricalTicksRequest_MiscOptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricalTicksRequest_MiscOptionsEntry_DoNotUse> _instance;
} _HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_default_instance_;
class HistoricalTicksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricalTicksRequest> _instance;
} _HistoricalTicksRequest_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HistoricalTicksRequest_default_instance_;
    new (ptr) ::protobuf::HistoricalTicksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::HistoricalTicksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto}, {
      &scc_info_Contract_Contract_2eproto.base,
      &scc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto.base,}};

static void InitDefaultsscc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse();
  }
  ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HistoricalTicksRequest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_HistoricalTicksRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HistoricalTicksRequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HistoricalTicksRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, reqid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, contract_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, startdatetime_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, enddatetime_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, numberofticks_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, whattoshow_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, userth_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, ignoresize_),
  PROTOBUF_FIELD_OFFSET(::protobuf::HistoricalTicksRequest, miscoptions_),
  4,
  3,
  0,
  1,
  5,
  2,
  6,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse)},
  { 9, 23, sizeof(::protobuf::HistoricalTicksRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_HistoricalTicksRequest_default_instance_),
};

const char descriptor_table_protodef_HistoricalTicksRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034HistoricalTicksRequest.proto\022\010protobuf"
  "\032\016Contract.proto\"\340\003\n\026HistoricalTicksRequ"
  "est\022\022\n\005reqId\030\001 \001(\005H\000\210\001\001\022)\n\010contract\030\002 \001("
  "\0132\022.protobuf.ContractH\001\210\001\001\022\032\n\rstartDateT"
  "ime\030\003 \001(\tH\002\210\001\001\022\030\n\013endDateTime\030\004 \001(\tH\003\210\001\001"
  "\022\032\n\rnumberOfTicks\030\005 \001(\005H\004\210\001\001\022\027\n\nwhatToSh"
  "ow\030\006 \001(\tH\005\210\001\001\022\023\n\006useRTH\030\007 \001(\010H\006\210\001\001\022\027\n\nig"
  "noreSize\030\010 \001(\010H\007\210\001\001\022F\n\013miscOptions\030\t \003(\013"
  "21.protobuf.HistoricalTicksRequest.MiscO"
  "ptionsEntry\0322\n\020MiscOptionsEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\010\n\006_reqIdB\013\n\t_co"
  "ntractB\020\n\016_startDateTimeB\016\n\014_endDateTime"
  "B\020\n\016_numberOfTicksB\r\n\013_whatToShowB\t\n\007_us"
  "eRTHB\r\n\013_ignoreSizeBF\n\026com.ib.client.pro"
  "tobufB\033HistoricalTicksRequestProto\252\002\016IBA"
  "pi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HistoricalTicksRequest_2eproto_deps[1] = {
  &::descriptor_table_Contract_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HistoricalTicksRequest_2eproto_sccs[2] = {
  &scc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto.base,
  &scc_info_HistoricalTicksRequest_MiscOptionsEntry_DoNotUse_HistoricalTicksRequest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HistoricalTicksRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HistoricalTicksRequest_2eproto = {
  false, false, descriptor_table_protodef_HistoricalTicksRequest_2eproto, "HistoricalTicksRequest.proto", 619,
  &descriptor_table_HistoricalTicksRequest_2eproto_once, descriptor_table_HistoricalTicksRequest_2eproto_sccs, descriptor_table_HistoricalTicksRequest_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_HistoricalTicksRequest_2eproto::offsets,
  file_level_metadata_HistoricalTicksRequest_2eproto, 2, file_level_enum_descriptors_HistoricalTicksRequest_2eproto, file_level_service_descriptors_HistoricalTicksRequest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HistoricalTicksRequest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HistoricalTicksRequest_2eproto)), true);
namespace protobuf {

// ===================================================================

HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse() {}
HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::MergeFrom(const HistoricalTicksRequest_MiscOptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HistoricalTicksRequest::InitAsDefaultInstance() {
  ::protobuf::_HistoricalTicksRequest_default_instance_._instance.get_mutable()->contract_ = const_cast< ::protobuf::Contract*>(
      ::protobuf::Contract::internal_default_instance());
}
class HistoricalTicksRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricalTicksRequest>()._has_bits_);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf::Contract& contract(const HistoricalTicksRequest* msg);
  static void set_has_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_startdatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enddatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numberofticks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_whattoshow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_userth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignoresize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::protobuf::Contract&
HistoricalTicksRequest::_Internal::contract(const HistoricalTicksRequest* msg) {
  return *msg->contract_;
}
void HistoricalTicksRequest::clear_contract() {
  if (GetArena() == nullptr && contract_ != nullptr) {
    delete contract_;
  }
  contract_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
HistoricalTicksRequest::HistoricalTicksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  miscoptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.HistoricalTicksRequest)
}
HistoricalTicksRequest::HistoricalTicksRequest(const HistoricalTicksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  miscoptions_.MergeFrom(from.miscoptions_);
  startdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_startdatetime()) {
    startdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_startdatetime(),
      GetArena());
  }
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enddatetime()) {
    enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enddatetime(),
      GetArena());
  }
  whattoshow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whattoshow()) {
    whattoshow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_whattoshow(),
      GetArena());
  }
  if (from._internal_has_contract()) {
    contract_ = new ::protobuf::Contract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignoresize_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(ignoresize_));
  // @@protoc_insertion_point(copy_constructor:protobuf.HistoricalTicksRequest)
}

void HistoricalTicksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto.base);
  startdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whattoshow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignoresize_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(ignoresize_));
}

HistoricalTicksRequest::~HistoricalTicksRequest() {
  // @@protoc_insertion_point(destructor:protobuf.HistoricalTicksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricalTicksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  startdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whattoshow_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
}

void HistoricalTicksRequest::ArenaDtor(void* object) {
  HistoricalTicksRequest* _this = reinterpret_cast< HistoricalTicksRequest* >(object);
  (void)_this;
}
void HistoricalTicksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricalTicksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricalTicksRequest& HistoricalTicksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricalTicksRequest_HistoricalTicksRequest_2eproto.base);
  return *internal_default_instance();
}


void HistoricalTicksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.HistoricalTicksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  miscoptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      startdatetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      enddatetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      whattoshow_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && contract_ != nullptr) {
        delete contract_;
      }
      contract_ = nullptr;
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&reqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignoresize_) -
        reinterpret_cast<char*>(&reqid_)) + sizeof(ignoresize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricalTicksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reqid(&has_bits);
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf.Contract contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string startDateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_startdatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTicksRequest.startDateTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endDateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enddatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTicksRequest.endDateTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfTicks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_numberofticks(&has_bits);
          numberofticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string whatToShow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_whattoshow();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.HistoricalTicksRequest.whatToShow"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useRTH = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_userth(&has_bits);
          userth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignoreSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ignoresize(&has_bits);
          ignoresize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> miscOptions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&miscoptions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricalTicksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.HistoricalTicksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (_internal_has_reqid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // .protobuf.Contract contract = 2;
  if (_internal_has_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::contract(this), target, stream);
  }

  // string startDateTime = 3;
  if (_internal_has_startdatetime()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startdatetime().data(), static_cast<int>(this->_internal_startdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTicksRequest.startDateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_startdatetime(), target);
  }

  // string endDateTime = 4;
  if (_internal_has_enddatetime()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enddatetime().data(), static_cast<int>(this->_internal_enddatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTicksRequest.endDateTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enddatetime(), target);
  }

  // int32 numberOfTicks = 5;
  if (_internal_has_numberofticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_numberofticks(), target);
  }

  // string whatToShow = 6;
  if (_internal_has_whattoshow()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whattoshow().data(), static_cast<int>(this->_internal_whattoshow().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.HistoricalTicksRequest.whatToShow");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_whattoshow(), target);
  }

  // bool useRTH = 7;
  if (_internal_has_userth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_userth(), target);
  }

  // bool ignoreSize = 8;
  if (_internal_has_ignoresize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ignoresize(), target);
  }

  // map<string, string> miscOptions = 9;
  if (!this->_internal_miscoptions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf.HistoricalTicksRequest.MiscOptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf.HistoricalTicksRequest.MiscOptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_miscoptions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_miscoptions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_miscoptions().begin();
          it != this->_internal_miscoptions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_miscoptions().begin();
          it != this->_internal_miscoptions().end(); ++it) {
        target = HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.HistoricalTicksRequest)
  return target;
}

size_t HistoricalTicksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.HistoricalTicksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> miscOptions = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_miscoptions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_miscoptions().begin();
      it != this->_internal_miscoptions().end(); ++it) {
    total_size += HistoricalTicksRequest_MiscOptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string startDateTime = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_startdatetime());
    }

    // string endDateTime = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enddatetime());
    }

    // string whatToShow = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whattoshow());
    }

    // .protobuf.Contract contract = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_);
    }

    // int32 reqId = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reqid());
    }

    // int32 numberOfTicks = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_numberofticks());
    }

    // bool useRTH = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // bool ignoreSize = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalTicksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.HistoricalTicksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalTicksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricalTicksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.HistoricalTicksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.HistoricalTicksRequest)
    MergeFrom(*source);
  }
}

void HistoricalTicksRequest::MergeFrom(const HistoricalTicksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.HistoricalTicksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  miscoptions_.MergeFrom(from.miscoptions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_startdatetime(from._internal_startdatetime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_enddatetime(from._internal_enddatetime());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_whattoshow(from._internal_whattoshow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_contract()->::protobuf::Contract::MergeFrom(from._internal_contract());
    }
    if (cached_has_bits & 0x00000010u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000020u) {
      numberofticks_ = from.numberofticks_;
    }
    if (cached_has_bits & 0x00000040u) {
      userth_ = from.userth_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignoresize_ = from.ignoresize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalTicksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.HistoricalTicksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalTicksRequest::CopyFrom(const HistoricalTicksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.HistoricalTicksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalTicksRequest::IsInitialized() const {
  return true;
}

void HistoricalTicksRequest::InternalSwap(HistoricalTicksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  miscoptions_.Swap(&other->miscoptions_);
  startdatetime_.Swap(&other->startdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enddatetime_.Swap(&other->enddatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  whattoshow_.Swap(&other->whattoshow_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricalTicksRequest, ignoresize_)
      + sizeof(HistoricalTicksRequest::ignoresize_)
      - PROTOBUF_FIELD_OFFSET(HistoricalTicksRequest, contract_)>(
          reinterpret_cast<char*>(&contract_),
          reinterpret_cast<char*>(&other->contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricalTicksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HistoricalTicksRequest_MiscOptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::HistoricalTicksRequest* Arena::CreateMaybeMessage< ::protobuf::HistoricalTicksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::HistoricalTicksRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
